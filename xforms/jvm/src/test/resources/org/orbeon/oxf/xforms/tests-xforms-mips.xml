<!--
  Copyright (C) 2010 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<group description="XForms MIPs" xmlns:p="http://www.orbeon.com/oxf/pipeline"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xh="http://www.w3.org/1999/xhtml"
    xmlns:oxf="http://www.orbeon.com/oxf/processors"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xxi="http://orbeon.org/oxf/xml/xinclude"
    xmlns:xf="http://www.w3.org/2002/xforms"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
    xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:xbl="http://www.w3.org/ns/xbl"
    xmlns:fr="http://orbeon.org/oxf/xml/form-runner">

    <test description="Calculate upon initialization" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model id="main-model">
                                    <xf:instance id="tests">
                                        <instance>
                                            <noFoundData>0</noFoundData>
                                        </instance>
                                    </xf:instance>
                                    <xf:bind ref="instance('tests')">
                                        <xf:bind ref="noFoundData" calculate=". + 1"/>
                                    </xf:bind>
                                </xf:model>
                            </xh:head>
                            <xh:body>
                                <xf:group ref="instance('tests')" id="id1">
                                    <xf:input ref="noFoundData" id="id2">
                                        <xf:label class="fixed-width">test noFoundData:</xf:label>
                                    </xf:input>
                                </xf:group>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>
            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="tests" model-id="main-model">
                                <instance>
                                    <noFoundData>1</noFoundData>
                                </instance>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="id2" label="test noFoundData:" readonly="true">
                            <xxf:value>1</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Non-relevant controls when bound to empty node-set" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model id="main-model">
                                    <xf:instance id="main-instance">
                                        <instance>
                                            <this-is-an-existing-node/>
                                        </instance>
                                    </xf:instance>
                                </xf:model>
                            </xh:head>
                            <xh:body>
                                <xf:group ref="instance('main-instance')" id="id1">
                                    <xf:input ref="this-is-an-existing-node" id="id2"/>
                                    <xf:input ref="this-is-a-non-existing-node" id="id3"/>
                                </xf:group>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>
            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="id3" relevant="false"/>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Bind readonly and relevant inheritance" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model id="main-model">
                                    <xf:instance id="instance">
                                        <e1 gege="gigi1">
                                            <e2>
                                                <e3>
                                                    <gege>gigi2</gege>
                                                </e3>
                                            </e2>
                                            <e4>
                                                <e5>
                                                    <gege>gigi3</gege>
                                                </e5>
                                            </e4>
                                        </e1>
                                    </xf:instance>
                                    <xf:bind ref="e2" relevant="false()"/>
                                    <xf:bind ref="e4" readonly="true()"/>
                                </xf:model>
                            </xh:head>
                            <xh:body>
                                <xf:input id="id1" ref="@gege"/>
                                <xf:input id="id2" ref="e2/e3/gege"/>
                                <xf:input id="id3" ref="e4/e5/gege"/>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>
            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="id1">
                            <xxf:value>gigi1</xxf:value>
                        </xxf:control>
                        <xxf:control id="id2" relevant="false"/>
                        <xxf:control id="id3" readonly="true">
                            <xxf:value>gigi3</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Boolean MIP values conversion" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">

                        <xf:instance id="instance">
                            <instance>
                                <a/>
                                <b/>
                                <c/>
                                <d/>
                                <e/>
                                <f/>
                                <g/>
                                <h/>
                                <i/>
                                <j/>

                                <false>false</false>
                                <true>true</true>
                            </instance>
                        </xf:instance>

                        <xf:bind ref="a" constraint="'false'"/>
                        <xf:bind ref="b" constraint="false()"/>
                        <xf:bind ref="c" constraint="'true'"/>
                        <xf:bind ref="d" constraint="true()"/>
                        <xf:bind ref="e" constraint="../true"/>
                        <xf:bind ref="f" constraint="../false"/>
                        <xf:bind ref="g" constraint="non-existing"/>
                        <xf:bind ref="h" constraint="0"/>
                        <xf:bind ref="i" constraint="1000"/>
                        <xf:bind ref="j" constraint="number('NaN')"/>

                        <xf:instance id="result">
                            <result/>
                        </xf:instance>

                        <!-- Result for "a" might change in the future if instead the xs:boolean() logic is used -->

                        <xf:action ev:event="xforms-ready" iterate="*">
                            <xf:var name="current" value="."/>
                            <xf:insert context="instance('result')" ref="*" origin="xf:element(name($current), valid($current))"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="result" model-id="model">
                                <result>
                                    <a>true</a>
                                    <b>false</b>
                                    <c>true</c>
                                    <d>true</d>
                                    <e>true</e>
                                    <f>true</f>
                                    <g>false</g>
                                    <h>false</h>
                                    <i>true</i>
                                    <j>false</j>
                                    <false>true</false>
                                    <true>true</true>
                                </result>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Built-in Schema Types" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model>

                                    <xf:instance id="instance">
                                        <instance>
                                            <emails>
                                                <email/>
                                                <email>editors@example.com</email>&gt;
                                                <email>~my_mail+{nospam}$?@sub-domain.example.info</email>
                                                <email>editors@(this is a comment)example.info</email>
                                                <email>editors{at}example{dot}info</email>
                                                <email>mailto:editors@example.com</email>
                                                <email>a</email>
                                                <email>a@</email>
                                                <email>a@b</email>
                                                <email>a@b.</email>
                                                <email>a@b..</email>
                                                <email>a@b.com</email>
                                                <email>a@b.com/</email>
                                                <email>a@b.brussels</email>
                                                <email>a@b.photography</email>
                                            </emails>
                                        </instance>
                                    </xf:instance>

                                    <xf:bind ref="emails/email" type="xf:email"/>

                                    <xf:instance id="result">
                                        <result/>
                                    </xf:instance>

                                    <xf:action ev:event="xforms-ready" iterate="*/*">
                                        <xf:var name="current" value="."/>
                                        <xf:insert context="instance('result')" ref="*" origin="xf:element(name($current), valid($current))"/>
                                    </xf:action>

                                </xf:model>
                            </xh:head>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>

            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="result" model-id="xf-1">
                                <result>
                                    <email>true</email>
                                    <email>true</email>
                                    <email>true</email>
                                    <email>false</email>
                                    <email>false</email>
                                    <email>false</email>
                                    <email>false</email>
                                    <email>false</email>
                                    <email>false</email>
                                    <email>false</email>
                                    <email>false</email>
                                    <email>true</email>
                                    <email>false</email>
                                    <email>true</email>
                                    <email>true</email>
                                </result>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Custom MIPs" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model xmlns:foo="http://orbeon.org/oxf/xml/foo" id="my-model">
                                    <xf:instance id="my-instance">
                                        <fruits>
                                            <orange>bloody</orange>
                                            <orange>valencia</orange>
                                            <apple>green</apple>
                                            <apple>red</apple>
                                            <apple>iPod</apple>
                                            <pear>green</pear>
                                            <pear>williams</pear>
                                            <pear>yellow</pear>
                                        </fruits>
                                    </xf:instance>
                                    <!-- This is the key: set a custom MIP depending on the value -->
                                    <xf:bind ref="*" foo:bar="if (starts-with(., 'g')) then 'is-g' else 'is-not-g'"/>
                                </xf:model>
                            </xh:head>
                            <xh:body>
                                <xf:repeat id="my-repeat" ref="*">
                                    <xf:input id="my-control" ref="."/>
                                </xf:repeat>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>

            </p:config>
        </input>
        <output name="response">
           <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="my-repeat" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-control⊙1" class="+foo-bar-is-not-g">
                            <xxf:value>bloody</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-control⊙2" class="+foo-bar-is-not-g">
                            <xxf:value>valencia</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-control⊙3" class="+foo-bar-is-g">
                            <xxf:value>green</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-control⊙4" class="+foo-bar-is-not-g">
                            <xxf:value>red</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-control⊙5" class="+foo-bar-is-not-g">
                            <xxf:value>iPod</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-control⊙6" class="+foo-bar-is-g">
                            <xxf:value>green</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-control⊙7" class="+foo-bar-is-not-g">
                            <xxf:value>williams</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-control⊙8" class="+foo-bar-is-not-g">
                            <xxf:value>yellow</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Extension MIP XPath functions" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model id="model">
                                    <xf:instance id="instance">
                                        <instance>
                                            <readonly/>
                                            <required/>
                                            <relevant/>
                                            <valid/>
                                        </instance>
                                    </xf:instance>

                                    <xf:bind ref="readonly" readonly="true()"/>
                                    <xf:bind ref="required" required="true()"/>

                                    <xf:bind ref="relevant" relevant="false()"/>
                                    <xf:bind ref="valid" constraint="false()"/>
                                </xf:model>
                            </xh:head>
                            <xh:body xmlns:exf="http://www.exforms.org/exf/1-0">

                                <!-- Test a few possibilities -->
                                <xf:output id="output-readonly-1" ref=".[exf:readonly(readonly)]" value="'I am readonly'"/>
                                <xf:output id="output-readonly-2" ref="readonly[exf:readonly()]" value="'I am readonly'"/>
                                <xf:output id="output-required-1" ref=".[exf:required(required)]" value="'I am required'"/>
                                <xf:output id="output-required-2" ref="required[exf:required()]" value="'I am required'"/>

                                <xf:output id="output-relevant" ref=".[not(exf:relevant(relevant))]" value="'I am not relevant'"/>

                                <xf:output id="output-valid-1" ref=".[not(xxf:valid(valid))]" value="'I am not valid'"/>
                                <xf:output id="output-valid-2" ref="valid[not(xxf:valid())]" value="'I am not valid'"/>

                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>

            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output-readonly-1">
                            <xxf:value>I am readonly</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-readonly-2" readonly="true">
                            <xxf:value>I am readonly</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-required-1">
                            <xxf:value>I am required</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-required-2" required="true" level="error" empty="false">
                            <xxf:value>I am required</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-relevant">
                            <xxf:value>I am not relevant</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-valid-1">
                            <xxf:value>I am not valid</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-valid-2" level="error">
                            <xxf:value>I am not valid</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Inter-model dependency fix with xf:recalculate action" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model id="form-model">
                                    <!-- Form instance -->
                                    <xf:instance id="form-instance">
                                        <first-name/>
                                    </xf:instance>
                                    <!-- Value is always invalid -->
                                    <xf:bind ref="." constraint="false()"/>
                                </xf:model>

                                <xf:model id="errors-model">

                                    <!-- This will be set to "false" during initial refresh -->
                                    <xf:instance id="form-valid-instance">
                                        <valid>true</valid>
                                    </xf:instance>

                                </xf:model>

                                <xf:model id="persistence-model">

                                    <xf:instance id="triggers-instance">
                                        <submit/>
                                    </xf:instance>
                                    <!-- Cross-model dependency with xxf:instance() won't update without explicit xf:recalculate -->
                                    <xf:bind ref="." readonly="xxf:instance('form-valid-instance') = 'false'"/>

                                </xf:model>
                            </xh:head>
                            <xh:body>

                                <xf:group>
                                    <xf:action ev:event="xforms-invalid">
                                        <xf:setvalue model="errors-model" ref="instance('form-valid-instance')">false</xf:setvalue>
                                        <!-- Force recalculate -->
                                        <xf:recalculate model="persistence-model"/>
                                    </xf:action>

                                    <!-- Data will be invalid -->
                                    <xf:input id="first-name-control" ref=".">
                                        <xf:label>First name</xf:label>
                                    </xf:input>

                                    <!-- This must be read-only -->
                                    <xf:trigger id="submit-trigger" model="persistence-model" ref=".">
                                        <xf:label>Submit</xf:label>
                                    </xf:trigger>
                                </xf:group>

                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>

            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="form-valid-instance" model-id="errors-model">
                                <valid>false</valid>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="first-name-control" label="First name" level="error"/>
                        <xxf:control id="submit-trigger" label="Submit" readonly="true"/>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:type() function" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model id="form-model">
                                    <xf:instance id="values">
                                        <values>
                                            <value nodetype="" valuetype="">Lucy</value>
                                            <value xsi:type="xs:integer" nodetype="" valuetype="">35</value>
                                            <value xsi:type="xs:boolean" nodetype="" valuetype="">false</value>
                                            <value xsi:type="xs:date" nodetype="" valuetype="">1980-01-01</value>
                                            <value xsi:type="xs:time" nodetype="" valuetype="">12:00:00</value>
                                            <value xsi:type="xs:double" nodetype="" valuetype="">12E1</value>
                                            <value xsi:type="xs:string" nodetype="" valuetype="">Lucy</value>
                                        </values>
                                    </xf:instance>

                                    <xf:action ev:event="xforms-ready">

                                        <xf:action iterate="*">
                                            <xf:setvalue ref="@nodetype" value="xxf:type(context())"/>
                                        </xf:action>

                                        <xf:setvalue ref="*[1]/@valuetype" value="xxf:type('Lucy')"/>
                                        <xf:setvalue ref="*[2]/@valuetype" value="xxf:type(35)"/>
                                        <xf:setvalue ref="*[3]/@valuetype" value="xxf:type(false())"/>
                                        <xf:setvalue ref="*[4]/@valuetype" value="xxf:type(xs:date('1980-01-01'))"/>
                                        <xf:setvalue ref="*[5]/@valuetype" value="xxf:type(xs:time('12:00:00'))"/>
                                        <xf:setvalue ref="*[6]/@valuetype" value="xxf:type(12E1)"/>
                                        <xf:setvalue ref="*[7]/@valuetype" value="xxf:type('Lucy')"/>
                                    </xf:action>

                                </xf:model>
                            </xh:head>
                            <xh:body>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>

            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="values" model-id="form-model">
                                <values>
                                    <value nodetype="" valuetype="xs:string">Lucy</value>
                                    <value xsi:type="xs:integer" nodetype="integer" valuetype="xs:integer">35</value>
                                    <value xsi:type="xs:boolean" nodetype="boolean" valuetype="xs:boolean">false</value>
                                    <value xsi:type="xs:date" nodetype="date" valuetype="xs:date">1980-01-01</value>
                                    <value xsi:type="xs:time" nodetype="time" valuetype="xs:time">12:00:00</value>
                                    <value xsi:type="xs:double" nodetype="double" valuetype="xs:double">12E1</value>
                                    <value xsi:type="xs:string" nodetype="string" valuetype="xs:string">Lucy</value>
                                </values>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Test type annotations" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model id="form-model" xxf:expose-xpath-types="true">
                                    <xf:instance id="values">
                                        <values>
                                            <value>Lucy</value>
                                            <value xsi:type="xs:integer">35</value>
                                            <value xsi:type="xs:boolean">false</value>
                                            <value xsi:type="xs:date">1980-01-01</value>
                                            <value xsi:type="xs:time">12:00:00</value>
                                            <value xsi:type="xs:double">12.5E0</value>
                                            <value xsi:type="xs:string">Lucy</value>
                                        </values>
                                    </xf:instance>
                                </xf:model>
                            </xh:head>
                            <xh:body>
                                <xf:output id="output-string" value="value[1]"/>
                                <xf:output id="output-integer" value="value[2] + 1"/>
                                <xf:output id="output-boolean" value="false() != value[3]"/>
                                <xf:output id="output-date" value="value[4] + xs:dayTimeDuration('P1D')"/>
                                <xf:output id="output-time" value="value[5] + xs:dayTimeDuration('PT10H30M')"/>
                                <xf:output id="output-double" value="value[6] + .5"/>
                                <xf:output id="output-string-2" value="value[7]"/>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>

            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output-string">
                            <xxf:value>Lucy</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-integer">
                            <xxf:value>36</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-boolean">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-date">
                            <xxf:value>1980-01-02</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-time">
                            <xxf:value>22:30:00</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-double">
                            <xxf:value>13</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-string-2">
                            <xxf:value>Lucy</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxforms-valid/xxforms-invalid" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model id="model">

                                    <xf:instance id="value">
                                        <value/>
                                    </xf:instance>
                                    <xf:bind ref="instance('value')" required="true()"/>

                                    <xf:instance id="validity">
                                        <validity/>
                                    </xf:instance>

                                    <xf:action ev:event="xxforms-valid" ev:observer="value">
                                        <xf:insert context="instance('validity')" ref="*" origin="xf:element('valid')" />
                                    </xf:action>
                                    <xf:action ev:event="xxforms-invalid" ev:observer="value">
                                        <xf:insert context="instance('validity')" ref="*" origin="xf:element('invalid')" />
                                    </xf:action>

                                    <xf:setvalue ev:event="xforms-ready" ref="instance('value')">42</xf:setvalue>

                                </xf:model>
                            </xh:head>
                            <xh:body>
                                <xf:input id="my-input" ref="instance('value')"/>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>

            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="value" model-id="model">
                                <value>42</value>
                            </instance>
                            <instance id="validity" model-id="model">
                                <validity>
                                    <invalid/>
                                    <valid/>
                                </validity>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-input" required="true" empty="false">
                            <xxf:value>42</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Simple use of xxf:evaluate-bind-property function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance>
                                <foo/>
                                <bar>43</bar>
                            </instance>
                        </xf:instance>
                        <xf:bind id="foo-bind" ref="foo"
                                     xxf:default="42"
                                     relevant=". = 86"
                                     calculate="xs:integer(../bar) * 2"
                                     readonly="false()"
                                     required="true()"
                                     type="xs:integer"/>
                    </xf:model>
                    <xf:model id="model2">
                        <xf:instance id="instance2">
                            <instance>
                                <foo/>
                                <bar>43</bar>
                            </instance>
                        </xf:instance>
                        <xf:bind id="foo-bind2" ref="foo"
                                     xxf:default="42"
                                     relevant=". = 86"
                                     calculate="xs:integer(../bar) * 2"
                                     readonly="false()"
                                     required="true()"
                                     type="xs:integer"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output id="output-relevant" value="xxf:evaluate-bind-property('foo-bind', 'relevant')"/>
                    <xf:output id="output-readonly" value="xxf:evaluate-bind-property('foo-bind', 'readonly')"/>
                    <xf:output id="output-required" value="xxf:evaluate-bind-property('foo-bind', 'required')"/>
                    <xf:output id="output-type" value="xxf:evaluate-bind-property('foo-bind', 'type')"/>
                    <xf:output id="output-constraint" value="xxf:evaluate-bind-property('foo-bind', 'constraint')"/>
                    <xf:output id="output-calculate" value="xxf:evaluate-bind-property('foo-bind', 'calculate')"/>
                    <xf:output id="output-default" value="xxf:evaluate-bind-property('foo-bind', 'xxf:default')"/>

                    <xf:output id="output-relevant2" value="xxf:evaluate-bind-property('foo-bind2', 'relevant')"/>
                    <xf:output id="output-readonly2" value="xxf:evaluate-bind-property('foo-bind2', 'readonly')"/>
                    <xf:output id="output-required2" value="xxf:evaluate-bind-property('foo-bind2', 'required')"/>
                    <xf:output id="output-type2" value="xxf:evaluate-bind-property('foo-bind2', 'type')"/>
                    <xf:output id="output-constraint2" value="xxf:evaluate-bind-property('foo-bind2', 'constraint')"/>
                    <xf:output id="output-calculate2" value="xxf:evaluate-bind-property('foo-bind2', 'calculate')"/>
                    <xf:output id="output-default2" value="xxf:evaluate-bind-property('foo-bind2', 'xxf:default')"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
           <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <instance>
                                    <foo>86</foo>
                                    <bar>43</bar>
                                </instance>
                            </instance>
                            <instance id="instance2" model-id="model2">
                                <instance>
                                    <foo>86</foo>
                                    <bar>43</bar>
                                </instance>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output-relevant">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-readonly">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-required">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-type">
                            <xxf:value>xs:integer</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-calculate">
                            <xxf:value>86</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-default">
                            <xxf:value>42</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-relevant2">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-readonly2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-required2">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-type2">
                            <xxf:value>xs:integer</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-calculate2">
                            <xxf:value>86</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-default2">
                            <xxf:value>42</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:evaluate-bind-property function within nested nested binds with repeat" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:foo="http://orbeon.org/oxf/xml/foo">
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance>
                                <foo bar=""/>
                                <foo bar=""/>
                                <foo bar=""/>
                                <foo bar=""/>
                            </instance>
                        </xf:instance>
                        <xf:bind id="foo-bind" ref="foo">
                            <xf:bind id="value-bind" ref="."
                                         xxf:default="count(preceding-sibling::foo) + 42"
                                         relevant="count(preceding-sibling::foo) mod 2 = 0"
                                         readonly="count(preceding-sibling::foo) mod 3 = 0"
                                         required="count(preceding-sibling::foo) mod 4 = 0"
                                         type="xs:integer"
                                         constraint="xs:integer(.) le 43"
                                         foo:bar="string-join((., @bar), ', ')"
                                         />
                            <xf:bind id="bar-bind" ref="@bar" calculate=".. + 1"/>

                        </xf:bind>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:repeat bind="foo-bind" id="repeat">
                        <xf:output id="output-relevant" value="xxf:evaluate-bind-property('value-bind', 'relevant')"/>
                        <xf:output id="output-readonly" value="xxf:evaluate-bind-property('value-bind', 'readonly')"/>
                        <xf:output id="output-required" value="xxf:evaluate-bind-property('value-bind', 'required')"/>
                        <xf:output id="output-type" value="xxf:evaluate-bind-property('value-bind', 'type')"/>
                        <xf:output id="output-constraint" value="xxf:evaluate-bind-property('value-bind', 'constraint')"/>
                        <xf:output id="output-default" value="xxf:evaluate-bind-property('value-bind', 'xxf:default')"/>
                        <xf:output id="output-custom" value="xxf:evaluate-bind-property('value-bind', 'foo:bar')"/>

                        <xf:output id="output-calculate" value="xxf:evaluate-bind-property('bar-bind', 'calculate')"/>
                    </xf:repeat>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
           <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <instance>
                                    <foo bar="43">42</foo>
                                    <foo bar="44">43</foo>
                                    <foo bar="45">44</foo>
                                    <foo bar="46">45</foo>
                                </instance>
                            </instance>
                        </instances>
                        <controls>
                            <control effective-id="repeat" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output-relevant⊙1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-readonly⊙1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-required⊙1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-type⊙1">
                            <xxf:value>xs:integer</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-constraint⊙1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-default⊙1">
                            <xxf:value>42</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-custom⊙1">
                            <xxf:value>42, 43</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-calculate⊙1">
                            <xxf:value>43</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-relevant⊙2">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-readonly⊙2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-required⊙2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-type⊙2">
                            <xxf:value>xs:integer</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-constraint⊙2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-default⊙2">
                            <xxf:value>44</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-custom⊙2">
                            <xxf:value>44, 45</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-calculate⊙2">
                            <xxf:value>45</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Initial build of controls may use out of date binds" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="fr-persistence-model">
                        <xf:instance id="fr-persistence-instance">
                            <save>
                                <data-status>clean</data-status>
                            </save>
                        </xf:instance>
                        <xf:instance id="fr-triggers-instance">
                            <triggers>
                                <save/>
                            </triggers>
                        </xf:instance>
                        <xf:bind ref="instance('fr-triggers-instance')">
                            <xf:bind ref="save" readonly="instance('fr-persistence-instance')/data-status = 'clean'"/>
                        </xf:bind>

                        <xf:submission
                            id="fr-get-document-submission"
                            serialization="none"
                            method="get"
                            resource="oxf:/org/orbeon/oxf/xforms/data/bug-events-data.xml"
                            replace="instance"
                            xxf:instance="fr-form-instance"/>

                        <xf:action ev:event="xforms-model-construct-done">
                            <xf:send submission="fr-get-document-submission"/>
                        </xf:action>

                        <xf:action ev:event="xforms-ready">
                            <xf:rebuild/>
                            <xf:recalculate/>
                            <xf:refresh/>

                            <xf:setvalue ref="instance('fr-persistence-instance')/data-status" value="'clean'"/>
                        </xf:action>
                    </xf:model>
                    <xf:model id="fr-form-model">
                        <xf:instance id="fr-form-instance">
                            <book>
                                <title/>
                            </book>
                        </xf:instance>
                        <xf:bind id="title-bind" ref="title"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xh:p>
                        See <a
                        href="http://forge.objectweb.org/tracker/index.php?func=detail&amp;aid=312406&amp;group_id=168&amp;atid=350207">fixed</a>.
                        Proper behavior is that the Save button is disabled upon page load.
                    </xh:p>
                    <xf:group model="fr-form-model">
                        <xf:input id="title-input" bind="title-bind">
                            <xf:label>Note</xf:label>
                        </xf:input>
                        <xf:setvalue ev:event="xforms-value-changed xforms-enabled" model="fr-persistence-model" ref="instance('fr-persistence-instance')/data-status" value="'dirty'"/>
                    </xf:group>
                    <xf:trigger id="save-trigger" ref="instance('fr-triggers-instance')/save">
                        <xf:label>Save</xf:label>
                    </xf:trigger>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
           <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="fr-persistence-instance" model-id="fr-persistence-model">
                                <save>
                                    <data-status>clean</data-status>
                                </save>
                            </instance>
                            <instance id="fr-form-instance" model-id="fr-form-model">
                                <!--
  Copyright (C) 2009 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
                                <book>
                                    <title>Cool title</title>
                                </book>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="title-input" label="Note">
                            <xxf:value>Cool title</xxf:value>
                        </xxf:control>
                        <xxf:control id="save-trigger" label="Save" readonly="true"/>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Reference to nested bind within empty nodeset" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model>
                                    <xf:instance>
                                        <instance>
                                            <company>
                                                <employee/>
                                                <employee/>
                                            </company>
                                            <company>
                                                <employee/>
                                                <employee/>
                                            </company>
                                        </instance>
                                    </xf:instance>
                                    <xf:bind ref="company" id="companies">
                                        <xf:bind ref="employee" id="employees"/>
                                    </xf:bind>
                                    <xf:bind ref="foo" id="foos">
                                        <xf:bind ref="bar" id="bars"/>
                                    </xf:bind>
                                </xf:model>
                            </xh:head>
                            <xh:body>
                                <!-- Must be non-relevant because the context item does not match -->
                                <xf:input bind="employees" id="input1"/>
                                <!-- Must be non-relevant because the node-set is empty -->
                                <xf:input bind="foos" id="input2"/>

                                <!-- Must be relevant because the context item matches -->
                                <xf:group bind="companies" id="group1">
                                    <xf:input bind="employees" id="input3"/>
                                </xf:group>

                                <!-- Must be non-relevant -->
                                <xf:group bind="foos" id="group2">
                                    <xf:input bind="bars" id="input4"/>
                                </xf:group>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>
            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="input1" relevant="false"/>
                        <xxf:control id="input2" relevant="false"/>
                        <xxf:control id="group2" relevant="false"/>
                        <xxf:control id="input4" relevant="false"/>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Use of xf:bind/@ref and xf:repeat/@ref" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model id="model">
                                    <xf:instance id="instance">
                                        <instance>
                                            <company>
                                                <employee>Mickey</employee>
                                                <employee>Minnie</employee>
                                            </company>
                                            <company>
                                                <employee>Donald</employee>
                                                <employee>Daisy</employee>
                                            </company>
                                        </instance>
                                    </xf:instance>
                                    <xf:bind ref="company" id="companies">
                                        <xf:bind ref="employee" id="employees"/>
                                    </xf:bind>
                                </xf:model>
                            </xh:head>
                            <xh:body>
                                <xf:repeat bind="companies" id="repeat1">
                                    <xf:repeat bind="employees" id="repeat2">
                                        <xf:input ref="." id="input1"/>
                                    </xf:repeat>
                                </xf:repeat>

                                <xf:group bind="companies" id="group1">
                                    <xf:input bind="employees" id="input2"/>
                                </xf:group>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>
            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="repeat1" index="1"/>
                            <control effective-id="repeat2⊙1" index="1"/>
                            <control effective-id="repeat2⊙2" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="input1⊙1-1">
                            <xxf:value>Mickey</xxf:value>
                        </xxf:control>
                        <xxf:control id="input1⊙1-2">
                            <xxf:value>Minnie</xxf:value>
                        </xxf:control>
                        <xxf:control id="input1⊙2-1">
                            <xxf:value>Donald</xxf:value>
                        </xxf:control>
                        <xxf:control id="input1⊙2-2">
                            <xxf:value>Daisy</xxf:value>
                        </xxf:control>
                        <xxf:control id="input2">
                            <xxf:value>Mickey</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Output classes for custom types" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-controls.xpl"/>
        <input name="document">
            <xh:html xmlns:foo="http://orbeon.org/oxf/xml/foo">
                <xh:head>
                    <xf:model id="model">

                        <xs:schema targetNamespace="http://orbeon.org/oxf/xml/foo" attributeFormDefault="unqualified" elementFormDefault="qualified">
                            <xs:element name="myElement" type="foo:myType"/>
                            <xs:complexType name="myType">
                                <xs:simpleContent>
                                    <xs:restriction base="xs:string">
                                        <xs:minLength value="1"/>
                                    </xs:restriction>
                                </xs:simpleContent>
                            </xs:complexType>
                        </xs:schema>

                        <xf:instance id="instance">
                            <instance>
                                <!-- Will be picked by LAX validation -->
                                <foo:myElement>cA</foo:myElement>
                                <!-- Explicitly associated with type -->
                                <bar>CA</bar>
                            </instance>
                        </xf:instance>
                        <xf:bind id="bind1" ref="bar" type="foo:myType"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <!-- NOTE: A possible MSV bug: it doesn't return the type name in this case. So we don't get the right class name on my-input1 -->
                    <xf:input ref="foo:myElement" id="my-input1"/>
                    <xf:input ref="bar" id="my-input2"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <controls>
                <xh:span id="my-input1" class="xforms-control xforms-input">
                    <xh:input id="my-input1≡xforms-input-1" type="text" name="my-input1≡xforms-input-1" value="cA" class="xforms-input-input"/>
                </xh:span>
                <xh:span id="my-input2" class="xforms-control xforms-input xforms-type-custom-myType">
                    <xh:input id="my-input2≡xforms-input-1" type="text" name="my-input2≡xforms-input-1" value="CA" class="xforms-input-input"/>
                </xh:span>
            </controls>
        </output>
    </test>

    <test description="xf:recalculate/action forcing recalculation of initial values" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance>
                                <date/>
                                <date1/>
                                <date2/>
                            </instance>
                        </xf:instance>
                        <xf:bind id="date-bind" ref="date" type="xs:date" xxf:default="xs:date('2001-01-01')"/>

                        <xf:action ev:event="xforms-ready">
                            <!-- Copy first initial value -->
                            <xf:setvalue ref="date1" value="bind('date-bind')"/>
                            <!-- Override initial value and copy it -->
                            <xf:setvalue bind="date-bind" value="xs:date('2010-05-28')"/>
                            <xf:setvalue ref="date2" value="bind('date-bind')"/>
                            <!-- Recalculate must restore initial value -->
                            <xf:recalculate xxf:defaults="true"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:input bind="date-bind" id="my-input"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <instance>
                                    <date>2001-01-01</date>
                                    <date1>2001-01-01</date1>
                                    <date2>2010-05-28</date2>
                                </instance>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-input" type="{http://www.w3.org/2001/XMLSchema}date">
                            <xxf:value>2001-01-01</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:invalid-binds() returns correct bind id with required-but-empty and constraint" name="oxf:pipeline">
        <!-- See http://forge.ow2.org/tracker/index.php?func=detail&aid=315460&group_id=168&atid=350207 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance>
                                <value1/>
                                <value2/>
                            </instance>
                        </xf:instance>
                        <xf:bind id="constraint-bind1" ref="value1" constraint="true()"/>
                        <xf:bind id="required-bind1" ref="value1" required="true()"/>

                        <xf:bind id="required-bind2" ref="value2" required="true()"/>
                        <xf:bind id="constraint-bind2" ref="value2" constraint="true()"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output id="output1" value="string-join(xxf:invalid-binds(value1), ', ')"/>
                    <xf:output id="output2" value="string-join(xxf:invalid-binds(value2), ', ')"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1">
                            <xxf:value>required-bind1</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2">
                            <xxf:value>required-bind2</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Don't throw exception with bind on non-NodeWrapper NodeInfo" name="oxf:pipeline">
        <!-- See http://forge.ow2.org/tracker/index.php?func=detail&aid=315728&group_id=168&atid=350207 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <!-- Mark instance as readonly -->
                        <xf:instance id="instance" xxf:readonly="true">
                            <instance>
                                <value/>
                            </instance>
                        </xf:instance>
                        <xf:bind ref="instance()">
                            <!-- Use nested bind to trigger creation of BindNode object-->
                            <xf:bind ref="."/>
                        </xf:bind>
                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Elements containing other elements supports @constraint" name="oxf:pipeline">
        <!-- See: http://forge.ow2.org/tracker/index.php?func=detail&aid=315821&group_id=168&atid=350207 -->
        <input name="config" href="wrap-xforms-controls.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model>
                        <xf:instance>
                            <instance>
                                <outer><inner>Foo</inner></outer>
                                <outer><inner>Foo</inner></outer>
                                <outer><inner/></outer>
                            </instance>
                        </xf:instance>
                        <!-- Constraint applies -->
                        <xf:bind ref="outer[1]" constraint="false()"/>
                        <!-- Type and required doesn't apply -->
                        <xf:bind ref="outer[2]" type="xs:integer"/>
                        <xf:bind ref="outer[3]" required="true()"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group ref="outer[1]" id="constraint"/>
                    <xf:group ref="outer[2]" id="type"/>
                    <xf:group ref="outer[3]" id="required"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <controls>
                <xh:span id="constraint" class="xforms-group xforms-invalid"/>
                <xh:span id="type" class="xforms-group"/>
                <xh:span id="required" class="xforms-group xforms-required"/>
            </controls>
        </output>
    </test>

    <test description="Validation information is updated before xforms-ready runs" name="oxf:pipeline">
        <!-- See: http://forge.ow2.org/tracker/index.php?func=detail&aid=316315&group_id=168&atid=350207 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance>
                                <value valid="true"/>
                                <result/>
                            </instance>
                        </xf:instance>

                        <!-- Validity depends on a value -->
                        <xf:bind ref="value" constraint="@valid = 'true'"/>

                        <!-- Update value on which validity depends -->
                        <xf:setvalue ev:event="xforms-model-construct-done" ref="value/@valid">false</xf:setvalue>
                        <!-- Get latest validity -->
                        <xf:setvalue ev:event="xforms-ready" ref="result" value="valid(../value)"/>
                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <instance>
                                    <value valid="false"/>
                                    <result>false</result>
                                </instance>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#73: Schema validation: no datatype assigned to attribute" name="oxf:pipeline">
        <!-- See: https://github.com/orbeon/orbeon-forms/issues/73 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xs:schema>

                            <xs:element name="test" type="tAttributeTest"/>
                            <xs:element name="test2" type="tAttributeTest2"/>

                            <xs:complexType name="tAttributeTest">
                                <xs:simpleContent>
                                    <xs:extension base="xs:string">
                                        <xs:attribute name="attr1" type="xs:boolean"/>
                                        <xs:attribute name="attr2" type="xs:boolean"/>
                                    </xs:extension>
                                </xs:simpleContent>
                            </xs:complexType>

                            <xs:complexType name="tAttributeTest2">
                                <xs:attribute name="attr1" type="xs:boolean"/>
                            </xs:complexType>

                        </xs:schema>

                        <xf:instance id="instance">
                            <data>
                                <test attr1="false" attr2="true"/>
                                <test2 attr1="true"/>
                            </data>
                        </xf:instance>

                    </xf:model>
                </xh:head>
                <xh:body>

                    <xf:input ref="test/@attr1" id="input1"/>
                    <xf:input ref="test2/@attr1" id="input2"/>

                </xh:body>
            </xh:html>

        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="input1" type="{http://www.w3.org/2001/XMLSchema}boolean">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="input2" type="{http://www.w3.org/2001/XMLSchema}boolean">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#331: Namespace interference with xs:*" name="oxf:pipeline">
        <!-- See: https://github.com/orbeon/orbeon-forms/issues/331 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                <!-- Override xs prefix -->
                <xf:model xmlns:xs="foo" id="model">
                    <xf:instance id="instance">
                        <value/>
                    </xf:instance>
                    <xf:bind ref="." calculate="42"/>
                </xf:model>
            </xh:head>
        </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <value>42</value>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Access typed value" name="oxf:pipeline">
        <!-- See also: #630 "Enable XPath type annotations by default in Builder" -->
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model id="form-model" xxf:expose-xpath-types="true">
                                    <xf:instance id="input">
                                        <values>
                                            <int>35</int>
                                            <int/>
                                        </values>
                                    </xf:instance>
                                    <xf:bind ref="instance('input')">
                                        <xf:bind ref="string"  type="xf:string"/>
                                        <xf:bind ref="int"     type="xf:integer"/>
                                        <xf:bind ref="boolean" type="xf:boolean"/>
                                        <xf:bind ref="date"    type="xf:date"/>
                                        <xf:bind ref="time"    type="xf:time"/>
                                        <xf:bind ref="double"  type="xf:double"/>
                                    </xf:bind>
                                    <xf:instance id="output">
                                        <values>
                                            <value/>
                                            <value/>
                                            <value>MUST BE BLANKED</value>
                                            <value/>
                                            <value/>
                                            <value/>
                                            <value/>
                                        </values>
                                    </xf:instance>
                                    <xf:bind ref="instance('output')">
                                        <!-- Multiplication using type -->
                                        <xf:bind ref="value[1]"  calculate="instance('input')/int[1] * 2"/>
                                        <!-- Result must be an integer -->
                                        <xf:bind ref="value[2]"  calculate="(instance('input')/int[1] * 2) instance of xs:integer"/>
                                        <!-- This must fail so blank the value -->
                                        <xf:bind ref="value[3]"  calculate="data(instance('input')/int[2])"/>
                                        <!-- false because the type is a node -->
                                        <xf:bind ref="value[4]"  calculate="instance('input')/int[1] instance of xs:integer"/>
                                        <!-- true because the type is an integer -->
                                        <xf:bind ref="value[5]"  calculate="data(instance('input')/int[1]) instance of xs:integer"/>/>
                                        <!-- string() accessor -->
                                        <xf:bind ref="value[6]"  calculate="string(instance('input')/int[1]) castable as xs:integer"/>/>
                                        <xf:bind ref="value[7]"  calculate="string(instance('input')/int[2]) castable as xs:integer"/>/>
                                    </xf:bind>
                                </xf:model>
                            </xh:head>
                            <xh:body>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>

            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="output" model-id="form-model">
                                <values>
                                    <value>70</value>
                                    <value>true</value>
                                    <value/>
                                    <value>false</value>
                                    <value>true</value>
                                    <value>true</value>
                                    <value>false</value>
                                </values>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#743: Validation Properties: XPath validation uses wrong namespaces" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model id="model">
                                    <xf:instance id="instance">
                                        <instance>
                                            <xpath>my:get-request-parameter('foo')</xpath>
                                            <xpath xmlns:my="http://orbeon.org/oxf/xml/xforms">my:get-request-parameter('foo')</xpath>
                                            <element xpath="my:get-request-parameter('foo')"/>
                                            <element xmlns:my="http://orbeon.org/oxf/xml/xforms" xpath="my:get-request-parameter('foo')"/>
                                        </instance>
                                    </xf:instance>

                                    <xf:bind ref="xpath | */@xpath" type="xxf:XPath2"/>
                                </xf:model>
                            </xh:head>
                            <xh:body>
                                <xf:output id="validities" value="string-join(for $xpath in (xpath | */@xpath) return string(valid($xpath)), '-')"/>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>

            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="validities">
                            <xxf:value>false-true-false-true</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#835: Failing constraint should default to false()" name="oxf:pipeline">
        <!-- See https://github.com/orbeon/orbeon-forms/issues/835 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="form-model" xxf:expose-xpath-types="true">
                        <xf:instance id="values">
                            <values>
                                <value>foo</value>
                                <constraint/>
                                <relevant/>
                                <required/>
                                <readonly/>
                            </values>
                        </xf:instance>
                        <xf:bind ref="value"      type="xs:decimal" name="value"/>
                        <xf:bind ref="constraint" constraint="$value = 42"/>
                        <xf:bind ref="relevant"   relevant="$value = 42"/>
                        <xf:bind ref="required"   required="$value = 42"/>
                        <xf:bind ref="readonly"   readonly="$value = 42"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output
                        id="my-output"
                        value="string-join(for $v in (valid(constraint),
                                                      xxf:relevant(relevant),
                                                      xxf:required(required),
                                                      xxf:readonly(readonly))
                                           return string($v), ' ')"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-output">
                            <xxf:value>false false true true</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#794: Multiple constraints" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <value/>
                        </xf:instance>
                        <xf:bind ref="." id="input-bind">
                            <xf:constraint id="length-constraint"    level="error"   value="string-length() gt 1"/>
                            <xf:constraint id="uppercase-constraint" level="warning" value="for $first in substring(., 1, 1) return upper-case($first) = $first"/>
                        </xf:bind>
                        <xf:action event="xforms-ready">
                            <xf:setvalue ref=".">a</xf:setvalue>
                            <xf:refresh/>
                            <xf:setvalue ref=".">ab</xf:setvalue>
                            <xf:refresh/>
                            <xf:setvalue ref=".">Ab</xf:setvalue>
                            <xf:refresh/>
                            <xf:setvalue ref="."/>
                            <xf:refresh/>
                        </xf:action>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:input id="my-input" ref=".">
                        <xf:alert id="alert-1">All levels</xf:alert>
                        <xf:alert id="alert-2" level="error">Error level</xf:alert>
                        <xf:alert id="alert-3" level="warning">Warning level</xf:alert>
                        <xf:alert id="alert-4" level="error warning">Error and warning level</xf:alert>
                        <xf:alert id="alert-5" validation="length-constraint">Length constraint</xf:alert>
                        <xf:alert id="alert-6" validation="uppercase-constraint">Uppercase constraint</xf:alert>
                        <xf:alert id="alert-7" validation="length-constraint uppercase-constraint">Both constraints</xf:alert>

                        <xf:message
                            event="xxforms-constraints-changed"
                            value="
                                string-join(
                                    (
                                        for $name in
                                            (
                                                'added-errors',
                                                'removed-errors',
                                                'added-warnings',
                                                'removed-warnings'
                                            )[exists(event(.))]
                                            return
                                                concat(
                                                    $name,
                                                    ': ',
                                                    string-join(event($name), ', ')
                                                ),
                                        for $a in xxf:alert('my-input')[xxf:non-blank()]
                                            return
                                                concat(
                                                    'alert: ',
                                                    $a
                                                )
                                    ),
                                    ' | '
                                )"/>
                    </xf:input>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
           <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <value/>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-input" alert="&lt;ul&gt;&lt;li&gt;Length constraint&lt;/li&gt;&lt;li&gt;Both constraints&lt;/li&gt;&lt;/ul&gt;" level="error"/>
                    </xxf:control-values>
                    <xxf:message level="modal">removed-errors: length-constraint | added-warnings: uppercase-constraint | alert: &lt;ul&gt;&lt;li&gt;Uppercase constraint&lt;/li&gt;&lt;li&gt;Both constraints&lt;/li&gt;&lt;/ul&gt;</xxf:message>
                    <xxf:message level="modal">removed-warnings: uppercase-constraint</xxf:message>
                    <xxf:message level="modal">added-errors: length-constraint | alert: &lt;ul&gt;&lt;li&gt;Length constraint&lt;/li&gt;&lt;li&gt;Both constraints&lt;/li&gt;&lt;/ul&gt;</xxf:message>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#152: Unexpected result with variable inside an xf:bind iteration (multiple resolution scenarios)" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model xmlns:saxon="http://saxon.sf.net/" id="model">
                        <xf:instance id="instance">
                            <items calculated="">
                                <item calculated="">
                                    <foo calculated=""/>
                                    <bar calculated=""/>
                                    <baz calculated=""/>
                                    <baz calculated=""/>
                                    <!-- No qux -->
                                </item>
                                <item calculated="">
                                    <foo calculated=""/>
                                    <bar calculated=""/>
                                    <baz calculated=""/>
                                    <baz calculated=""/>
                                    <!-- 1 qux -->
                                    <qux calculated=""/>
                                </item>
                                <item calculated="">
                                    <!-- 2 qux -->
                                    <qux calculated=""/>
                                    <qux calculated=""/>
                                </item>
                                <gaga calculated=""/>
                            </items>
                        </xf:instance>

                        <xf:bind id="items-bind" name="items" ref="instance()">
                            <xf:bind ref="@calculated" calculate="string-join(for $n in ($foo, $bar, $baz, $item, $items, $gaga, $qux) return concat(name($n), '=', saxon:path($n)), ' ')"/>
                            <xf:bind id="item-bind"  name="item"  ref="item">
                                <xf:bind ref="@calculated" calculate="string-join(for $n in ($foo, $bar, $baz, $item, $items, $gaga, $qux) return concat(name($n), '=', saxon:path($n)), ' ')"/>
                                <xf:bind id="foo-bind" name="foo" ref="foo">
                                    <xf:bind ref="@calculated" calculate="string-join(for $n in ($foo, $bar, $baz, $item, $items, $gaga, $qux) return concat(name($n), '=', saxon:path($n)), ' ')"/>
                                </xf:bind>
                                <xf:bind id="bar-bind" name="bar" ref="bar">
                                    <xf:bind ref="@calculated" calculate="string-join(for $n in ($foo, $bar, $baz, $item, $items, $gaga, $qux) return concat(name($n), '=', saxon:path($n)), ' ')"/>
                                </xf:bind>
                                <xf:bind id="baz-bind" name="baz" ref="baz">
                                    <xf:bind ref="@calculated" calculate="string-join(for $n in ($foo, $bar, $baz, $item, $items, $gaga, $qux) return concat(name($n), '=', saxon:path($n)), ' ')"/>
                                </xf:bind>
                                <xf:bind id="qux-bind" name="qux" ref="qux">
                                    <xf:bind ref="@calculated" calculate="string-join(for $n in ($foo, $bar, $baz, $item, $items, $gaga, $qux) return concat(name($n), '=', saxon:path($n)), ' ')"/>
                                </xf:bind>
                            </xf:bind>
                        </xf:bind>
                        <xf:bind id="gaga-bind" name="gaga" ref="gaga">
                            <xf:bind ref="@calculated" calculate="string-join(for $n in ($foo, $bar, $baz, $item, $items, $gaga, $qux) return concat(name($n), '=', saxon:path($n)), ' ')"/>
                        </xf:bind>
                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <items calculated="foo=/items/item[1]/foo[1] foo=/items/item[2]/foo[1] bar=/items/item[1]/bar[1] bar=/items/item[2]/bar[1] baz=/items/item[1]/baz[1] baz=/items/item[1]/baz[2] baz=/items/item[2]/baz[1] baz=/items/item[2]/baz[2] item=/items/item[1] item=/items/item[2] item=/items/item[3] items=/items gaga=/items/gaga[1] qux=/items/item[2]/qux[1] qux=/items/item[3]/qux[1] qux=/items/item[3]/qux[2]">
                                    <item calculated="foo=/items/item[1]/foo[1] bar=/items/item[1]/bar[1] baz=/items/item[1]/baz[1] baz=/items/item[1]/baz[2] item=/items/item[1] items=/items gaga=/items/gaga[1]">
                                        <foo calculated="foo=/items/item[1]/foo[1] bar=/items/item[1]/bar[1] baz=/items/item[1]/baz[1] baz=/items/item[1]/baz[2] item=/items/item[1] items=/items gaga=/items/gaga[1]"/>
                                        <bar calculated="foo=/items/item[1]/foo[1] bar=/items/item[1]/bar[1] baz=/items/item[1]/baz[1] baz=/items/item[1]/baz[2] item=/items/item[1] items=/items gaga=/items/gaga[1]"/>
                                        <baz calculated="foo=/items/item[1]/foo[1] bar=/items/item[1]/bar[1] baz=/items/item[1]/baz[1] item=/items/item[1] items=/items gaga=/items/gaga[1]"/>
                                        <baz calculated="foo=/items/item[1]/foo[1] bar=/items/item[1]/bar[1] baz=/items/item[1]/baz[2] item=/items/item[1] items=/items gaga=/items/gaga[1]"/>
                                        <!-- No qux -->
                                    </item>
                                    <item calculated="foo=/items/item[2]/foo[1] bar=/items/item[2]/bar[1] baz=/items/item[2]/baz[1] baz=/items/item[2]/baz[2] item=/items/item[2] items=/items gaga=/items/gaga[1] qux=/items/item[2]/qux[1]">
                                        <foo calculated="foo=/items/item[2]/foo[1] bar=/items/item[2]/bar[1] baz=/items/item[2]/baz[1] baz=/items/item[2]/baz[2] item=/items/item[2] items=/items gaga=/items/gaga[1] qux=/items/item[2]/qux[1]"/>
                                        <bar calculated="foo=/items/item[2]/foo[1] bar=/items/item[2]/bar[1] baz=/items/item[2]/baz[1] baz=/items/item[2]/baz[2] item=/items/item[2] items=/items gaga=/items/gaga[1] qux=/items/item[2]/qux[1]"/>
                                        <baz calculated="foo=/items/item[2]/foo[1] bar=/items/item[2]/bar[1] baz=/items/item[2]/baz[1] item=/items/item[2] items=/items gaga=/items/gaga[1] qux=/items/item[2]/qux[1]"/>
                                        <baz calculated="foo=/items/item[2]/foo[1] bar=/items/item[2]/bar[1] baz=/items/item[2]/baz[2] item=/items/item[2] items=/items gaga=/items/gaga[1] qux=/items/item[2]/qux[1]"/>
                                        <!-- 1 qux -->
                                        <qux calculated="foo=/items/item[2]/foo[1] bar=/items/item[2]/bar[1] baz=/items/item[2]/baz[1] baz=/items/item[2]/baz[2] item=/items/item[2] items=/items gaga=/items/gaga[1] qux=/items/item[2]/qux[1]"/>
                                    </item>
                                    <item calculated="item=/items/item[3] items=/items gaga=/items/gaga[1] qux=/items/item[3]/qux[1] qux=/items/item[3]/qux[2]">
                                        <!-- 2 qux -->
                                        <qux calculated="item=/items/item[3] items=/items gaga=/items/gaga[1] qux=/items/item[3]/qux[1]"/>
                                        <qux calculated="item=/items/item[3] items=/items gaga=/items/gaga[1] qux=/items/item[3]/qux[2]"/>
                                    </item>
                                    <gaga calculated="foo=/items/item[1]/foo[1] foo=/items/item[2]/foo[1] bar=/items/item[1]/bar[1] bar=/items/item[2]/bar[1] baz=/items/item[1]/baz[1] baz=/items/item[1]/baz[2] baz=/items/item[2]/baz[1] baz=/items/item[2]/baz[2] item=/items/item[1] item=/items/item[2] item=/items/item[3] items=/items gaga=/items/gaga[1] qux=/items/item[2]/qux[1] qux=/items/item[3]/qux[1] qux=/items/item[3]/qux[2]"/>
                                </items>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#152: Unexpected result with variable inside an xf:bind iteration (sums)" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="fr-form-model" xxf:expose-xpath-types="true">

                        <xf:instance id="fr-form-instance">
                            <form>
                                <my-section>
                                    <my-repeat>
                                        <col1>123</col1>
                                        <col2>456</col2>
                                        <rowsum/>
                                    </my-repeat>
                                    <my-repeat>
                                        <col1>1</col1>
                                        <col2>2</col2>
                                        <rowsum/>
                                    </my-repeat>
                                    <totalsum/>
                                </my-section>
                            </form>
                        </xf:instance>

                        <xf:bind id="fr-form-binds" ref="instance('fr-form-instance')">
                            <xf:bind id="my-section-bind" name="my-section" ref="my-section">
                                <xf:bind id="my-repeat-bind" ref="my-repeat" name="my-repeat">
                                    <xf:bind id="col1-bind" ref="col1" name="col1"/>
                                    <xf:bind id="col2-bind" ref="col2" name="col2"/>
                                    <xf:bind id="rowsum-bind" ref="rowsum" name="rowsum"
                                             calculate="sum(($col1, $col2)[. castable as xs:decimal], 0.0)"/>
                                </xf:bind>
                                <xf:bind id="totalsum-bind" name="totalsum" ref="totalsum"
                                         calculate="sum($rowsum[. castable as xs:decimal], 0.0)"/>
                            </xf:bind>
                        </xf:bind>
                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="fr-form-instance" model-id="fr-form-model">
                                <form>
                                    <my-section>
                                        <my-repeat>
                                            <col1>123</col1>
                                            <col2>456</col2>
                                            <rowsum>579</rowsum>
                                        </my-repeat>
                                        <my-repeat>
                                            <col1>1</col1>
                                            <col2>2</col2>
                                            <rowsum>3</rowsum>
                                        </my-repeat>
                                        <totalsum>582</totalsum>
                                    </my-section>
                                </form>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Bind resolution algorithm" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="fr-form-model" xxf:expose-xpath-types="true">

                        <xf:instance id="fr-form-instance">
                            <form>
                                <my-section>
                                    <my-repeat>
                                        <col1>123</col1>
                                        <col2>456</col2>
                                        <rowsum/>
                                    </my-repeat>
                                    <my-repeat>
                                        <col1>1</col1>
                                        <col2>2</col2>
                                        <rowsum/>
                                    </my-repeat>
                                    <totalsum/>
                                </my-section>
                            </form>
                        </xf:instance>

                        <xf:bind id="fr-form-binds" ref="instance('fr-form-instance')">
                            <xf:bind id="my-section-bind" name="my-section" ref="my-section">
                                <xf:bind id="my-repeat-bind" ref="my-repeat" name="my-repeat">
                                    <xf:bind id="col1-bind" ref="col1" name="col1"/>
                                    <xf:bind id="col2-bind" ref="col2" name="col2"/>
                                    <xf:bind id="rowsum-bind" ref="rowsum" name="rowsum"
                                             calculate="sum(($col1, $col2)[. castable as xs:decimal], 0.0)"/>
                                </xf:bind>
                                <xf:bind id="totalsum-bind" name="totalsum" ref="totalsum"
                                         calculate="sum($rowsum[. castable as xs:decimal], 0.0)"/>
                            </xf:bind>
                        </xf:bind>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <!-- Repeat matching bind hierarchy -->
                    <xf:repeat     id="my-repeat-control"  bind="my-repeat-bind">
                        <xf:input  id="col1-control"       bind="col1-bind"/>
                        <xf:input  id="col2-control"       bind="col2-bind"/>
                        <xf:output id="rowsum-control"     bind="rowsum-bind"/>
                    </xf:repeat>
                    <xf:output     id="totalsum-control"   bind="totalsum-bind"/>

                    <!-- Second repeat matching bind hierarchy -->
                    <xf:repeat     id="my-repeat2-control" bind="my-repeat-bind">
                        <xf:output id="rowsum2-control"    bind="rowsum-bind"/>
                    </xf:repeat>

                    <!-- Third repeat matching bind hierarchy, but using outer ref -->
                    <xf:repeat     id="my-repeat3-control" ref="my-section/my-repeat">
                        <xf:output id="rowsum3-control"    bind="rowsum-bind"/>
                    </xf:repeat>

                    <!-- Refer to ambiguous bind outside of repeat -->
                    <xf:output     id="rowsum4-control"    bind="rowsum-bind"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="fr-form-instance" model-id="fr-form-model">
                                <form>
                                    <my-section>
                                        <my-repeat>
                                            <col1>123</col1>
                                            <col2>456</col2>
                                            <rowsum>579</rowsum>
                                        </my-repeat>
                                        <my-repeat>
                                            <col1>1</col1>
                                            <col2>2</col2>
                                            <rowsum>3</rowsum>
                                        </my-repeat>
                                        <totalsum>582</totalsum>
                                    </my-section>
                                </form>
                            </instance>
                        </instances>
                        <controls>
                            <control effective-id="my-repeat-control" index="1"/>
                            <control effective-id="my-repeat2-control" index="1"/>
                            <control effective-id="my-repeat3-control" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="col1-control⊙1">
                            <xxf:value>123</xxf:value>
                        </xxf:control>
                        <xxf:control id="col2-control⊙1">
                            <xxf:value>456</xxf:value>
                        </xxf:control>
                        <xxf:control id="rowsum-control⊙1" readonly="true">
                            <xxf:value>579</xxf:value>
                        </xxf:control>
                        <xxf:control id="col1-control⊙2">
                            <xxf:value>1</xxf:value>
                        </xxf:control>
                        <xxf:control id="col2-control⊙2">
                            <xxf:value>2</xxf:value>
                        </xxf:control>
                        <xxf:control id="rowsum-control⊙2" readonly="true">
                            <xxf:value>3</xxf:value>
                        </xxf:control>
                        <xxf:control id="totalsum-control" readonly="true">
                            <xxf:value>582</xxf:value>
                        </xxf:control>
                        <xxf:control id="rowsum2-control⊙1" readonly="true">
                            <xxf:value>579</xxf:value>
                        </xxf:control>
                        <xxf:control id="rowsum2-control⊙2" readonly="true">
                            <xxf:value>3</xxf:value>
                        </xxf:control>
                        <xxf:control id="rowsum3-control⊙1" readonly="true">
                            <xxf:value>579</xxf:value>
                        </xxf:control>
                        <xxf:control id="rowsum3-control⊙2" readonly="true">
                            <xxf:value>3</xxf:value>
                        </xxf:control>
                        <xxf:control id="rowsum4-control" relevant="false"/>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#1472: Failed constraints from multiple binds incorrectly combined" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <value/>
                        </xf:instance>

                        <xf:bind ref="." id="required-bind1" constraint=". != ''"/>
                        <xf:bind ref="." id="required-bind2" constraint=". != ''"/>

                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:input id="my-input" ref=".">
                        <xf:alert id="alert-1" validation="required-bind1">Alert 1</xf:alert>
                        <xf:alert id="alert-2" validation="required-bind2">Alert 2</xf:alert>
                        <xf:alert id="alert-3" validation="required-bind1 required-bind2">Alert 3</xf:alert>
                    </xf:input>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-input" alert="&lt;ul&gt;&lt;li&gt;Alert 1&lt;/li&gt;&lt;li&gt;Alert 2&lt;/li&gt;&lt;li&gt;Alert 3&lt;/li&gt;&lt;/ul&gt;" level="error"/>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#1533: Required and type MIPs don't count as failed validations" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model" xxf:expose-xpath-types="true">
                        <xf:instance id="instance">
                            <data>
                                <my-number-1/>
                                <my-number-2>abc</my-number-2>
                                <my-number-3>-1</my-number-3>
                                <my-number-4>101</my-number-4>
                                <my-number-5>1.234</my-number-5>
                                <my-number-6>-1.234</my-number-6>
                                <my-number-7>12.34</my-number-7>
                            </data>
                        </xf:instance>

                        <xf:bind id="required-bind" ref="*" required="true()"/>
                        <xf:bind id="decimal-bind"  ref="*" type="xs:decimal"/>
                        <xf:bind ref="*">
                            <xf:constraint id="min"                value="if (string() castable as xs:decimal) then . ge 1.0   else true()"/>
                            <xf:constraint id="max"                value="if (string() castable as xs:decimal) then . le 100.0 else true()"/>
                            <xf:constraint id="two-decimal-places" value="if (string() castable as xs:decimal) then string-length(substring-after(string(), '.')) le 2 else true()"/>
                        </xf:bind>

                        <xf:bind ref="*">
                            <xf:constraint id="even" level="warning" value="if (string() castable as xs:decimal) then . gt 50.0 else true()"/>
                        </xf:bind>

                        <xf:send event="xforms-ready" submission="submission"/>

                        <xf:submission
                            id="submission"
                            method="post"
                            resource="echo:"
                            ref="instance()"
                            xxf:annotate="error warning info"
                            replace="all"
                            validate="false"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:repeat ref="*">
                        <xf:input ref=".">
                            <xf:alert validation="required-bind">A valid value is required.</xf:alert>
                            <xf:alert validation="decimal-bind">Must be a decimal number.</xf:alert>
                            <xf:alert validation="min">Must be greater or equal to 1.</xf:alert>
                            <xf:alert validation="max">Must be less than or equal to 100.</xf:alert>
                            <xf:alert validation="two-decimal-places">Must have two or fewer decimal places.</xf:alert>
                            <xf:alert validation="even">Should be greater than 50.</xf:alert>
                        </xf:input>
                    </xf:repeat>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
           <data>
                <my-number-1 xxf:error="A valid value is required."/>
                <my-number-2 xxf:error="Must be a decimal number.">abc</my-number-2>
                <my-number-3 xxf:error="Must be greater or equal to 1.">-1</my-number-3>
                <my-number-4 xxf:error="Must be less than or equal to 100.">101</my-number-4>
                <my-number-5 xxf:error="Must have two or fewer decimal places.">1.234</my-number-5>
                <my-number-6 xxf:error="&lt;ul&gt;&lt;li&gt;Must be greater or equal to 1.&lt;/li&gt;&lt;li&gt;Must have two or fewer decimal places.&lt;/li&gt;&lt;/ul&gt;">-1.234</my-number-6>
                <my-number-7 xxf:warning="Should be greater than 50.">12.34</my-number-7>
            </data>
        </output>
    </test>

    <test description="#1662: Error when referring to nested bind with a variable" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model xxf:custom-mips="fr:gaga fr:toto">
                        <xf:instance>
                            <outer>
                                <inner1>foo</inner1>
                                <inner2>
                                    <inner3>bar</inner3>
                                </inner2>
                            </outer>
                        </xf:instance>
                        <xf:bind         ref="instance()" name="outer"  id="outer-bind"   fr:gaga="$inner1" fr:toto="$inner3" >
                            <xf:bind     ref="inner1"     name="inner1" id="inner1-bind"  fr:gaga="$inner1" fr:toto="$inner3"/>
                            <xf:bind     ref="inner2"     name="inner2" id="inner12-bind" fr:gaga="$inner1" fr:toto="$inner3">
                                <xf:bind ref="inner3"     name="inner3" id="inner3-bind"  fr:gaga="$inner1" fr:toto="$inner3"/>
                            </xf:bind>
                        </xf:bind>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:input id="my-input-1" bind="inner1-bind"/>
                    <xf:input id="my-input-2" bind="inner3-bind"/>
                    <xf:output id="my-output-1"
                        value="string-join(
                                   for $bind in ('outer-bind', 'inner1-bind', 'inner2-bind', 'inner3-bind')
                                   return
                                       for $mip in ('fr:gaga', 'fr:toto')
                                       return xxf:custom-mip(bind($bind), $mip), ' ')"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
               <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-input-1" class="+fr-toto-bar +fr-gaga-foo">
                            <xxf:value>foo</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-input-2" class="+fr-toto-bar +fr-gaga-foo">
                            <xxf:value>bar</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-output-1">
                            <xxf:value>foo bar foo bar foo bar</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#3113: PDF: fr:fields-date not readonly when service is called upon xforms-enabled" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="my-model">

                        <xf:instance id="value-instance">
                            <value/>
                        </xf:instance>

                        <xf:bind ref="instance('value-instance')" readonly="true()"/>

                        <xf:instance id="result-instance">
                            <value/>
                        </xf:instance>

                        <xf:instance id="rows-instance">
                            <rows>
                                <row/>
                            </rows>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>

                    <xf:group id="my-group-1">
                        <!-- This used to cause a `rebuild` but not a `recalculate`... -->
                        <xf:insert
                            event="xforms-enabled"
                            context="instance('rows-instance')"
                            ref="*"/>
                        <!-- ...which caused this handler to get an incorrect value for `readonly`. -->
                        <xf:setvalue
                            event="xforms-enabled"
                            ref="instance('result-instance')"
                            value="xxf:readonly(instance('value-instance'))"
                        />
                    </xf:group>

                    <!-- The repeat is needed so that there is a `rebuild` -->
                    <xf:repeat id="my-repeat" ref="row"/>

                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="result-instance" model-id="my-model">
                                <value>true</value>
                            </instance>
                            <instance id="rows-instance" model-id="my-model">
                                <rows>
                                    <row/>
                                    <row/>
                                </rows>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#4600: Add XPath 2 value template type" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model id="model">
                                    <xf:instance id="instance">
                                        <instance>
                                            <expr/>
                                            <expr>The {string-join(('answer', 'is'), ' ')} {2 * 21}.</expr>
                                            <expr>This has a syntax {}} error.</expr>
                                            <expr>This {42} is good but then {concat('1')} bad.</expr>
                                        </instance>
                                    </xf:instance>
                                    <xf:bind ref="expr" type="xxf:XPath2ValueTemplate"/>
                                </xf:model>
                            </xh:head>
                            <xh:body>
                                <xf:output id="output-valid-1" value="xxf:valid(expr[1])"/>
                                <xf:output id="output-valid-2" value="xxf:valid(expr[2])"/>
                                <xf:output id="output-valid-3" value="xxf:valid(expr[3])"/>
                                <xf:output id="output-valid-4" value="xxf:valid(expr[4])"/>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>
            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output-valid-1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-valid-2">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-valid-3">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-valid-4">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>
</group>
