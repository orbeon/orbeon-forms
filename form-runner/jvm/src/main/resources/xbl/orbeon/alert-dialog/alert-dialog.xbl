<!--
  Copyright (C) 2009 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl xmlns:xh="http://www.w3.org/1999/xhtml"
         xmlns:xf="http://www.w3.org/2002/xforms"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
         xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
         xmlns:xbl="http://www.w3.org/ns/xbl"
         xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xmlns:oxf="http://www.orbeon.com/oxf/processors">

    <xbl:binding id="fr-alert-dialog" element="fr|alert-dialog" xxbl:mode="">
        <xbl:resources>
            <xbl:style src="/xbl/orbeon/alert-dialog/alert-dialog.css"/>
        </xbl:resources>
        <xbl:handlers>
            <xbl:handler event="fr-show xxforms-dialog-open" phase="target">
                <xf:setvalue if="event('message')"           ref="message"         value="event('message')"/>
                <xf:setvalue                                 ref="message-is-html" value="(xs:boolean(event('message-is-html')), false())[1]"/>
                <xf:setvalue if="event('context')"           ref="context"         value="event('context')"/>
                <xf:setvalue if="event('positive-targetid')" ref="positive"        value="event('positive-targetid')"/>
                <xf:setvalue if="event('negative-targetid')" ref="negative"        value="event('negative-targetid')"/>
                <xf:setvalue if="event('neutral-targetid')"  ref="neutral"         value="event('neutral-targetid')"/>

                <!-- Use an open count because event handlers for buttons can cause a show of this dialog again. See:
                     https://github.com/orbeon/orbeon-forms/issues/2524 -->
                <xf:setvalue ref="open-count" value=". + 1"/>
                <xxf:show dialog="dialog"/>
            </xbl:handler>
            <xbl:handler event="fr-hide" phase="target">
                <xf:setvalue ref="open-count" value=". - 1"/>
                <xf:action if="open-count = 0">
                    <xxf:hide dialog="dialog"/>
                    <xf:setvalue iterate="* except open-count" ref="."/>
                </xf:action>
            </xbl:handler>
        </xbl:handlers>
        <xbl:implementation>
            <xf:model>
                <xf:instance>
                    <_>
                        <message/>
                        <message-is-html/>
                        <context/>
                        <positive/>
                        <negative/>
                        <neutral/>
                        <open-count/>
                    </_>
                </xf:instance>
                <xf:bind ref="message-is-html" type="xs:boolean"/>
                <xf:bind ref="open-count"      type="xs:integer" xxf:default="0"/>
            </xf:model>
        </xbl:implementation>
        <xbl:template xxbl:transform="oxf:unsafe-xslt">
            <xsl:transform version="2.0">
                <xsl:template match="/*">

                    <xsl:variable
                        name="has-multiple-choices"
                        select="count(fr:positive-choice | fr:negative-choice | fr:neutral-choice) > 1"/>

                    <!-- Once AVTs are supported: close="{exists(fr:neutral-choice) and not ($has-multiple-choices)}"  -->
                    <xxf:dialog
                        id="dialog"
                        level="modal"
                        appearance="full"
                        close="{(@close, 'false')[1]}"
                        class="xbl-fr-alert-dialog xbl-fr-alert-dialog-{if ($has-multiple-choices) then 'question' else 'info'}">

                        <xf:var name="local" value="instance()"/>

                        <xf:label xxbl:scope="outer"><xsl:copy-of select="fr:label/(@* | node())"/></xf:label>
                        <xh:div class="xbl-fr-alert-dialog-message">
                            <xsl:choose>
                                <xsl:when test="fr:message">
                                    <!-- Use static message -->
                                    <xf:output xxbl:scope="outer">
                                        <xsl:copy-of select="fr:message/(@* | node())"/>
                                    </xf:output>
                                </xsl:when>
                                <xsl:otherwise>
                                    <!-- use dynamic message -->
                                    <xf:output ref="$local/message[$local/message-is-html = false()]"/>
                                    <xf:output ref="$local/message[$local/message-is-html = true()]" mediatype="text/html"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xh:div>
                        <xh:div class="xbl-fr-alert-dialog-buttons">
                            <xf:group appearance="xxf:internal" xxbl:scope="outer">
                                <!-- Any button click closes the dialog and clears the local data -->
                                <xf:action event="DOMActivate">
                                    <xf:dispatch name="fr-hide" targetid="fr-alert-dialog" xxbl:scope="inner"/>
                                </xf:action>
                                <xsl:variable name="buttons" as="element()*">
                                    <xsl:apply-templates/>
                                </xsl:variable>
                                <xsl:for-each select="$buttons">
                                    <xsl:variable name="is-primary" select="position() = last()"/>
                                    <xsl:copy>
                                        <xsl:if test="$is-primary">
                                            <xsl:attribute name="appearance">xxf:primary</xsl:attribute>
                                        </xsl:if>
                                        <xsl:copy-of select="@* | node()"/>
                                    </xsl:copy>
                                </xsl:for-each>
                            </xf:group>
                        </xh:div>
                    </xxf:dialog>
                </xsl:template>

                <xsl:template match="fr:positive-choice">
                    <xsl:copy-of
                        select="xf:trigger(@xxf:modal | *, 'xxf:r(''buttons.yes'', ''|fr-fr-resources|'')', 'positive')"/>
                </xsl:template>

                <xsl:template match="fr:negative-choice">
                    <xsl:copy-of
                        select="xf:trigger(@xxf:modal | *, 'xxf:r(''buttons.no'', ''|fr-fr-resources|'')', 'negative')"/>
                </xsl:template>

                <xsl:template match="fr:neutral-choice">
                    <xsl:copy-of
                        select="xf:trigger(@xxf:modal | *, 'xxf:r(''buttons.ok'', ''|fr-fr-resources|'')', 'neutral')"/>
                </xsl:template>

                <xsl:function name="xf:trigger" as="element(xf:trigger)">
                    <xsl:param name="content" as="node()*"/>
                    <xsl:param name="default" as="xs:string"/>
                    <xsl:param name="handler" as="xs:string"/>
                    <xsl:variable name="fr-label" as="element(fr:label)?" select="$content/self::fr:label"/>
                    <xf:trigger xxbl:scope="outer">
                        <xsl:copy-of select="$content except $fr-label"/>
                        <xsl:choose>
                            <xsl:when test="exists($fr-label)">
                                <!-- We used to use an <xf:output> wrapper here because we prepended icons above.
                                     This change broke the case where there was a non-default static label. Now we
                                     pass <xh:i> via $default instead. It's not ideal that we need to hardcode
                                     <xh:i> and it would be better if we could revert to using CSS for this.
                                     See: https://github.com/orbeon/orbeon-forms/issues/607 -->
                                <xf:label><xsl:copy-of select="$fr-label/(@* | node())"/></xf:label>
                            </xsl:when>
                            <xsl:otherwise>
                                <xf:label mediatype="text/html" value="{$default}"/>
                            </xsl:otherwise>
                        </xsl:choose>
                        <!-- If a custom target is provided, dispatch to it -->
                        <xf:action event="DOMActivate">
                            <xf:var name="local"><xxf:value value="$local" xxbl:scope="inner"/></xf:var>
                            <xf:var name="targetid" value="xxf:trim($local/{$handler})"/>

                            <xf:dispatch if="$targetid != ''" name="fr-{$handler}" targetid="{{$targetid}}">
                                <xf:property name="context" value="$local/context/string()"/>
                            </xf:dispatch>
                        </xf:action>
                    </xf:trigger>
                </xsl:function>

                <xsl:template match="@*|node()" priority="-100"/>
            </xsl:transform>
        </xbl:template>
    </xbl:binding>

</xbl:xbl>