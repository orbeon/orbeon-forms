<!--
  Copyright (C) 2011 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl xmlns:xh="http://www.w3.org/1999/xhtml"
         xmlns:xf="http://www.w3.org/2002/xforms"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
         xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
         xmlns:xbl="http://www.w3.org/ns/xbl"
         xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xmlns:oxf="http://www.orbeon.com/oxf/processors"
         xmlns:frf="java:org.orbeon.oxf.fr.FormRunner"

         xmlns:array="http://www.w3.org/2005/xpath-functions/array"
         xmlns:map="http://www.w3.org/2005/xpath-functions/map">

    <xbl:binding
        id="fr-repeater-binding"
        element="fr|repeater"
        xxbl:mode="javascript-lifecycle"
        xxf:external-events="fr-move-up fr-move-down fr-insert-above fr-insert-below fr-clear fr-remove">

        <xbl:resources>
            <xbl:style src="/xbl/orbeon/repeater/repeater.css"/>
        </xbl:resources>

        <xbl:handlers>
            <xbl:handler event="fr-move-up fr-move-down fr-insert-above fr-insert-below fr-clear fr-remove" phase="target">
                <xf:dispatch name="{event('xxf:type')}" targetid="repeat-group" xxf:repeat-indexes="{event('row')}"/>
            </xbl:handler>
        </xbl:handlers>

        <!-- Keep a single global copy of the repeat menu. It is moved around as needed. -->
        <xxbl:global>
            <div class="dropdown fr-repeater-dropdown-menu" xmlns="http://www.w3.org/1999/xhtml">
                <button class="btn btn-mini dropdown-toggle xforms-hidden" data-toggle="dropdown" tabindex="-1" aria-expanded="false">
                    <span class="caret"/>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li role="presentation"  class="fr-insert-above">
                        <a role="menuitem" tabindex="-1" href="#"><i class="fa fa-fw fa-chevron-up"/><xf:output value="xxf:r('components.grid.insert-above', 'fr-fr-resources')"/></a>
                    </li>
                    <li role="presentation" class="fr-insert-below">
                        <a role="menuitem" tabindex="-1" href="#"><i class="fa fa-fw fa-chevron-down"/><xf:output value="xxf:r('components.grid.insert-below', 'fr-fr-resources')"/></a>
                    </li>
                    <li role="presentation" class="divider"/>
                    <li role="presentation" class="fr-move-up">
                        <a role="menuitem" tabindex="-1" href="#"><i class="fa fa-fw fa-arrow-up"/><xf:output value="xxf:r('components.grid.move-up', 'fr-fr-resources')"/></a>
                    </li>
                    <li role="presentation" class="fr-move-down">
                        <a role="menuitem" tabindex="-1" href="#"><i class="fa fa-fw fa-arrow-down"/><xf:output value="xxf:r('components.grid.move-down', 'fr-fr-resources')"/></a>
                    </li>
                    <li role="presentation" class="divider"/>
                    <li role="presentation" class="fr-clear">
                        <a role="menuitem" tabindex="-1" href="#"><i class="fa fa-fw fa-remove"/><xf:output value="xxf:r('components.grid.clear.label', 'fr-fr-resources')"/></a>
                    </li>
                    <li role="presentation" class="divider"/>
                    <li role="presentation" class="fr-remove">
                        <a role="menuitem" tabindex="-1" href="#"><i class="fa fa-fw fa-minus-circle"/><xf:output value="xxf:r('components.grid.remove.label', 'fr-fr-resources')"/></a>
                    </li>
                </ul>
            </div>
        </xxbl:global>

        <xbl:template xxbl:transform="oxf:unsafe-xslt">
            <xsl:transform version="2.0">
                <xsl:import href="oxf:/oxf/xslt/utils/copy.xsl"/>

                <xsl:variable name="root" select="/*[1]"/>

                <xsl:variable name="apply-defaults"     select="$root/@apply-defaults = 'true'"/>
                <xsl:variable name="readonly"           select="$root/@readonly = 'true'"/>
                <xsl:variable name="remove-constraint"  select="($root/@remove-constraint[normalize-space()], 'true()')[1]"/>
                <xsl:variable name="repeat-id"          select="concat($root/@id, '-repeat')"/>
                <xsl:variable name="level"              select="$root/@level"/>

                <!-- Allow  -->
                <xsl:variable
                    name="repeat-expression"
                    as="xs:string"
                    select="
                        (
                            $root/@ref,
                            $root/@nodeset,
                            for $b in $root/@bind
                            return
                                concat(
                                    'bind(''',
                                    $b,
                                    ''')'
                                )
                        )[1]"/>

                <xsl:variable name="appearance"         select="($root/@appearance, 'full')[1]"/>
                <xsl:variable name="insert"             select="($root/@insert, if ($appearance = 'full') then 'index' else 'bottom')[1]"/>
                <xsl:variable name="remove-at-bottom"   select="false()"/>
                <xsl:variable name="use-paging"         select="$root/@view-appearance = 'wizard' and $root/@page-size = '1'"/>

                <xsl:template match="/*">
                    <xh:div xxf:control="true" class="{'fr-repeat-container', 'fr-repeater-paging'[$use-paging], @class}">

                        <xf:var name="repeat-context">
                            <xxf:value value="." xxbl:scope="outer"/>
                        </xf:var>
                        <xf:var name="repeat-sequence">
                            <xxf:value value="{$repeat-expression}" xxbl:scope="outer"/>
                        </xf:var>
                        <xf:var name="repeat-template">
                            <xxf:value value="{(@template, @origin)[1]}" xxbl:scope="outer"/>
                        </xf:var>
                        <xf:var name="repeat-index">
                            <!-- Replace quote by two quotes in the repeat id to avoid possible XPath injection -->
                            <xxf:value value="index('{replace($repeat-id, '''', '''''')}')" xxbl:scope="outer"/>
                        </xf:var>
                        <xf:var
                            name="view-mode"
                            value="xxf:readonly($repeat-context) or fr:is-readonly-mode()"/>

                        <!-- NOTE: `min="foo"` is taken as no minimum. Dubious but has been like this for a long time. -->
                        <xf:var name="min"    as="xs:integer"  value="(xs:integer(fr:component-param-value('min')   [. castable as xs:integer])[. ge 0], 0)[1]"/>
                        <xf:var name="freeze" as="xs:integer"  value="(xs:integer(fr:component-param-value('freeze')[. castable as xs:integer])[. ge 0], 0)[1]"/>

                        <xf:var
                            name="max"
                            as="xs:integer?"
                            value="
                                let $s := fr:component-param-value('max'),
                                    $i := xs:integer($s[. castable as xs:integer])
                                return
                                    if ($s = 'none') then
                                        ()
                                    else if (exists($s) and empty($i)) then
                                        0
                                    else
                                        $i
                        "/>

                        <xf:var name="can-add" value="empty($max) or count($repeat-sequence) lt $max"/>

                        <!-- Insert code duplicated, see https://github.com/orbeon/orbeon-forms/issues/4018 -->
                        <xf:action event="DOMActivate" observer="fr-repeater-add fr-repeater-add-bottom">
                            <xsl:choose>
                                <xsl:when test="$insert = 'index'">
                                    <xf:var
                                        name="p"
                                        value="if (empty($repeat-sequence)) then 0 else max(($repeat-index, $freeze))"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xf:var
                                        name="p"
                                        value="count($repeat-sequence)"/>
                                </xsl:otherwise>
                            </xsl:choose>

                            <!-- Make sure we have stable references -->
                            <xf:var name="context"  value="$repeat-context"/>
                            <xf:var name="items"    value="$repeat-sequence"/>

                            <xf:insert
                                context="$context"
                                ref="$items[$p]"
                                origin="frf:updateTemplateFromInScopeItemsetMaps($context, $repeat-template)"
                                position="after"
                                xxf:defaults="{$apply-defaults}"/>

                            <!-- HACK: Specify id so that action id remains stable in Form Builder -->
                            <xf:setfocus
                                control="repeat-group"
                                xxf:repeat-indexes="{{$p + 1}}"
                                includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>

                            <!-- Let the outside world know -->
                            <xf:dispatch targetid="fr-repeater-binding" name="fr-iteration-added">
                                <xf:property name="index" value="$p + 1"/>
                            </xf:dispatch>

                        </xf:action>

                        <xf:action event="DOMActivate" observer="fr-repeater-remove-bottom">
                            <xf:var name="p" value="count($repeat-sequence)"/>
                            <xf:dispatch name="fr-remove" targetid="fr-repeater-binding">
                                <xf:property name="row" value="$p"/>
                            </xf:dispatch>
                        </xf:action>

                        <xsl:variable name="add-iteration-label-content" as="element()">
                            <xsl:choose>
                                <xsl:when test="exists(fr:add-iteration-label)">
                                    <xsl:for-each select="fr:add-iteration-label[1]">
                                        <xf:label value="{@ref}" xxbl:scope="outer">
                                            <xsl:copy-of select="@mediatype"/>
                                        </xf:label>
                                    </xsl:for-each>
                                </xsl:when>
                                <xsl:when test="$appearance = 'minimal' and not($readonly)">
                                    <xf:label value="xxf:r('components.section.add-another.label', '|fr-fr-resources|')"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xf:label><xh:i class="fa fa-fw fa-plus-circle"/><xf:output value="xxf:r('components.section.add-another.label', '|fr-fr-resources|')"/></xf:label>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>

                        <!-- Placeholder to add first iteration when empty (could have `and count($repeat-sequence) = 0`,
                             but seems fine to keep this permanently). See #1509. -->
                        <xsl:if test="$appearance = 'full' and not($readonly)">
                            <xf:group ref=".[not($view-mode)]" class="fr-repeater-top-buttons">
                                <xf:trigger
                                    appearance="xxf:small"
                                    ref="if ($can-add) then $repeat-context else ''"
                                    id="fr-repeater-add"
                                    xxf:title="{{xxf:r('components.section.add-another.hint',  '|fr-fr-resources|')}}">
                                    <xsl:copy-of select="$add-iteration-label-content"/>
                                </xf:trigger>
                            </xf:group>
                        </xsl:if>

                        <xf:repeat ref="{$repeat-expression}" id="{$repeat-id}" xxbl:scope="outer">
                            <xf:group appearance="xxf:internal" xxbl:scope="inner" id="repeat-group">

                                <!-- Run row operations, checking that they are allowed first -->
                                <xf:action
                                    event="fr-move-up fr-move-down fr-insert-above fr-insert-below fr-clear fr-remove"
                                    target="#observer"
                                    if="concat('can-', substring-after(event('xxf:type'), 'fr-')) = xxf:split(xxf:avt-value('fr-repeater-repeat-iteration', 'class'))">

                                    <!-- Make sure we have stable references -->
                                    <xf:var name="context"  value="$repeat-context"/>
                                    <xf:var name="items"    value="xxf:repeat-items()"/>
                                    <xf:var name="p"        value="xxf:repeat-position()"/>
                                    <xf:var name="source"   value="$items[$p]"/>
                                    <xf:var name="instance" value="$source/root()"/>

                                    <!-- We have a reference to the source for operations that still require it. -->
                                    <xf:delete
                                        if="event('xxf:type') = ('fr-move-up', 'fr-move-down', 'fr-clear', 'fr-remove')"
                                        ref="$source"/>

                                    <xf:action if="event('xxf:type') = 'fr-clear'">

                                        <xf:insert
                                            context="$context"
                                            ref="$items[$p - 1]"
                                            origin="frf:updateTemplateFromInScopeItemsetMaps($context, $repeat-template)"
                                            position="after"
                                            xxf:defaults="{$apply-defaults}"/>

                                        <!-- HACK: Specify id so that action id remains stable in Form Builder -->
                                        <xf:setfocus
                                            control="repeat-group"
                                            xxf:repeat-indexes="{{$p}}"
                                            id="sf5"
                                            includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                            excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>

                                    </xf:action>

                                    <xf:action if="event('xxf:type') = 'fr-remove'">
                                        <!-- Handle itemset metadata -->
                                        <xf:action type="xpath">
                                            frf:garbageCollectMetadataItemsets($instance)
                                        </xf:action>

                                        <!-- Let the outside world know -->
                                        <xf:dispatch
                                            targetid="fr-repeater-binding"
                                            name="fr-iteration-removed">
                                            <xf:property name="index" value="$p"/>
                                        </xf:dispatch>
                                    </xf:action>

                                    <!-- NOTES:

                                         1. In actions below, we try to restore focus explicitly
                                            as we don't have an xf:move action. See:

                                            https://github.com/orbeon/orbeon-forms/issues/1426

                                         2. When the repeat sequence updates immediately, focus
                                            handling tends to work, but when the repeat sequence
                                            updates upon refresh, information about the order of
                                            operations is lost and the focus is not set to the last
                                            inserted row.

                                         3. The client dispatches xxforms-repeat-activate after the
                                            operation has run. That event happens to be ignored as
                                            we delete the current iteration first.
                                     -->

                                    <xf:action if="event('xxf:type') = 'fr-move-up'">

                                        <xf:insert
                                            context="$context"
                                            ref="$items[$p - 1]"
                                            origin="$source"
                                            position="before"/>

                                        <!-- HACK: Specify id so that action id remains stable in Form Builder -->
                                        <xf:setfocus
                                            control="repeat-group"
                                            xxf:repeat-indexes="{{$p - 1}}"
                                            id="sf1"
                                            includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                            excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>

                                    </xf:action>

                                    <xf:action if="event('xxf:type') = 'fr-move-down'">

                                        <xf:insert
                                            context="$context"
                                            ref="$items[$p + 1]"
                                            origin="$source"
                                            position="after"/>

                                        <!-- HACK: Specify id so that action id remains stable in Form Builder -->
                                        <xf:setfocus
                                            control="repeat-group"
                                            xxf:repeat-indexes="{{$p + 1}}"
                                            id="sf2"
                                            includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                            excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>

                                    </xf:action>

                                    <xf:action if="event('xxf:type') = 'fr-insert-above'">

                                        <xf:insert
                                            context="$context"
                                            ref="$items[$p]"
                                            origin="frf:updateTemplateFromInScopeItemsetMaps($context, $repeat-template)"
                                            position="before"
                                            xxf:defaults="{$apply-defaults}"/>

                                        <!-- HACK: Specify id so that action id remains stable in Form Builder -->
                                        <xf:setfocus
                                            control="repeat-group"
                                            xxf:repeat-indexes="{{$p}}"
                                            id="sf3"
                                            includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                            excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>

                                        <!-- Let the outside world know -->
                                        <xf:dispatch targetid="fr-repeater-binding" name="fr-iteration-added">
                                            <xf:property name="index" value="$p"/>
                                        </xf:dispatch>

                                    </xf:action>

                                    <xf:action if="event('xxf:type') = 'fr-insert-below'">

                                        <xf:insert
                                            context="$context"
                                            ref="$items[$p]"
                                            origin="frf:updateTemplateFromInScopeItemsetMaps($context, $repeat-template)"
                                            position="after"
                                            xxf:defaults="{$apply-defaults}"/>

                                        <!-- HACK: Specify id so that action id remains stable in Form Builder -->
                                        <xf:setfocus
                                            control="repeat-group"
                                            xxf:repeat-indexes="{{$p + 1}}"
                                            id="sf4"
                                            includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                            excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>

                                        <!-- Let the outside world know -->
                                        <xf:dispatch targetid="fr-repeater-binding" name="fr-iteration-added">
                                            <xf:property name="index" value="$p + 1"/>
                                        </xf:dispatch>

                                    </xf:action>
                                </xf:action>

                                <xsl:choose>
                                    <xsl:when test="not($readonly)">

                                        <xf:var name="repeat-position" value="xxf:repeat-position()"/>
                                        <xf:var name="frozen"          value="$repeat-position le $freeze"/>

                                        <xf:var name="remove-constraint">
                                            <!-- Evaluate the constraint in the context of the iteration -->
                                            <xxf:value value="{$remove-constraint}" xxbl:scope="outer"/>
                                        </xf:var>

                                        <xf:var
                                            name="can-classes"
                                            value="
                                                'can-move-up'     [$repeat-position gt $freeze + 1],
                                                'can-move-down'   [not($frozen) and $repeat-position lt count($repeat-sequence)],
                                                'can-insert-above'[$can-add and not($frozen)],
                                                'can-insert-below'[$can-add and $repeat-position ge $freeze],
                                                'can-remove'      [$remove-constraint and not($frozen) and count($repeat-sequence) gt $min],
                                                'can-clear'"
                                        />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xf:var name="can-classes"/>
                                    </xsl:otherwise>
                                </xsl:choose>

                                <xsl:variable name="iteration-label-content" as="element()?">
                                    <xsl:for-each select="fr:iteration-label[1]">

                                        <xsl:variable
                                            name="iteration-label-id"
                                            select="concat($root/@id, '-iteration-label')"/>

                                        <xsl:element name="xh:h{$level + 1}">
                                            <xsl:attribute name="class">fr-section-iteration-title</xsl:attribute>
                                            <xf:output
                                                id="{$iteration-label-id}"
                                                value="{@ref}"
                                                xxbl:scope="outer">
                                                <xsl:copy-of select="@mediatype"/>
                                            </xf:output>
                                        </xsl:element>
                                    </xsl:for-each>
                                </xsl:variable>

                                <!-- Scope `xf:var` in outer scope so content can handle remove availability -->
                                <xf:var name="fr-repeater-can-remove" xxbl:scope="outer">
                                    <xxf:value
                                        xxbl:scope="inner"
                                        value="'can-remove' = $can-classes"/>
                                </xf:var>

                                <xsl:choose>
                                    <xsl:when test="$use-paging">
                                        <xf:switch caseref="xxf:repeat-position() = index('{$repeat-id}')" xxf:update="full" xxbl:scope="outer">
                                            <xf:case value="true()" xxbl:scope="inner">
                                                <xsl:copy-of select="$iteration-label-content"/>
                                                <xh:div id="fr-repeater-repeat-iteration">
                                                    <xsl:attribute name="class" select="@class, 'fr-repeater-repeat-iteration', '{$can-classes}'"/>
                                                    <xf:group xxbl:scope="outer" appearance="xxf:internal">
                                                        <xsl:apply-templates select="* except fr:iteration-label"/>
                                                    </xf:group>
                                                </xh:div>
                                            </xf:case>
                                            <xf:case value="false()"/>
                                        </xf:switch>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:copy-of select="$iteration-label-content"/>
                                        <xh:div id="fr-repeater-repeat-iteration">
                                            <xsl:attribute name="class" select="@class, 'fr-repeater-repeat-iteration', '{$can-classes}'"/>
                                            <xf:group xxbl:scope="outer" appearance="xxf:internal">
                                                <xsl:apply-templates select="* except fr:iteration-label"/>
                                            </xf:group>
                                        </xh:div>
                                    </xsl:otherwise>
                                </xsl:choose>

                            </xf:group>
                        </xf:repeat>

                        <xsl:if test="$appearance = 'minimal' and not($readonly)">
                            <xf:group ref=".[not($view-mode)]" class="fr-repeater-bottom-buttons">

                                <xf:trigger
                                    appearance="minimal"
                                    id="fr-repeater-add-bottom"
                                    ref="$repeat-context[$can-add]"
                                    xxf:title="{{xxf:r('components.section.add-another.hint',  '|fr-fr-resources|')}}">
                                    <xsl:copy-of select="$add-iteration-label-content"/>
                                </xf:trigger>

                                <xsl:if test="$remove-at-bottom">
                                    <!-- NOTE: Don't apply remove constraint: in this mode it's always possible to remove the last row. -->
                                    <!-- TODO: not($frozen) and -->
                                    <xf:var
                                        name="can-remove"
                                        value="count($repeat-sequence) gt $min"
                                    />

                                    <!-- Show only if can remove -->
                                    <xf:trigger
                                        appearance="minimal"
                                        id="fr-repeater-remove-bottom"
                                        ref="$repeat-context[$can-remove]"
                                        xxf:title="{{xxf:r('components.section.remove.hint',  '|fr-fr-resources|')}}">
                                        <xf:label value="xxf:r('components.section.remove.label', '|fr-fr-resources|')"/>
                                    </xf:trigger>
                                </xsl:if>
                            </xf:group>
                        </xsl:if>
                    </xh:div>
                </xsl:template>

            </xsl:transform>
        </xbl:template>
    </xbl:binding>
</xbl:xbl>