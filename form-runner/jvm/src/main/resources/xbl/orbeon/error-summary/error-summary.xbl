<!--
  Copyright (C) 2010 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl xmlns:xh="http://www.w3.org/1999/xhtml"
         xmlns:xf="http://www.w3.org/2002/xforms"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:ev="http://www.w3.org/2001/xml-events"
         xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
         xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
         xmlns:xbl="http://www.w3.org/ns/xbl"
         xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
         xmlns:ErrorSummary="java:org.orbeon.xbl.ErrorSummary">

    <!--
        Component to represent a reusable error summary.

        NOTE: There is some complexity because what we are trying to do is keep a structure that mimics part of the UI.
        Having support for <xf:function> would help with reuse and clarity!
     -->
    <xbl:binding id="fr-error-summary-binding" element="fr|error-summary">
        <xbl:resources>
            <xbl:style src="/xbl/orbeon/error-summary/error-summary.css"/>
        </xbl:resources>
        <xbl:handlers>
            <xbl:handler event="fr-visit-all fr-show-relevant-errors" phase="target">
                <!-- Mark all controls as visited -->
                <xf:var name="observers" xxbl:scope="outer"><xxf:value value="xxf:split($state/observers)" xxbl:scope="inner"/></xf:var>
                <xxf:setvisited iterate="$observers" control="{xxf:absolute-id(.)}" visited="true" recurse="true" xxbl:scope="outer"/>
            </xbl:handler>
            <xbl:handler event="fr-unvisit-all" phase="target">
                <!-- Mark all controls as not visited -->
                <xf:var name="observers" xxbl:scope="outer"><xxf:value value="xxf:split($state/observers)" xxbl:scope="inner"/></xf:var>
                <xxf:setvisited iterate="$observers" control="{xxf:absolute-id(.)}" visited="false" recurse="true" xxbl:scope="outer"/>
            </xbl:handler>
            <xbl:handler event="fr-update" phase="target">
                <!-- Update errors in non-incremental mode -->
                <xf:delete ref="instance('fr-snapshot-instance')/*"/>
                <xf:insert context="instance('fr-snapshot-instance')" origin="instance('fr-errors-instance')/*"/>
            </xbl:handler>
            <xbl:handler event="fr-clear" phase="target">
                <!-- Clear all errors in non-incremental mode -->
                <xf:delete ref="instance('fr-snapshot-instance')/*"/>
            </xbl:handler>
            <xbl:handler event="fr-update-lang" phase="target">
                <!-- Update labels/alerts upon language change -->
                <xf:action iterate="error">
                    <xf:setvalue ref="@alert" value="xxf:alert(../@id)"/>
                    <xf:setvalue ref="@label" value="xxf:label(../@id)"/>
                </xf:action>
            </xbl:handler>
            <xbl:handler event="fr-hide" phase="target">
                <!-- Hide the error summary entirely -->
                <xf:setvalue ref="$state/show" value="false()"/>
            </xbl:handler>
            <xbl:handler event="fr-show" phase="target">
                <!-- Show the error summary, possibly for specific sections -->
                <xf:setvalue ref="$state/section-name" value="event('section-name')"/>
                <xf:setvalue ref="$state/show"         value="true()"/>
            </xbl:handler>
            <xbl:handler event="fr-focus-first-error" phase="target">
                <!-- Focus on the first focusable error -->
                <xf:action iterate="$visible-errors-for-section[xxf:focusable(@id, true())][1]">
                    <xf:dispatch name="fr-internal-focus-error" target="fr-error-summary-binding">
                        <xf:property name="error"    value="."/>
                        <xf:property name="position" value="count(preceding-sibling::error) + 1"/>
                    </xf:dispatch>
                </xf:action>
            </xbl:handler>
            <xbl:handler event="fr-internal-focus-error" phase="target">
                <xf:action iterate="event('error')">
                    <xf:action type="javascript" xmlns:frf="java:org.orbeon.oxf.fr.FormRunner">
                        <xf:param name="elementId"          value="xxf:client-id(@id)"/>
                        <xf:param name="validationPosition" value="string(event('position'))"/>
                        <xf:param name="controlName"        value="frf:controlNameFromId(xxf:client-id(@id))"/>
                        <xf:param name="controlLabel"       value="string(@label)"/>
                        <xf:param name="validationMessage"  value="string(@alert)"/>
                        <xf:param name="validationLevel"    value="string(@level)"/>
                        <xf:param name="sectionNames"       value="string-join(ErrorSummary:ancestorSectionNames(@id), ' ')"/>
                        <xf:body>
                            ORBEON.fr.private.API.navigateToError(
                                validationPosition,
                                elementId,
                                controlName,
                                controlLabel,
                                validationMessage,
                                validationLevel,
                                sectionNames
                            );
                        </xf:body>
                    </xf:action>
                    <xf:setfocus control="{@id}"/>
                </xf:action>
            </xbl:handler>
        </xbl:handlers>
        <xbl:implementation>
            <xf:model id="fr-error-summary-model">

                <!-- Reset everything upon initialization -->
                <xf:action ev:event="xforms-model-construct-done">
                    <xf:delete ref="instance('fr-errors-instance')/*"/>
                </xf:action>

                <!-- Instance containing the current errors, indexed by absolute id -->
                <xf:instance id="fr-errors-instance" xxf:exclude-result-prefixes="#all" xxf:index="id">
                    <_ xmlns=""/>
                </xf:instance>

                <!-- Instance containing the visible errors (for non-incremental mode) -->
                <xf:instance id="fr-snapshot-instance" xxf:exclude-result-prefixes="#all">
                    <_ xmlns=""/>
                </xf:instance>

                <!-- State instance -->
                <xf:instance id="fr-state-instance" xxf:exclude-result-prefixes="#all" xxf:expose-xpath-types="true">
                    <_ xmlns="">
                        <!-- Whether to be visible or not -->
                        <show>true</show>
                        <!-- Filter on section for which to show errors -->
                        <section-name/>
                        <!-- Whether errors are shown incrementally or not -->
                        <incremental>true</incremental>
                        <!-- Absolute ids of observers -->
                        <observers/>
                        <!-- Whether the form is valid or invalid -->
                        <valid>true</valid>
                        <!-- Number of alerts, total vs. per level -->
                        <counts         alert="" error="" warning="" info=""/>
                        <visible-counts alert="" error="" warning="" info=""/>
                        <!-- Number of items (errors/warnings/infos) to show -->
                        <default-page-size>20</default-page-size>
                        <current-page-size>20</current-page-size>
                    </_>
                </xf:instance>

                <xf:bind ref="instance('fr-state-instance')">
                    <xf:bind ref="show | incremental | valid"            type="xs:boolean"/>
                    <xf:bind ref="default-page-size | current-page-size" type="xs:integer"
                             xxf:default="
                                (
                                    fr:component-param-value('page-size'),
                                    .
                                )[. castable as xs:integer][1]"/>
                </xf:bind>

                <xf:var name="state"        value="instance('fr-state-instance')"/>
                <xf:var name="section-name" value="$state/section-name[xxf:non-blank()]"/>

                <!-- Errors for controls that have been visited AND which have a non-blank alert message -->
                <xf:var
                    name="visible-errors"
                    as="element(error)*"
                    value="
                        for $e in
                            instance(
                                if (data($state/incremental)) then
                                    'fr-errors-instance'
                                else
                                    'fr-snapshot-instance'
                            )/error
                        return
                            if (xxf:visited($e/@id)) then
                                $e
                            else
                                ()"/>

                <xf:var
                    name="visible-errors-for-section"
                    as="element(error)*"
                    value="$visible-errors[empty($section-name) or $section-name = @section-name]"/>

                <xf:bind ref="$state">
                    <xf:bind ref="counts/@alert"                     calculate="count(instance('fr-errors-instance')/error)"/>
                    <xf:bind ref="counts/(@* except @alert)"         calculate="for $n in name() return count(instance('fr-errors-instance')/error[@level = $n])"/>
                    <xf:bind ref="visible-counts/@alert"             calculate="count($visible-errors)"/>
                    <xf:bind ref="visible-counts/(@* except @alert)" calculate="for $n in name() return count($visible-errors[@level = $n])"/>
                </xf:bind>

                <xf:var
                    name="visit-value-changed"
                    value="
                        (
                            xs:boolean(xxf:component-param-value('visit-value-changed')[. = ('true', 'false')]),
                            false() (: default :)
                        )[1]"/>

            </xf:model>
        </xbl:implementation>
        <xbl:template xxbl:transform="oxf:unsafe-xslt" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:oxf="http://www.orbeon.com/oxf/processors">
            <xsl:transform version="2.0">
                <xsl:import href="oxf:/oxf/xslt/utils/copy.xsl"/>

                <xsl:template match="/*">
                    <!-- Outer group around outer event handlers -->
                    <xf:group appearance="xxf:internal" xxbl:scope="outer">

                        <xf:action ev:event="xforms-enabled">
                            <!-- When the group becomes relevant, remember incremental flag -->
                            <!-- NOTE:
                                - upon initial refresh, xforms-enabled is dispatched here
                                - iteration over $visible-errors in view has already taken place, but over empty list of errors
                                - then correct incremental flag is set
                                - initial errors might have been inserted already or not, depending on where error summary is on page
                                - but in any case, this means a second refresh has to take place
                            -->

                            <xf:var
                                xxbl:scope="inner"
                                name="incremental-or-blank"
                                xbl:attr="xbl:text=incremental"/>

                            <xf:setvalue
                                xxbl:scope="inner"
                                ref="$state/incremental"
                                value="not($incremental-or-blank = 'false')"/>

                            <!-- When the group becomes relevant, remember the observers (used by fr-(un)visit-all) -->
                            <xf:setvalue
                                xxbl:scope="inner"
                                ref="$state/observers"
                                xbl:attr="xbl:text=observer"/>
                        </xf:action>

                        <!-- Make sure the model is recalculated when there is a chance visited controls might have
                             changed. We do this because there is no dependency handling wit the xxf:visited()
                             function. -->
                        <xf:action xbl:attr="ev:observer=observer" ev:event="xxforms-visited xxforms-unvisited" xxf:phantom="true" ev:phase="capture">
                            <xf:recalculate xxbl:scope="inner" xxf:deferred="true"/>
                        </xf:action>

                        <xf:var name="fr-visit-value-changed">
                            <xxf:value value="$visit-value-changed" xxbl:scope="inner"/>
                        </xf:var>

                        <!-- Control changes validity -->
                        <xf:action
                            xbl:attr="ev:observer=observer"
                            ev:event="xforms-enabled xxforms-constraints-changed xforms-disabled xforms-invalid xforms-valid xforms-value-changed"
                            xxf:phantom="true"
                            ev:phase="capture"
                            type="xpath">

                            ErrorSummary:removeUpdateOrInsertError(
                                xxf:instance('fr-errors-instance')/root(),
                                xxf:instance('fr-state-instance')/root(),
                                ($fr-visit-value-changed, false())[1]
                            )
                        </xf:action>

                        <!-- Node-set changed -->
                        <xf:action
                            xbl:attr="ev:observer=observer"
                            ev:event="xxforms-nodeset-changed"
                            xxf:phantom="true"
                            ev:phase="capture"
                            if="count(event('xxf:to-positions')) > 0"
                            type="xpath">

                            ErrorSummary:updateForMovedIteration(
                                xxf:instance('fr-errors-instance')/root(),
                                event('xxf:absolute-targetid'),
                                event('xxf:from-positions'),
                                event('xxf:to-positions')
                            )
                        </xf:action>

                        <!-- For all levels, plus combined 'alerts' level -->
                        <xsl:for-each select="'alert', 'error', 'warning', 'info'">
                            <xsl:variable name="level" select="."/>

                            <!-- Write out the alerts counts -->
                            <xf:group ref="()" xbl:attr="model context ref={$level}s-count-ref" appearance="xxf:internal">
                                <xf:group ref="$state/counts/@{$level}" xxbl:scope="inner" appearance="xxf:internal">
                                    <xf:var name="ref" as="item()?">
                                        <xxf:value value="." xxbl:scope="outer"/>
                                    </xf:var>
                                    <xf:var name="v" as="xs:integer" value="xs:integer(.)">
                                        <xf:setvalue ev:event="xforms-enabled xforms-value-changed" ref="$ref" value="context()"/>
                                    </xf:var>
                                </xf:group>
                            </xf:group>

                            <!-- Write out the visible alerts counts -->
                            <xf:group ref="()" xbl:attr="model context ref=visible-{$level}s-count-ref" appearance="xxf:internal">
                                <xf:group ref="$state/visible-counts/@{$level}" xxbl:scope="inner" appearance="xxf:internal">
                                    <xf:var name="ref" as="item()?">
                                        <xxf:value value="." xxbl:scope="outer"/>
                                    </xf:var>
                                    <xf:var name="v" as="xs:integer" value="xs:integer(.)">
                                        <xf:setvalue ev:event="xforms-enabled xforms-value-changed" ref="$ref" value="context()"/>
                                    </xf:var>
                                </xf:group>
                            </xf:group>
                        </xsl:for-each>

                        <!-- Write out the validity -->
                        <xf:group ref="()" xbl:attr="model context ref=valid-ref" appearance="xxf:internal">
                            <xf:group ref="$state/valid" xxbl:scope="inner" appearance="xxf:internal">
                                <xf:var name="ref" as="item()?">
                                    <xxf:value value="." xxbl:scope="outer"/>
                                </xf:var>
                                <xf:var name="valid" as="xs:boolean" value="xs:boolean(.)">
                                    <xf:setvalue ev:event="xforms-enabled xforms-value-changed" ref="$ref" value="$valid"/>
                                </xf:var>
                            </xf:group>
                        </xf:group>

                        <!-- Count global errors -->
                        <xsl:variable name="fr-errors" select="/*/fr:errors" as="element(fr:errors)*"/>
                        <xsl:if test="exists($fr-errors)">
                            <xf:var name="global-errors" xxbl:scope="inner">
                                <xxf:value value="({string-join($fr-errors/@ref, ',')})" xxbl:scope="outer">
                                    <xsl:copy-of select="$fr-errors/ancestor-or-self::*/namespace::*"/>
                                </xxf:value>
                            </xf:var>
                        </xsl:if>

                        <xh:span aria-live="polite">
                            <!-- Only show this group if `show` is true and there are any visible errors -->
                            <xf:group
                                xxbl:scope="inner"
                                id="ig"
                                ref=".[
                                    data($state/show) and (
                                        exists($visible-errors-for-section){
                                            ' or exists($global-errors)'[exists($fr-errors)]
                                        }
                                    )
                                ]">

                                <!-- Include optional header -->
                                <xbl:content includes=":root > fr|header > *"/>

                                <!-- Body of the error summary -->
                                <xf:group class="fr-error-summary-body {{for $d in distinct-values(error/@level[. = ('error', 'warning', 'info')]/string()) return concat('fr-level-', $d)}}" id="body">
                                    <!-- Include optional fr:label into xf:label -->
                                    <xsl:for-each select="/*/fr:label[1]">
                                        <xf:label xxbl:scope="outer" class="fr-error-title">
                                            <xsl:copy-of select="@*|node()"/>
                                        </xf:label>
                                    </xsl:for-each>

                                    <!-- Global errors -->
                                    <xsl:for-each select="$fr-errors">
                                        <xf:group ref=".[exists({@ref, @nodeset})]" xxbl:scope="outer">
                                            <xh:ol class="fr-error-group">
                                                <xf:repeat ref="{@ref, @nodeset}">
                                                    <xsl:copy-of select="ancestor-or-self::*/namespace::*"/>
                                                    <xh:li>
                                                        <!-- Clickable / linkable label -->
                                                        <xsl:if test="exists(fr:label)">
                                                            <xf:output class="fr-error-label">
                                                                <xsl:copy-of select="fr:label/(@*|node())"/>
                                                            </xf:output>
                                                        </xsl:if>
                                                        <!-- Alert message -->
                                                        <xsl:if test="exists(fr:alert)">
                                                            <xf:output class="fr-error-alert fr-error-alert-error">
                                                                <xsl:copy-of select="fr:alert/(@*|node())"/>
                                                            </xf:output>
                                                        </xsl:if>
                                                    </xh:li>
                                                </xf:repeat>
                                            </xh:ol>
                                        </xf:group>
                                    </xsl:for-each>

                                    <!-- Controls errors -->
                                    <xf:group ref=".[exists($visible-errors-for-section)]">
                                        <xh:ol class="fr-error-group">
                                            <xf:repeat ref="$visible-errors-for-section[position() le data($state/current-page-size)]" id="er">
                                                <xh:li class="fr-level-{{@level}} fr-error-{{if (starts-with(@alert, '&lt;ul>')) then 'multiple' else 'single'}}">
                                                    <!-- Clickable / linkable label -->
                                                    <xf:var
                                                        name="label-or-placeholder"
                                                        value="
                                                            if (xxf:non-blank(@label)) then
                                                                concat(
                                                                    '&lt;span class=&quot;fr-error-label&quot;>',
                                                                    @label,
                                                                    '&lt;/span>'
                                                                )

                                                            else
                                                                '&lt;span/>'"/>
                                                    <xf:var
                                                        name="focusable"
                                                        value="xxf:focusable(@id, true())"/>

                                                    <xf:switch caseref="$focusable" xxf:xforms11-switch="true">
                                                        <xf:case value="true()">
                                                            <xf:trigger appearance="minimal">
                                                                <xf:label>
                                                                    <xf:output
                                                                        mediatype="text/html"
                                                                        value="$label-or-placeholder"/>
                                                                    <span class="fr-error-alert fr-error-alert-{{@level}}">
                                                                        <xf:output
                                                                            mediatype="text/html"
                                                                            value="@alert"/>
                                                                    </span>
                                                                </xf:label>
                                                                <xf:dispatch event="DOMActivate" name="fr-internal-focus-error" target="fr-error-summary-binding">
                                                                    <xf:property name="error"    value="."/>
                                                                    <xf:property name="position" value="position()"/>
                                                                </xf:dispatch>
                                                            </xf:trigger>
                                                        </xf:case>
                                                        <xf:case value="false()">
                                                            <xf:output
                                                                mediatype="text/html"
                                                                value="$label-or-placeholder"/>
                                                            <xf:output
                                                                class="fr-error-alert fr-error-alert-{{@level}}"
                                                                mediatype="text/html"
                                                                value="@alert"/>
                                                        </xf:case>
                                                    </xf:switch>
                                                </xh:li>
                                            </xf:repeat>
                                        </xh:ol>

                                        <xf:trigger
                                            ref=".[count($visible-errors-for-section) gt data($state/current-page-size)]"
                                            appearance="minimal"
                                            class="fr-show-more-errors">
                                            <xf:label value="xxf:r('components.error-summary.show-more', '|fr-fr-resources|')"/>
                                            <xf:setvalue
                                                event="DOMActivate"
                                                ref="$state/current-page-size"
                                                value="data(.) + data($state/default-page-size)"/>
                                        </xf:trigger>

                                        <xf:trigger
                                            ref=".[$state/current-page-size/data(.) gt $state/default-page-size/data(.)]"
                                            appearance="minimal"
                                            class="fr-show-less-errors">
                                            <xf:label value="xxf:r('components.error-summary.show-less', '|fr-fr-resources|')"/>
                                            <xf:setvalue
                                                event="DOMActivate"
                                                ref="$state/current-page-size"
                                                value="max((data(.) - data($state/default-page-size), data($state/default-page-size)))"/>
                                        </xf:trigger>

                                    </xf:group>
                                </xf:group>

                                <!-- Include optional footer -->
                                <xbl:content includes=":root > fr|footer > *"/>

                            </xf:group>
                        </xh:span>
                    </xf:group>
                </xsl:template>
            </xsl:transform>
        </xbl:template>
    </xbl:binding>
</xbl:xbl>
