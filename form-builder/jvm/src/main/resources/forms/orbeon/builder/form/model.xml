<!--
  Copyright (C) 2010 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xf:model
    xmlns:xh="http://www.w3.org/1999/xhtml"
    xmlns:xf="http://www.w3.org/2002/xforms"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
    xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
    xmlns:saxon="http://saxon.sf.net/"
    xmlns:xbl="http://www.w3.org/ns/xbl"
    xmlns:frf="java:org.orbeon.oxf.fr.FormRunner"
    xmlns:fbf="java:org.orbeon.oxf.fb.FormBuilderXPathApi"
    xmlns:toolboxOps="java:org.orbeon.oxf.fb.ToolboxOps"

    xxf:external-events="
        fb-test-form-show-dialog
        fb-test-formulas-show-dialog
        fb-test-offline-show-dialog
        fb-test-pdf-show-dialog
        fb-test-pdf-with-data
        xxforms-rpc-request"
    xxf:xpath-analysis="false"
    xxf:expose-xpath-types="true"

    id="fr-form-model">

    <xf:var name="parameters" value="xxf:instance('fr-parameters-instance')"/>
    <xf:var name="app"        value="$parameters/app/string()"/>
    <xf:var name="form"       value="$parameters/form/string()"/>
    <xf:var name="mode"       value="$parameters/mode/string()"/>

    <xf:var name="has-roles"  value="not(xxf:instance('fb-permissions')/@has-roles = 'false')"/>

    <!-- Public variable pointing to the current language -->
    <xf:var name="fb-lang" value="instance('fb-language-instance')"/>

    <xf:var name="is-pe" value="fr:is-pe()" as="xs:boolean"/>

    <!-- Other variables -->
    <!-- TODO: don't duplicate logic with what's in FormBuilderFunctions -->
    <xf:var name="model" value="xh:head/xf:model[@id = 'fr-form-model']"/>
    <xf:var name="metadata-instance" value="frf:metadataInstanceRootOpt(instance('fb-form-instance'))"/>
    <xf:var name="resources"         value="frf:resourcesInstanceRootOpt(instance('fb-form-instance'))"/>
    <xf:var name="current-resources" value="($resources/resource[@xml:lang = $fb-lang])[1]"/>
    <!-- Was: xh:body//xf:group[xxf:has-class('fb-body')]"/> -->
    <!-- There *should* not be an id conflict as we add fb-body in annotate.xpl. Can we really make sure? -->
    <xf:var name="body" value="id('fb-body', instance('fb-form-instance'))"/>

    <xf:var
        name="component-bindings"
        as="element(xbl:binding)*"
        value="xxf:instance('fb-components-instance')/xbl:xbl/xbl:binding"/>

    <!-- FIXME: Probably remove once all usages are gone -->
    <xf:var
        name="current-td"
        value="id(instance('fb-variables')/selected-cell, instance('fb-form-instance'))"
        as="element()?"/>

    <!-- Main instance -->
    <!-- Index ids on fb-form-instance for performance -->
    <xf:instance id="fb-form-instance" xxf:index="id"><dummy/></xf:instance>
    <xf:instance id="fr-form-instance" src="oxf:/forms/orbeon/builder/form/template.xml"/>

    <!-- RPC request from the client -->
    <xf:action
        xmlns:router="java:org.orbeon.builder.rpc.Router"
        ev:observer="#document"
        event="xxforms-rpc-request"
        type="javascript">
        <xf:param
            name="id"
            value="event('id')"/>
        <xf:param
            name="response"
            value="router:processRequest(event('path'), event('args'))"/>
        <xf:body>
            ORBEON.xforms.RpcClient.processResponse(id, response);
        </xf:body>
    </xf:action>

    <!-- Annotate form data passed and store it into fb-form-instance -->
    <xf:action ev:event="fr-annotate-data">
        <!-- First store into a temporary document so that multiple inserts won't cause repeat processing until we are done -->
        <xf:var name="temp" value="xxf:create-document()"/>
        <xf:insert
            context="$temp"
            origin="
                xxf:call-xpl(
                    'oxf:/forms/orbeon/builder/form/annotate.xpl',
                    (
                        'data',
                        'bindings'
                    ),
                    (
                        xxf:call-xpl(
                            'oxf:/forms/orbeon/builder/form/add-template-bindings.xpl',
                            (
                                'data',
                                'bindings',
                                'for-form-builder'
                            ),
                            (
                                event('data'),
                                xxf:instance('fb-components-instance'),
                                xf:element('for-form-builder', 'true')
                            ),
                            'data'
                        ),
                        xxf:instance('fb-components-instance')
                    ),
                    'data'
                )"
        />

        <xf:action type="xpath">
            fbf:initializeGrids($temp),
            fbf:updateSectionTemplateContentHolders($temp)
        </xf:action>

        <!--<xf:message level="xxf:log-info" value="xxf:serialize($temp, 'xml')"/>-->

        <xf:insert ref="instance('fb-form-instance')" origin="$temp"/>

        <!-- RRR so that all binds are up to date for the rest of the initialization -->
        <xf:rebuild/>
        <xf:recalculate/>

    </xf:action>

    <!-- If needed, update current language after data got annotated. Do this in separate action so that model variables are up to date. -->
    <xf:action ev:event="fr-annotate-data">
        <xf:setvalue
            if="not($fb-lang = $resources/resource/@xml:lang)"
            ref="$fb-lang"
            value="$resources/resource[1]/@xml:lang"/>
    </xf:action>

    <!-- Initialization entry point. Form data must be ready and the Form Runner language must have been set. -->
    <xf:action ev:event="xforms-model-construct-done" if="not($mode = ('summary', 'home', 'landing')) and $app != '*' and $form != '*'">
        <xf:dispatch name="fb-data-ready" targetid="fr-form-model"/>
    </xf:action>

    <!-- Mode != "new": annotate loaded data and copy it to fb-form-instance -->
    <xf:action ev:event="fb-data-ready" if="not($mode = 'new')">

        <xf:dispatch name="fb-load-toolbox-action" targetid="fb-toolbox-model">
            <xf:property name="deannotate" value="false()"/>
        </xf:dispatch>

        <!-- RRR so that all binds are up to date for the rest of the initialization -->
        <xf:rebuild/>
        <xf:recalculate/>

    </xf:action>

    <!-- Mode = "new": just annotate template -->
    <xf:action ev:event="fb-data-ready" if="$mode = 'new'">

        <!-- Point to template -->
        <xf:var name="template" value="instance('fr-form-instance')"/>

        <!-- Set language in all blank @xml:lang on template -->
        <!-- See https://github.com/orbeon/orbeon-forms/issues/3457 -->
        <xf:var
            name="fb-lang"
            value="
                let $requested-fb-lang := xxf:trim(xxf:get-request-parameter('fb-language'))[xxf:non-blank()]
                return
                    if ($requested-fb-lang = xxf:instance('fr-languages-instance')/language[not(@exclude = 'true')]/@code) then
                        $requested-fb-lang
                    else
                        xxf:instance('fr-language-instance')"/>

        <xf:var name="metadata" value="frf:metadataInstanceRootOpt($template)"/>

        <xf:delete ref="$metadata/created-with-version"/>

        <xf:insert
            xmlns:version="java:org.orbeon.oxf.common.Version"
            context="$metadata"
            ref="*"
            origin="
                xf:element(
                    'created-with-version',
                    string-join(
                        (
                            version:VersionNumber(),
                            version:Edition()
                        ),
                        ' '
                    )
                )"/>

        <xf:setvalue
            iterate="$template//@xml:lang[xxf:is-blank()]"
            ref="."
            value="$fb-lang"/>

        <!-- Set initial form and first section titles on template -->
        <xf:var
            name="form-resources"
            model="fr-resources-model"
            value="
                (
                    $fr-form-resources/../resource[@xml:lang = $fb-lang],
                    $fr-form-resources
                )[1]"/>

        <xf:setvalue
            ref="$metadata/title"
            value="$form-resources/template/untitled-form"/>
        <xf:setvalue
            ref="frf:resourcesInstanceRootElemOpt($template)/resource/section-1/label"
            value="$form-resources/template/untitled-section"/>

        <!-- Annotate data -->
        <!-- NOTE: RRR done by fr-annotate-data -->
        <xf:dispatch targetid="fr-form-model" name="fr-annotate-data">
            <xf:property name="data" value="$template"/>
        </xf:dispatch>

        <!-- Free fr-form-instance -->
        <xf:insert ref="instance('fr-form-instance')" origin="xf:element('dummy')"/>

        <!-- Mark data as safe. Once user sets metadata from dialog, data will be marked dirty automatically.  -->
        <xf:action type="xpath">
            fr:run-process('oxf.fr.detail.process', 'set-data-status(status = "safe")')
        </xf:action>

    </xf:action>

    <!-- Run the rest of the initialization. Do this in separate action so that model variables are up to date. -->
    <xf:action ev:event="fb-data-ready">

        <!-- NOTE: $fb-lang has already been set by fr-annotate-data above -->

        <!-- Check permissions if there are roles -->
        <xf:action if="$has-roles">
            <xf:var name="metadata-app"  value="bind('application-name-bind')"/>
            <xf:var name="metadata-form" value="bind('form-name-bind')"/>
            <xf:var name="permissions"   value="xxf:instance('fb-permissions')"/>

            <xf:action if="$mode = 'new'">
                <!-- New form -->
                <xf:action if="not($permissions/app/@name = '*')">

                    <xf:var name="initial-app-value" value="$permissions/app[1]/@name[xxf:non-blank()]"/>

                    <xf:action if="empty($initial-app-value)" type="xpath">
                        frf:sendError(403)
                    </xf:action>

                    <!-- Set default value for app if we only support specific app names -->
                    <xf:setvalue ref="$metadata-app" value="$initial-app-value"/>

                    <xf:action if="not($permissions/app[1]/form/@name = '*')">
                        <!-- Set default value for form if we only support specific form names -->
                        <xf:setvalue ref="$metadata-form" value="$permissions/app[1]/form[1]/@name"/>
                    </xf:action>
                </xf:action>
            </xf:action>
            <xf:action if="not($mode = 'new')">
                <!-- Existing form -->

                <!-- If roles don't match then access is unauthorized. See similar logic in FR. -->
                <xf:action if="not(   exists($permissions/app[@name = '*'])
                                   or exists($permissions/app[@name = $metadata-app]/form[@name = ('*', $metadata-form)]))"
                           type="xpath">
                    frf:sendError(403)
                </xf:action>
            </xf:action>
        </xf:action>

        <xf:rebuild/>
        <xf:recalculate/>

    </xf:action>

    <xf:action event="fb-deannotate">
        <xf:insert
            ref="instance('fr-form-instance')"
            origin="
                xxf:call-xpl(
                    'oxf:/forms/orbeon/builder/form/deannotate.xpl',
                    'data',
                    instance('fb-form-instance'),
                    'data'
                )"
            />
    </xf:action>

    <xf:action event="fr-data-save-prepare">

        <!-- De-annotate data -->
        <xf:dispatch name="fb-deannotate" targetid="fr-form-model"/>

        <!-- Add `<updated-with-version>` as needed -->
        <xf:var
            xmlns:version="java:org.orbeon.oxf.common.Version"
            name="current-version"
            value="version:versionWithEdition()"/>

        <xf:insert
            context="frf:metadataInstanceRootOpt(instance('fr-form-instance'))"
            if="not(updated-with-version = $current-version)"
            ref="(updated-with-version[last()], created-with-version, *)[1]"
            origin="xf:element('updated-with-version', $current-version)"/>

    </xf:action>

    <!-- Update attachment URLs, if any, after saving -->
    <xf:action ev:event="fr-data-save-done">
        <xf:action iterate="event('before-urls')">
            <xf:var name="p" value="position()"/>
            <xf:var name="before" value="."/>
            <xf:var name="after" value="event('after-urls')[$p]"/>

            <xf:setvalue ref="instance('fb-form-instance')/root()//(*[not(*)] | @*)[xxf:trim() = $before]" value="$after"/>
        </xf:action>

        <!-- Free fr-form-instance and re-mark data as safe -->
        <xf:insert ref="instance('fr-form-instance')" origin="xf:element('dummy')"/>
        <xf:action type="xpath">
            fr:run-process('oxf.fr.detail.process', 'set-data-status(status = "safe")')
        </xf:action>

    </xf:action>

    <!-- Form is ready -->
    <xf:action ev:event="xforms-ready">
        <!-- Open form settings if mode is "new" only -->
        <xf:action if="$mode = 'new'">

            <!-- NOTE: Can contain '*'. -->
            <xf:var
                name="allowed-apps-if-has-roles"
                value="xxf:instance('fb-permissions')/app/@name/string()"/>

            <!-- Check URL parameters -->
            <xf:var
                name="requested-app"
                value="for $p in xxf:get-request-parameter('fr-app') return xxf:trim($p)"/>

            <xf:var
                name="requested-form"
                value="for $p in xxf:get-request-parameter('fr-form') return xxf:trim($p)"/>

            <xf:var
                name="requested-title"
                value="for $p in xxf:get-request-parameter('fr-title') return xxf:trim($p)"/>

            <xf:var
                name="requested-description"
                value="for $p in xxf:get-request-parameter('fr-description') return xxf:trim($p)"/>

            <!-- NOTE: Validation must match validation in dialog-form-settings.xbl. -->
            <xf:var
                name="valid-app-form-params"
                value="
                    exists($requested-app)                        and
                    exists($requested-form)                       and
                    matches($requested-app,  '^[A-Za-z0-9\-_]+$') and
                    matches($requested-form, '^[A-Za-z0-9\-_]+$') and
                    not($has-roles and not($allowed-apps-if-has-roles = ('*', $requested-app)))
            "/>

            <!-- If valid app/form were passed, skip showing the dialog -->
            <!-- Reuse existing logic of event handlers on dialog-form-settings -->
            <xf:dispatch
                    if="$valid-app-form-params"
                    name="fb-update-metadata"
                    targetid="dialog-form-settings">
                <xf:property name="lang"                          value="$fb-lang"/>
                <xf:property name="langs"                         value="$resources/resource/@xml:lang/string()"/>
                <xf:property name="mode"                          value="'new'"/>
                <xf:property name="app"                           value="$requested-app"/>
                <xf:property name="form"                          value="$requested-form"/>
                <xf:property name="title"                         value="($requested-title,       bind('title-bind'))[1]"/>
                <xf:property name="description"                   value="($requested-description, bind('description-bind'))[1]"/>
                <xf:property name="description-mediatype"         value="(if (exists($requested-description)) then 'text/plain' else (), bind('description-bind')/@mediatype/string())[1]"/>
                <xf:property name="created-with-version"          value="bind('created-with-version-bind')"/>
                <xf:property name="updated-with-versions"         value="bind('metadata-bind')/updated-with-version/string()"/>
                <xf:property name="singleton"                     value="bind('singleton-bind')"/>
                <xf:property name="attachment-max-size"           value="bind('attachment-max-size-bind')"/>
                <xf:property name="attachment-max-size-aggregate" value="bind('attachment-max-size-aggregate-bind')"/>
                <xf:property name="attachment-mediatypes"         value="bind('attachment-mediatypes-bind')"/>
                <xf:property name="wizard"                        value="bind('wizard-bind')"/>
                <xf:property name="wizard-mode"                   value="bind('wizard-mode-bind')"/>
                <xf:property name="wizard-subsections-nav"        value="bind('wizard-subsections-nav-bind')"/>
                <xf:property name="wizard-subsections-toc"        value="bind('wizard-subsections-toc-bind')"/>
                <xf:property name="wizard-separate-toc"           value="bind('wizard-separate-toc-bind')"/>
                <xf:property name="wizard-section-status"         value="bind('wizard-section-status-bind')"/>
                <xf:property name="labels"                        value="bind('labels-bind')"/>
                <xf:property name="hints"                         value="bind('hints-bind')"/>
                <xf:property name="data-migration"                value="bind('data-migration-bind')"/>
                <xf:property name="grid-tab-order"                value="bind('grid-tab-order-bind')"/>
                <xf:property name="rendered-page-orientation"     value="bind('rendered-page-orientation-bind')"/>
                <xf:property name="rendered-page-size"            value="bind('rendered-page-size-bind')"/>
                <xf:property name="readonly-disable-calculate"    value="bind('readonly-disable-calculate-bind')"/>
                <xf:property name="relevant"                      value="fbf:readDenormalizedCalculatedMip((), 'relevant')"/>
                <xf:property name="readonly"                      value="fbf:readDenormalizedCalculatedMip((), 'readonly')"/>
                <xf:property name="html-page-layout"              value="bind('html-page-layout-bind')"/>
                <xf:property name="analysis-calculate"            value="bind('analysis-calculate-bind')"/>
                <xf:property name="email"                         value="bind('email-bind')"/>
                <xf:property name="control-settings-elems"        value="bind('xbl-bind')/*"/>
                <xf:property name="component-bindings"            value="$component-bindings"/>
            </xf:dispatch>

            <xxf:show
                    if="not($valid-app-form-params)"
                    dialog="dialog-form-settings">
                <xf:property name="lang"                          value="$fb-lang"/>
                <xf:property name="langs"                         value="$resources/resource/@xml:lang/string()"/>
                <xf:property name="mode"                          value="'new'"/>
                <xf:property name="app"                           value="($requested-app,         bind('application-name-bind'))[1]"/>
                <xf:property name="form"                          value="($requested-form,        bind('form-name-bind'))[1]"/>
                <xf:property name="title"                         value="($requested-title,       bind('title-bind'))[1]"/>
                <xf:property name="description"                   value="($requested-description, bind('description-bind'))[1]"/>
                <xf:property name="description-mediatype"         value="(if (exists($requested-description)) then 'text/plain' else (), bind('description-bind')/@mediatype/string())[1]"/>
                <xf:property name="created-with-version"          value="bind('created-with-version-bind')"/>
                <xf:property name="updated-with-versions"         value="bind('metadata-bind')/updated-with-version/string()"/>
                <xf:property name="singleton"                     value="bind('singleton-bind')"/>
                <xf:property name="attachment-max-size"           value="bind('attachment-max-size-bind')"/>
                <xf:property name="attachment-max-size-aggregate" value="bind('attachment-max-size-aggregate-bind')"/>
                <xf:property name="attachment-mediatypes"         value="bind('attachment-mediatypes-bind')"/>
                <xf:property name="wizard"                        value="bind('wizard-bind')"/>
                <xf:property name="wizard-mode"                   value="bind('wizard-mode-bind')"/>
                <xf:property name="wizard-subsections-nav"        value="bind('wizard-subsections-nav-bind')"/>
                <xf:property name="wizard-subsections-toc"        value="bind('wizard-subsections-toc-bind')"/>
                <xf:property name="wizard-separate-toc"           value="bind('wizard-separate-toc-bind')"/>
                <xf:property name="wizard-section-status"         value="bind('wizard-section-status-bind')"/>
                <xf:property name="labels"                        value="bind('labels-bind')"/>
                <xf:property name="hints"                         value="bind('hints-bind')"/>
                <xf:property name="data-migration"                value="bind('data-migration-bind')"/>
                <xf:property name="grid-tab-order"                value="bind('grid-tab-order-bind')"/>
                <xf:property name="rendered-page-orientation"     value="bind('rendered-page-orientation-bind')"/>
                <xf:property name="rendered-page-size"            value="bind('rendered-page-size-bind')"/>
                <xf:property name="readonly-disable-calculate"    value="bind('readonly-disable-calculate-bind')"/>
                <xf:property name="relevant"                      value="fbf:readDenormalizedCalculatedMip((), 'relevant')"/>
                <xf:property name="readonly"                      value="fbf:readDenormalizedCalculatedMip((), 'readonly')"/>
                <xf:property name="html-page-layout"              value="bind('html-page-layout-bind')"/>
                <xf:property name="analysis-calculate"            value="bind('analysis-calculate-bind')"/>
                <xf:property name="email"                         value="bind('email-bind')"/>
                <xf:property name="xbl"                           value="bind('xbl-bind')"/>
                <xf:property name="component-bindings"            value="$component-bindings"/>
            </xxf:show>
        </xf:action>
    </xf:action>

    <!-- Annotated form instance -->
    <xf:bind id="fb-form-binds" ref="instance('fb-form-instance')">
        <xf:bind ref="xh:head">
            <xf:bind ref="xf:model[@id = 'fr-form-model']" id="fb-form-model-bind">
                <!-- Form metadata (also used by Form Runner) -->
                <xf:bind ref="xf:instance[@id = 'fr-form-metadata']/*" id="metadata-bind">
                    <xf:bind id="application-name-bind"           ref="application-name"/>
                    <xf:bind id="form-name-bind"                  ref="form-name"/>
                    <xf:bind id="title-bind"                      ref="title[@xml:lang = $fb-lang]"/>
                    <xf:bind id="description-bind"                ref="description[@xml:lang = $fb-lang]"/>
                    <xf:bind id="created-with-version-bind"       ref="created-with-version"/>
                    <xf:bind id="singleton-bind"                  ref="singleton"/>
                    <xf:bind id="wizard-bind"                     ref="wizard"/>
                    <xf:bind id="wizard-mode-bind"                ref="wizard-mode"/>
                    <xf:bind id="wizard-subsections-nav-bind"     ref="wizard-subsections-nav"/>
                    <xf:bind id="wizard-subsections-toc-bind"     ref="wizard-subsections-toc"/>
                    <xf:bind id="wizard-separate-toc-bind"        ref="wizard-separate-toc"/>
                    <xf:bind id="wizard-section-status-bind"      ref="wizard-section-status"/>
                    <xf:bind id="email-bind"                      ref="email"/>
                    <xf:bind id="automatic-hints-bind"            ref="automatic-hints"/>
                    <xf:bind id="data-migration-bind"             ref="data-migration"/>
                    <xf:bind id="grid-tab-order-bind"             ref="grid-tab-order"/>
                    <xf:bind id="rendered-page-orientation-bind"  ref="rendered-page-orientation"/>
                    <xf:bind id="rendered-page-size-bind"         ref="rendered-page-size"/>
                    <xf:bind id="html-page-layout-bind"           ref="html-page-layout"/>
                    <xf:bind id="readonly-disable-calculate-bind" ref="readonly-disable-calculate"/>
                    <xf:bind id="xbl-bind"                        ref="xbl"/>
                    <xf:bind id="library-versions-bind"           ref="library-versions">
                        <xf:bind
                            ref="orbeon | app"
                            name="orbeon-or-app"
                            relevant="
                                let $versions := bind('fb-toolbox-libraries-bind')/*[name() = name($orbeon-or-app)]
                                return
                                    not(count($versions/version) = 1 and $versions/version = '1')"
                            readonly="
                                let $versions := bind('fb-toolbox-libraries-bind')/*[name() = name($orbeon-or-app)]
                                return
                                    count($versions/version) = 1"
                        />
                    </xf:bind>
                </xf:bind>
                <!-- Global attachments (also used by Form Runner) -->
                <xf:bind ref="xf:instance[@id = 'fr-form-attachments']/*" id="attachments-bind">
                    <xf:bind id="css-attachment-bind"   ref="css" type="xs:anyURI"/>
                    <xf:bind id="pdf-attachments-bind"  ref="pdf" type="xs:anyURI"/>
                </xf:bind>
                <!-- Properties on main form model -->
                <xf:bind id="attachment-max-size-bind"           ref="@xxf:upload.max-size"/>
                <xf:bind id="attachment-max-size-aggregate-bind" ref="@xxf:upload.max-size-aggregate"/>
                <xf:bind id="attachment-mediatypes-bind"         ref="@xxf:upload.mediatypes"/>
                <xf:bind id="labels-bind"                        ref="@xxf:label.appearance"/>
                <xf:bind id="hints-bind"                         ref="@xxf:hint.appearance"/>
                <xf:bind id="analysis-calculate-bind"            ref="@xxf:analysis.calculate"/>
            </xf:bind>
        </xf:bind>
        <!-- Keep all @edit-ref attributes pointing to the right spot -->
        <xf:bind ref=".//@edit-ref" calculate="concat('xxf:instance(''fb-form-instance'')/root()', ../saxon:path())"/>
    </xf:bind>

    <!-- Metadata for Form Builder itself -->
    <xf:instance id="fr-form-metadata" xxf:readonly="true">
        <metadata>
            <application-name>orbeon</application-name>
            <form-name>builder</form-name>
            <title xml:lang="en">Form Builder</title>
            <description xml:lang="en">Orbeon Form Builder allows you to easily build forms right from your web browser and without programming.</description>
            <title xml:lang="fr">Form Builder</title>
            <description xml:lang="fr">Orbeon Form Builder vous permet d'éditer des formulaires directement depuis votre navigateur et sans programmation.</description>
            <title xml:lang="ru">Мастер форм</title>
            <description xml:lang="ru">Мастер форм позволяет легко создавать шаблоны форм запросов.</description>
            <title xml:lang="pt">Form Builder</title>
            <description xml:lang="pt">Orbeon Form Builder permite que criar facilmente formulários directamente do seu navegador e sem programação.</description>
            <author>Orbeon, Inc.</author>
            <logo mediatype="image/png" filename="orbeon-logo-trimmed-transparent-30.png" size="">/apps/fr/style/orbeon-logo-trimmed-transparent-30.png</logo>
        </metadata>
    </xf:instance>

    <!-- Similar to fr-triggers-instance, but for FB-specific buttons -->
    <xf:instance id="fb-triggers-instance">
        <_>
            <data-status/>
            <publish/>
            <save-as/>
            <other/>
            <test-pdf/>
        </_>
    </xf:instance>

    <xf:bind ref="instance('fb-triggers-instance')">
        <xf:bind ref="publish"
                 readonly="not(../data-status = 'clean')
                           or xxf:instance('fr-error-summary-instance')/valid = false()
                           or xxf:pending-uploads() > 0"/>

        <!-- Condition for disabling Save as… button -->
        <!-- HACK: Not sure why, but if we don't put a calculate here (which is useless), then the readonly is not evaluated on recalculate -->
        <xf:bind ref="save-as" readonly="$mode != 'edit'" calculate="$mode"/>
        <xf:bind ref="test-pdf" relevant=". = 'true'"/>
    </xf:bind>

    <xf:instance id="fb-static-upload">
        <_>
            <empty/>
            <non-empty>content</non-empty>
        </_>
    </xf:instance>

    <!-- HACK: Bind has inter-model dependency -->
    <xf:recalculate ev:event="xxforms-value-changed" ev:observer="fr-parameters-instance"/>

    <!-- Synchronize data status -->
    <xf:setvalue
        event="fr-data-status-changed"
        observer="fr-persistence-model"
        ref="instance('fb-triggers-instance')/data-status"
        value="event('data-status')"/>

    <!-- All form resources -->
    <xf:instance
        id="fr-form-resources"
        src="oxf:/forms/orbeon/builder/form/resources.xml"
        xxf:readonly="true"
        xxf:cache="true"/>

    <!-- Instance containing the current language of the form being edited -->
    <xf:instance id="fb-language-instance">
        <lang/>
    </xf:instance>

    <!-- Store user-agent details -->
    <xf:instance id="fb-user-agent-instance">
        <user-agent>
            <browser-name/>
            <is-supported-browser/>
        </user-agent>
    </xf:instance>

    <!-- Submission to test the form -->
    <!-- NOTE: Submit form to testing service with section templates XBL included -->
    <xf:submission
        id="fb-test-form-submission"
        ref="
            xxf:call-xpl(
                'oxf:/forms/orbeon/builder/form/add-template-bindings.xpl',
                (
                    'data',
                    'bindings',
                    'for-form-builder'
                ),
                (
                    xxf:call-xpl(
                        'oxf:/forms/orbeon/builder/form/deannotate.xpl',
                        'data',
                        instance('fb-form-instance'),
                        'data'
                    ),
                    xxf:instance('fb-components-instance'),
                    xf:element('for-form-builder', 'false')
                ),
                'data'
            )"
        method="post"
        replace="all"
        resource="/fr/{bind('application-name-bind')}/{bind('form-name-bind')}/test?fr-language={$fb-lang}"
        xxf:target="fb-test-iframe"
        xxf:show-progress="false"
    />

    <xf:submission
        id="fb-test-formulas-form-submission"
        ref="
            xxf:call-xpl(
                'oxf:/forms/orbeon/builder/form/add-template-bindings.xpl',
                (
                    'data',
                    'bindings',
                    'for-form-builder'
                ),
                (
                    xxf:call-xpl(
                        'oxf:/forms/orbeon/builder/form/add-test-formulas-configuration.xpl',
                        'data',
                        xxf:call-xpl(
                            'oxf:/forms/orbeon/builder/form/deannotate.xpl',
                            'data',
                            instance('fb-form-instance'),
                            'data'
                        ),
                        'data'
                    ),
                    xxf:instance('fb-components-instance'),
                    xf:element('for-form-builder', 'false')
                ),
                'data'
            )"
        method="post"
        replace="all"
        resource="/fr/{bind('application-name-bind')}/{bind('form-name-bind')}/test"
        xxf:target="fb-test-iframe"
        xxf:show-progress="false"
    />

    <xf:submission
        id="fb-test-offline-submission"
        ref="
            xxf:call-xpl(
                'oxf:/forms/orbeon/builder/form/add-template-bindings.xpl',
                (
                    'data',
                    'bindings',
                    'for-form-builder'
                ),
                (
                    xxf:call-xpl(
                        'oxf:/forms/orbeon/builder/form/add-migration.xpl',
                        (
                            'data',
                            'bindings'
                        ),
                        (
                            xxf:call-xpl(
                                'oxf:/forms/orbeon/builder/form/deannotate.xpl',
                                'data',
                                instance('fb-form-instance'),
                                'data'
                            ),
                            xxf:instance('fb-components-instance')
                        ),
                        'data'
                    ),
                    xxf:instance('fb-components-instance'),
                    xf:element('for-form-builder', 'false')
                ),
                'data'
            )"
        method="post"
        replace="all"
        resource="/fr/service/{bind('application-name-bind')}/{bind('form-name-bind')}/compile?format=zip"
        xxf:target="fb-test-iframe"
        xxf:show-progress="false"
    />

    <!-- TODO: Reduce duplication with above submission if possible. -->
    <xf:submission
        id="fb-test-pdf-submission"
        ref="
            xxf:call-xpl(
                'oxf:/forms/orbeon/builder/form/add-template-bindings.xpl',
                (
                    'data',
                    'bindings',
                    'for-form-builder'
                ),
                (
                    xxf:call-xpl(
                        'oxf:/forms/orbeon/builder/form/deannotate.xpl',
                        'data',
                        instance('fb-form-instance'),
                        'data'
                    ),
                    xxf:instance('fb-components-instance'),
                    xf:element('for-form-builder', 'false')
                ),
                'data'
            )"
        method="post"
        replace="all"
        resource="/fr/service/{bind('application-name-bind')}/{bind('form-name-bind')}/test-pdf?{
            string-join(
                for $p in instance('fb-test-pdf-submission-params')/@*[xxf:non-blank(.)]
                return
                    concat(name($p), '=', encode-for-uri(string($p))),
                '&amp;'
            )
        }&amp;fr-remember-language=false"
        xxf:target="_blank"
        xxf:show-progress="false"
    />

    <!-- The `disable-*` parameters are "sticky" and stored when the dialog applies changes. -->
    <!-- The `*pdf-template-*` parameters are also stored when the dialog applies changes. -->
    <xf:instance id="fb-test-pdf-submission-params">
        <params
            disable-default=""
            disable-calculate=""
            disable-relevant=""

            fr-rendered-filename=""

            fr-use-pdf-template=""
            fr-pdf-template-name=""
            fr-pdf-template-lang=""

            fr-pdf-show-hints=""
            fr-pdf-show-alerts=""
            fr-pdf-show-required=""

            fr-form-data=""
            fr-language=""
        />
    </xf:instance>

    <xf:action event="xforms-submit" observer="fb-test-pdf-submission">
        <!-- Only change parameters that are passed -->
        <xf:setvalue
            iterate="instance('fb-test-pdf-submission-params')/@*"
            if="
                (
                    starts-with(name(context()), 'disable-') or
                    name(context()) = ('fr-rendered-filename')
                ) and exists(event(name(context())))"
            ref="."
            value="event(name(context()))"/>
        <!-- But always update the data -->
        <xf:setvalue
            ref="instance('fb-test-pdf-submission-params')/@fr-form-data"
            value="event('fr-form-data')"/>
        <xf:setvalue
            ref="instance('fb-test-pdf-submission-params')/@fr-language"
            value="event('language')"/>
    </xf:action>

    <!-- Global variables -->
    <xf:instance id="fb-variables">
        <variables>
            <selected-cell/>        <!-- Currently selected cell td id -->

            <!-- TODO: move to dialog-language.xml -->
            <new-language/>
            <new-language-trigger/>

            <!-- Toolbox -->
            <section-trigger/>
            <grid-trigger/>
            <control-trigger/>

            <!-- Number of open dialogs (for keyboard shortcuts) -->
            <!-- TODO: could use a native function for this -->
            <dialogs-open>0</dialogs-open>

            <!-- XPath errors -->
            <rr>calculate</rr>
            <calculate-errors>0</calculate-errors>
            <validate-errors>0</validate-errors>
            <xpath-errors>0</xpath-errors>
        </variables>
    </xf:instance>

    <xf:var name="variables" value="instance('fb-variables')"/>
    <xf:var name="selected-cell" value="$variables/selected-cell"/>

    <xf:bind ref="$variables">
        <!-- TODO: move to dialog-language.xml -->
        <xf:bind ref="new-language-trigger" readonly="xxf:is-blank(../new-language)"/>
        <!-- Make buttons readonly depending on whether items can be inserted -->
        <xf:bind ref="section-trigger"  readonly="$current-td/ancestor::xbl:binding or not(toolboxOps:canInsertSection($body))"/>
        <xf:bind ref="grid-trigger"     readonly="$current-td/ancestor::xbl:binding or not(toolboxOps:canInsertGrid($body))"/>
        <xf:bind ref="control-trigger"  readonly="$current-td/ancestor::xbl:binding or not(toolboxOps:canInsertControl($body))"/>

        <!-- Sum calculate and validate MIP error counts -->
        <xf:bind ref="xpath-errors" calculate="../calculate-errors + ../validate-errors"/>
    </xf:bind>

    <!-- These actions track MIP XPath errors in the edited form's model. We keep track of XPath errors occurring on
         revalidate and recalculate independently, which should be reliable given that the edit form doesn't enable
         XPath dependencies. -->
    <xf:action ev:event="fb-xforms-model-construct" context="$variables">
        <xf:setvalue ref="rr">calculate</xf:setvalue>
        <xf:setvalue ref="calculate-errors">0</xf:setvalue>
        <xf:setvalue ref="validate-errors">0</xf:setvalue>
    </xf:action>

    <xf:action ev:event="fb-xforms-recalculate" context="$variables">
        <xf:setvalue ref="rr">calculate</xf:setvalue>
        <xf:setvalue ref="calculate-errors">0</xf:setvalue>
    </xf:action>

    <xf:action ev:event="fb-xforms-revalidate" context="$variables">
        <xf:setvalue ref="rr">validate</xf:setvalue>
        <xf:setvalue ref="validate-errors">0</xf:setvalue>
    </xf:action>

    <xf:action ev:event="fb-xxforms-xpath-error" context="$variables">
        <xf:setvalue ref="if (rr = 'calculate') then calculate-errors else validate-errors" value=". + 1"/>
    </xf:action>

    <xf:action event="fb-test-form fb-test-formulas fb-test-offline">
        <xf:var
            name="show-pe-dialog"
            value="not($is-pe) and event('xxf:type') = ('fb-test-formulas', 'fb-test-offline')"/>
        <xf:action if="not($show-pe-dialog)" type="javascript">
            <xf:param name="eventName" value="concat(event('xxf:type'), '-show-dialog')"/>
            <xf:body>ORBEON.builder.private.API.updateTestIframeAndDispatch(eventName)</xf:body>
        </xf:action>
        <xf:action if="$show-pe-dialog">
            <xf:dispatch name="fr-show" targetid="fb-pe-dialog" />
        </xf:action>
    </xf:action>

    <!-- Dispatched from the client, see above action -->
    <xf:action event="fb-test-form-show-dialog">
        <xxf:show dialog="fb-test-dialog">
            <xf:property name="show-test-pdf" value="true()"/>
        </xxf:show>
        <xf:send submission="fb-test-form-submission"/>
    </xf:action>

    <xf:action event="fb-test-formulas-show-dialog">
        <xxf:show dialog="fb-test-dialog">
            <xf:property name="show-test-pdf" value="false()"/>
        </xxf:show>
        <xf:send submission="fb-test-formulas-form-submission"/>
    </xf:action>

    <xf:action event="fb-test-offline-show-dialog">
        <xxf:show dialog="fb-test-dialog">
            <xf:property name="show-test-pdf" value="false()"/>
        </xxf:show>
        <xf:send submission="fb-test-offline-submission"/>
    </xf:action>

    <xf:action event="fb-test-pdf-show-dialog">
        <xf:dispatch name="fb-show-dialog" targetid="dialog-test-pdf">
            <xf:property name="for-form-being-tested" value="false()"/>
            <xf:property name="pdf-templates"         value="bind('pdf-attachments-bind')[xxf:non-blank()]"/>
        </xf:dispatch>
    </xf:action>

    <!-- Dispatched from the client -->
    <xf:action event="fb-test-pdf-with-data">
        <xf:send submission="fb-test-pdf-submission">
            <xf:property name="fr-form-data"         value="event('fr-form-data')"/>
            <xf:property name="language"             value="event('language')"/>
            <xf:property name="fr-rendered-filename" value="fbf:buildContentDispositionHeader(instance('fb-form-instance'), 'pdf')"/>
        </xf:send>
    </xf:action>

    <!-- Publish form operation -->
    <xf:action ev:event="fb-publish-form">

        <!-- Save -->
        <!-- See https://github.com/orbeon/orbeon-forms/issues/2611 -->
        <xf:action type="xpath">
            fr:run-process-by-name('oxf.fr.detail.process', 'save')
        </xf:action>

        <!-- Publish -->
        <xf:send submission="fb-publish-submission">
            <xf:property name="doc"                      value="event('doc')"/>
            <xf:property name="document-id"              value="event('document-id')"/>
            <xf:property name="form-definition-version"  value="event('form-definition-version')"/>
            <xf:property name="version-comment"          value="event('version-comment')"/>
            <xf:property name="available"                value="event('available')"/>
        </xf:send>

        <xf:action if="bind('form-name-bind') = 'library'">
            <xxf:invalidate-instance
                resource="/fr/service/custom/orbeon/builder/toolbox"
                ignore-query-string="true"/>
        </xf:action>

    </xf:action>

    <xf:action event="fb-excel-export">

        <!-- Save -->
        <!-- See https://github.com/orbeon/orbeon-forms/issues/2611 -->
        <xf:action type="xpath">
            fr:run-process-by-name('oxf.fr.detail.process', 'save')
        </xf:action>

        <!-- Export -->
        <xf:send submission="fb-export-submission">
            <xf:property name="export-format" value="'excel-with-named-ranges'"/>
        </xf:send>
    </xf:action>

    <xf:action event="fb-xml-export">

        <!-- Save -->
        <!-- See https://github.com/orbeon/orbeon-forms/issues/2611 -->
        <xf:action type="xpath">
            fr:run-process-by-name('oxf.fr.detail.process', 'save')
        </xf:action>

        <!-- Export -->
        <xf:send submission="fb-export-submission">
            <xf:property name="export-format" value="'xml-form-structure-and-data'"/>
        </xf:send>
    </xf:action>

    <xf:action event="fb-form-definition-xhtml">
        <!-- Probably no need to save, so don't do it for now. -->
        <!-- Export -->
        <xf:send submission="fb-form-definition-xhtml-export-submission"/>
    </xf:action>

    <xf:submission
        id="fb-publish-submission"
        ref="event('doc')"
        serialization="application/xml"
        method="post"
        resource="/fr/service/publish?document-id={
                encode-for-uri(event('document-id'))
            }&amp;form-definition-version={
                encode-for-uri(event('form-definition-version'))
            }&amp;version-comment={
                encode-for-uri(event('version-comment'))
            }&amp;available={
                encode-for-uri(string(event('available')))
            }"
        replace="instance"
        instance="fb-publish-response-instance"/>

    <xf:submission
        id="fb-export-submission"
        ref="
            xxf:call-xpl(
                'oxf:/forms/orbeon/builder/form/deannotate.xpl',
                'data',
                instance('fb-form-instance'),
                'data'
            )"
        serialization="application/xml"
        method="post"
        resource="/fr/service/export?document-id={
                encode-for-uri(fr:document-id())
            }&amp;language={
                encode-for-uri($fb-lang)
            }&amp;repeats-at-least={
                5 (: TODO: use configuration property :)
            }&amp;export-format={
                event('export-format')
            }"
        replace="all"/>

    <xf:submission
        id="fb-form-definition-xhtml-export-submission"
        ref="
            xxf:call-xpl(
                'oxf:/forms/orbeon/builder/form/deannotate.xpl',
                'data',
                instance('fb-form-instance'),
                'data'
            )"
        serialization="application/xml"
        method="post"
        resource="echo:"
        replace="all"
        xxf:target="fb-test-iframe"
        xxf:show-progress="false">
        <xf:header>
            <xf:name>Content-Disposition</xf:name>
            <xf:value value="fbf:buildContentDispositionHeader(instance('fb-form-instance'), 'form-definition-xhtml')"/>
        </xf:header>
    </xf:submission>

    <xf:action observer="fb-publish-submission" event="xforms-submit-done">

        <xf:setvalue
            ref="xxf:instance('fb-publish-instance')/published-attachments"
            value="instance('fb-publish-response-instance')/published-attachments"/>

        <xf:setvalue
            ref="xxf:instance('fb-publish-instance')/published-version"
            value="instance('fb-publish-response-instance')/published-version"/>

        <xf:toggle   case="fb-publish-dialog-success"/>
        <xf:setfocus control="fb-publish-dialog"/>
    </xf:action>
    <xf:action observer="fb-publish-submission" event="xforms-submit-error">
        <xf:toggle   case="fb-publish-dialog-error"/>
        <xf:setfocus control="fb-publish-dialog"/>
    </xf:action>

    <xf:instance id="fb-publish-response-instance">
        <dummy/>
    </xf:instance>

    <!-- These actions track how many dialogs are open at a given time (for keyboard shortcuts) -->
    <xf:setvalue
        event="xforms-dialog-shown"
        observer="#document"
        xxf:phantom="true"
        ref="$variables/dialogs-open"
        value="xs:integer(.) + 1"/>

    <xf:setvalue
        event="xforms-dialog-hidden"
        observer="#document"
        xxf:phantom="true"
        ref="$variables/dialogs-open"
        value="xs:integer(.) - 1"/>

    <xf:action event="fb-move-selected-cell-into-view">

        <xf:action
            iterate="
                let $ids :=
                    for $elem in reverse(
                        frf:findAncestorSectionsLeafToRoot(
                            fbf:getCurrentlySelectedCell(),
                            false()
                        )
                    )
                    return
                        $elem/@id
                return
                    for $i in 1 to count($ids)
                    return
                        concat(
                            '|',
                            string-join(
                                (
                                    'fb',
                                    subsequence(
                                        $ids,
                                        1,
                                        $i
                                    )
                                ),
                                '≡'
                            ),
                            '|'
                        )">
            <xf:dispatch
                name="fr-expand"
                targetid="{.}"/>
            <xf:recalculate/>
            <xf:refresh/>
        </xf:action>

        <xf:action type="javascript">
            ORBEON.builder.private.API.moveFocusedCellIntoView();
        </xf:action>

    </xf:action>

    <!-- Schema upload dialog -->
    <xf:instance id="fb-schema-upload-instance">
        <_>
            <schema-uri filename="" mediatype="" size=""/>
            <schema>
                <!-- Content will be like this -->
                <!--<xs:schema>-->
                    <!--...-->
                <!--</xs:schema>-->
            </schema>
            <temp-type/>
        </_>
    </xf:instance>

    <xf:bind ref="instance('fb-schema-upload-instance')">
        <xf:bind ref="temp-type" readonly="true()"/>
    </xf:bind>

    <xf:instance id="fb-xcv-triggers-instance" xxf:index="id">
        <_>
            <cut-trigger/>
            <copy-trigger/>
            <paste-trigger/>
        </_>
    </xf:instance>
    <xf:var name="xcv"           value="instance('fb-xcv-triggers-instance')"/>
    <xf:var name="dialog-opened" value="instance('fb-variables')/dialogs-open > 0"/>
    <xf:bind ref="$xcv">
        <xf:bind ref="cut-trigger"    readonly="$dialog-opened or empty($current-td/*)"/>
        <xf:bind ref="copy-trigger"   readonly="$dialog-opened or empty($current-td/*)"/>
        <xf:bind ref="paste-trigger"  readonly="$dialog-opened"/>
    </xf:bind>

    <!-- Undo stack -->
    <xf:instance id="fb-undo-instance">
        <_>
            <undos/>
            <redos/>
            <undo-trigger/>
            <redo-trigger/>
        </_>
    </xf:instance>
    <xf:var name="undo" value="instance('fb-undo-instance')"/>
    <xf:bind ref="$undo">
        <xf:bind ref="undo-trigger" readonly="$dialog-opened or empty($undo/undos/*)"/>
        <xf:bind ref="redo-trigger" readonly="$dialog-opened or empty($undo/redos/*)"/>
    </xf:bind>

</xf:model>
