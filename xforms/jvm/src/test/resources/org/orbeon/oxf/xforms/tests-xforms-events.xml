<!--
  Copyright (C) 2010 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<group description="XForms Events" xmlns:p="http://www.orbeon.com/oxf/pipeline"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xh="http://www.w3.org/1999/xhtml"
    xmlns:oxf="http://www.orbeon.com/oxf/processors"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xxi="http://orbeon.org/oxf/xml/xinclude"
    xmlns:xf="http://www.w3.org/2002/xforms"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
    xmlns:exf="http://www.exforms.org/exf/1-0"
    xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:xbl="http://www.w3.org/ns/xbl"
    xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
    xmlns:fr="http://orbeon.org/oxf/xml/form-runner">

    <test description="ev:observer and ev:target" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="my-model">
                        <xf:instance id="my-instance">
                            <instance>initial</instance>
                        </xf:instance>

                        <xf:action ev:observer="my-group" ev:target="my-input" ev:event="DOMFocusIn">
                            <xf:setvalue ref=".">new</xf:setvalue>
                        </xf:action>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group id="my-group">
                        <xf:input id="my-input" ref=".">
                            <xf:label>My Data</xf:label>
                        </xf:input>

                        <xf:action ev:observer="my-model" ev:event="xforms-ready">
                            <xf:dispatch name="DOMFocusIn" targetid="my-input"/>
                        </xf:action>

                    </xf:group>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="my-instance" model-id="my-model">
                                <instance>new</instance>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-input" label="My Data">
                            <xxf:value>new</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="ev:event='#all' ev:propagate='stop'" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <value/>
                        </xf:instance>

                        <!-- Cause value change -->
                        <xf:setvalue ev:event="xforms-ready" ref=".">New value</xf:setvalue>

                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group id="my-group-1">
                        <!-- Record all events -->
                        <xf:insert ev:event="#all"
                                       context="instance('events')" ref="*"
                                       origin="xf:element('event',
                                                (xf:attribute('type', event('xxf:type')),
                                                 xf:attribute('target', event('xxf:targetid')),
                                                 xf:attribute('indexes', string-join(event('xxf:repeat-indexes'), ' '))))"/>

                        <xf:input id="my-input-1" ref="."/>

                        <xf:group id="my-group-2">
                            <!-- Filter all events -->
                            <xf:action ev:event="#all" ev:propagate="stop"/>
                            <xf:input id="my-input-2" ref="."/>
                        </xf:group>
                    </xf:group>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <value>New value</value>
                            </instance>
                            <instance id="events" model-id="model">
                                <events>
                                    <event type="xforms-enabled" target="my-group-1" indexes=""/>
                                    <event type="xxforms-visible" target="my-group-1" indexes=""/>
                                    <event type="xforms-enabled" target="my-input-1" indexes=""/>
                                    <event type="xxforms-visible" target="my-input-1" indexes=""/>
                                    <event type="xforms-value-changed" target="my-input-1" indexes=""/>
                                </events>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-input-1">
                            <xxf:value>New value</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-input-2">
                            <xxf:value>New value</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="DnD events" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance1">
                            <instance>
                                <row>row1</row>
                                <row>row2</row>
                                <row>row3</row>
                            </instance>
                        </xf:instance>
                        <xf:instance id="instance2">
                            <instance>
                                <row>row1</row>
                                <row>row2</row>
                                <row>row3</row>
                            </instance>
                        </xf:instance>
                        <xf:instance id="instance3">
                            <instance>
                                <row>row1</row>
                                <row>row2</row>
                                <row>row3</row>
                            </instance>
                        </xf:instance>
                        <xf:instance id="instance4">
                            <instance>
                                <row>row1</row>
                                <row>row2</row>
                                <row>row3</row>
                            </instance>
                        </xf:instance>
                        <xf:instance id="instance5">
                            <instance>
                                <row>row1</row>
                                <row>row2</row>
                                <row>row3</row>
                            </instance>
                        </xf:instance>
                        <xf:instance id="instance6">
                            <instance>
                                <row>row1</row>
                                <row>row2</row>
                                <row>row3</row>
                            </instance>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <xf:dispatch targetid="repeat1" name="xxforms-dnd">
                                <xf:property name="dnd-start" value="'1'"/>
                                <xf:property name="dnd-end" value="'2'"/>
                            </xf:dispatch>
                            <xf:dispatch targetid="repeat2" name="xxforms-dnd">
                                <xf:property name="dnd-start" value="'1'"/>
                                <xf:property name="dnd-end" value="'3'"/>
                            </xf:dispatch>
                            <xf:dispatch targetid="repeat3" name="xxforms-dnd">
                                <xf:property name="dnd-start" value="'2'"/>
                                <xf:property name="dnd-end" value="'1'"/>
                            </xf:dispatch>
                            <xf:dispatch targetid="repeat4" name="xxforms-dnd">
                                <xf:property name="dnd-start" value="'2'"/>
                                <xf:property name="dnd-end" value="'3'"/>
                            </xf:dispatch>
                            <xf:dispatch targetid="repeat5" name="xxforms-dnd">
                                <xf:property name="dnd-start" value="'3'"/>
                                <xf:property name="dnd-end" value="'1'"/>
                            </xf:dispatch>
                            <xf:dispatch targetid="repeat6" name="xxforms-dnd">
                                <xf:property name="dnd-start" value="'3'"/>
                                <xf:property name="dnd-end" value="'2'"/>
                            </xf:dispatch>
                        </xf:action>

                    </xf:model>
                </xh:head>
                <xh:body>

                    <xf:repeat id="repeat1" ref="instance('instance1')/row" xxf:dnd="true">
                        <xf:output id="output1" value="."/>
                    </xf:repeat>
                    <xf:repeat id="repeat2" ref="instance('instance2')/row" xxf:dnd="true">
                        <xf:output id="output2" value="."/>
                    </xf:repeat>
                    <xf:repeat id="repeat3" ref="instance('instance3')/row" xxf:dnd="true">
                        <xf:output id="output3" value="."/>
                    </xf:repeat>
                    <xf:repeat id="repeat4" ref="instance('instance4')/row" xxf:dnd="true">
                        <xf:output id="output4" value="."/>
                    </xf:repeat>
                    <xf:repeat id="repeat5" ref="instance('instance5')/row" xxf:dnd="true">
                        <xf:output id="output5" value="."/>
                    </xf:repeat>
                    <xf:repeat id="repeat6" ref="instance('instance6')/row" xxf:dnd="true">
                        <xf:output id="output6" value="."/>
                    </xf:repeat>

                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance1" model-id="model">
                                <instance>
                                    <row>row2</row>
                                    <row>row1</row>
                                    <row>row3</row>
                                </instance>
                            </instance>
                            <instance id="instance2" model-id="model">
                                <instance>
                                    <row>row2</row>
                                    <row>row3</row>
                                    <row>row1</row>
                                </instance>
                            </instance>
                            <instance id="instance3" model-id="model">
                                <instance>
                                    <row>row2</row>
                                    <row>row1</row>
                                    <row>row3</row>
                                </instance>
                            </instance>
                            <instance id="instance4" model-id="model">
                                <instance>
                                    <row>row1</row>
                                    <row>row3</row>
                                    <row>row2</row>
                                </instance>
                            </instance>
                            <instance id="instance5" model-id="model">
                                <instance>
                                    <row>row3</row>
                                    <row>row1</row>
                                    <row>row2</row>
                                </instance>
                            </instance>
                            <instance id="instance6" model-id="model">
                                <instance>
                                    <row>row1</row>
                                    <row>row3</row>
                                    <row>row2</row>
                                </instance>
                            </instance>
                        </instances>
                        <controls>
                            <control effective-id="repeat1" index="2"/>
                            <control effective-id="repeat2" index="3"/>
                            <control effective-id="repeat3" index="2"/>
                            <control effective-id="repeat4" index="1"/>
                            <control effective-id="repeat5" index="2"/>
                            <control effective-id="repeat6" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1⊙1">
                            <xxf:value>row2</xxf:value>
                        </xxf:control>
                        <xxf:control id="output1⊙2">
                            <xxf:value>row1</xxf:value>
                        </xxf:control>
                        <xxf:control id="output1⊙3">
                            <xxf:value>row3</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2⊙1">
                            <xxf:value>row2</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2⊙2">
                            <xxf:value>row3</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2⊙3">
                            <xxf:value>row1</xxf:value>
                        </xxf:control>
                        <xxf:control id="output3⊙1">
                            <xxf:value>row2</xxf:value>
                        </xxf:control>
                        <xxf:control id="output3⊙2">
                            <xxf:value>row1</xxf:value>
                        </xxf:control>
                        <xxf:control id="output3⊙3">
                            <xxf:value>row3</xxf:value>
                        </xxf:control>
                        <xxf:control id="output4⊙1">
                            <xxf:value>row1</xxf:value>
                        </xxf:control>
                        <xxf:control id="output4⊙2">
                            <xxf:value>row3</xxf:value>
                        </xxf:control>
                        <xxf:control id="output4⊙3">
                            <xxf:value>row2</xxf:value>
                        </xxf:control>
                        <xxf:control id="output5⊙1">
                            <xxf:value>row3</xxf:value>
                        </xxf:control>
                        <xxf:control id="output5⊙2">
                            <xxf:value>row1</xxf:value>
                        </xxf:control>
                        <xxf:control id="output5⊙3">
                            <xxf:value>row2</xxf:value>
                        </xxf:control>
                        <xxf:control id="output6⊙1">
                            <xxf:value>row1</xxf:value>
                        </xxf:control>
                        <xxf:control id="output6⊙2">
                            <xxf:value>row3</xxf:value>
                        </xxf:control>
                        <xxf:control id="output6⊙3">
                            <xxf:value>row2</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Controls nested within non-relevant markup do not get xforms-enabled" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model xxf:state-handling="client" id="model">
                        <xf:instance id="instance">
                            <instance>
                                <relevant/>
                                <non-relevant>
                                    <nested-non-relevant/>
                                </non-relevant>
                            </instance>
                        </xf:instance>
                        <xf:bind ref="non-relevant" relevant="false()"/>
                        <!-- Still, that node will be non-relevant because an ancestor is non-relevant -->
                        <xf:bind ref="non-relevant/nested-non-relevant" relevant="true()"/>

                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group id="events-group">
                        <xf:insert ev:event="xforms-enabled"
                                       context="instance('events')" ref="*"
                                       origin="xf:element('event',
                                                (xf:attribute('type', event('xxf:type')),
                                                 xf:attribute('target', event('xxf:targetid'))
                                                 ))"/>

                        <!-- Everything relevant -->
                        <xf:group id="group-1-1">
                            <xf:output id="output-1-1" value="''"/>
                            <xf:output id="output-1-2" ref="relevant"/>
                            <xf:group id="group-1-2">
                                <xf:output id="output-1-3" value="''"/>
                                <xf:output id="output-1-4" ref="relevant"/>
                            </xf:group>
                        </xf:group>

                        <!-- Nothing relevant -->
                        <xf:group id="group-2-1" ref="()">
                            <xf:output id="output-2-1" value="''"/>
                            <xf:output id="output-2-2" ref="relevant"/>
                            <xf:group id="group-2-2">
                                <xf:output id="output-2-3" value="''"/>
                                <xf:output id="output-2-4" ref="relevant"/>
                            </xf:group>
                        </xf:group>

                        <!-- Nested group non-relevant by binding to non-relevant node -->
                        <xf:group id="group-3-1">
                            <xf:output id="output-3-1" value="''"/>
                            <xf:output id="output-3-2" ref="relevant"/>
                            <xf:group id="group-3-2" ref="non-relevant/nested-non-relevant">
                                <xf:output id="output-3-3" value="''"/>
                                <xf:output id="output-3-4" ref="../../relevant"/><!-- this won't change anything -->
                            </xf:group>
                        </xf:group>

                        <!-- Nested group non-relevant by binding to no node -->
                        <xf:group id="group-4-1">
                            <xf:output id="output-4-1" value="''"/>
                            <xf:output id="output-4-2" ref="relevant"/>
                            <xf:group id="group-4-2" ref="()">
                                <xf:output id="output-4-3" value="''"/>
                                <xf:output id="output-4-4" ref="../relevant"/><!-- this won't change anything -->
                            </xf:group>
                        </xf:group>

                    </xf:group>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="events" model-id="model">
                                <events>
                                    <event type="xforms-enabled" target="events-group"/>
                                    <event type="xforms-enabled" target="group-1-1"/>
                                    <event type="xforms-enabled" target="output-1-1"/>
                                    <event type="xforms-enabled" target="output-1-2"/>
                                    <event type="xforms-enabled" target="group-1-2"/>
                                    <event type="xforms-enabled" target="output-1-3"/>
                                    <event type="xforms-enabled" target="output-1-4"/>
                                    <event type="xforms-enabled" target="group-3-1"/>
                                    <event type="xforms-enabled" target="output-3-1"/>
                                    <event type="xforms-enabled" target="output-3-2"/>
                                    <event type="xforms-enabled" target="group-4-1"/>
                                    <event type="xforms-enabled" target="output-4-1"/>
                                    <event type="xforms-enabled" target="output-4-2"/>
                                </events>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="group-2-1" relevant="false"/>
                        <xxf:control id="output-2-1" relevant="false"/>
                        <xxf:control id="output-2-2" relevant="false"/>
                        <xxf:control id="group-2-2" relevant="false"/>
                        <xxf:control id="output-2-3" relevant="false"/>
                        <xxf:control id="output-2-4" relevant="false"/>
                        <xxf:control id="group-3-2" relevant="false"/>
                        <xxf:control id="output-3-3" relevant="false"/>
                        <xxf:control id="output-3-4" relevant="false"/>
                        <xxf:control id="group-4-2" relevant="false"/>
                        <xxf:control id="output-4-3" relevant="false"/>
                        <xxf:control id="output-4-4" relevant="false"/>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="No more value change event on group" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model xxf:state-handling="client" id="model">
                        <xf:instance id="instance">
                            <instance>
                                <value/>
                                <constant>constant</constant>
                            </instance>
                        </xf:instance>

                        <xf:setvalue ev:event="xforms-ready" ref="value">new</xf:setvalue>

                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group id="events-group">
                        <xf:insert ev:event="xforms-value-changed"
                                       context="instance('events')" ref="*"
                                       origin="xf:element('event',
                                                (xf:attribute('type', event('xxf:type')),
                                                 xf:attribute('target', event('xxf:targetid'))
                                                 ))"/>

                        <!-- Must not get event -->
                        <xf:group id="group-1"/>
                        <!-- Must get event -->
                        <xf:group id="group-2" ref="value"/>
                        <!-- Must not get event -->
                        <xf:group id="group-3" ref="constant"/>

                    </xf:group>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <instance>
                                    <value>new</value>
                                    <constant>constant</constant>
                                </instance>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="No more value change event on switch" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model xxf:state-handling="client" id="model">
                        <xf:instance id="instance">
                            <instance>
                                <value/>
                                <constant>constant</constant>
                            </instance>
                        </xf:instance>

                        <xf:setvalue ev:event="xforms-ready" ref="value">new</xf:setvalue>

                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group id="events-group">
                        <xf:insert ev:event="xforms-value-changed"
                                       context="instance('events')" ref="*"
                                       origin="xf:element('event',
                                                (xf:attribute('type', event('xxf:type')),
                                                 xf:attribute('target', event('xxf:targetid'))
                                                 ))"/>

                        <!-- Must not get event -->
                        <xf:switch id="switch-1">
                            <xf:case id="case-1">Case 1</xf:case>
                        </xf:switch>
                        <!-- Must get event -->
                        <xf:switch id="switch-2" ref="value">
                            <xf:case id="case-2">Case 2</xf:case>
                        </xf:switch>
                        <!-- Must not get event -->
                        <xf:switch id="switch-3" ref="constant">
                            <xf:case id="case-3">Case 3</xf:case>
                        </xf:switch>

                    </xf:group>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <instance>
                                    <value>new</value>
                                    <constant>constant</constant>
                                </instance>
                            </instance>
                        </instances>
                        <controls>
                            <control effective-id="switch-1" case-id="case-1"/>
                            <control effective-id="switch-2" case-id="case-2"/>
                            <control effective-id="switch-3" case-id="case-3"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="switch-1">
                            <xxf:case id="case-1" visibility="visible"/>
                        </xxf:control>
                        <xxf:control id="switch-2">
                            <xxf:case id="case-2" visibility="visible"/>
                        </xxf:control>
                        <xxf:control id="switch-3">
                            <xxf:case id="case-3" visibility="visible"/>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Value change event on output" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model xxf:state-handling="client" id="model">
                        <xf:instance id="instance">
                            <instance>
                                <value/>
                                <constant>constant</constant>
                            </instance>
                        </xf:instance>

                        <xf:setvalue ev:event="xforms-ready" ref="value">new</xf:setvalue>

                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group id="events-group">
                        <xf:insert ev:event="xforms-value-changed"
                                       context="instance('events')" ref="*"
                                       origin="xf:element('event',
                                                (xf:attribute('type', event('xxf:type')),
                                                 xf:attribute('target', event('xxf:targetid'))
                                                 ))"/>

                        <xf:output id="output-1" value="value"/>
                        <xf:output id="output-2" ref="value"/>
                        <xf:output id="output-3" value="constant"/>
                        <xf:output id="output-4" ref="constant"/>

                    </xf:group>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <instance>
                                    <value>new</value>
                                    <constant>constant</constant>
                                </instance>
                            </instance>
                            <instance id="events" model-id="model">
                                <events>
                                    <event type="xforms-value-changed" target="output-1"/>
                                    <event type="xforms-value-changed" target="output-2"/>
                                </events>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output-1">
                            <xxf:value>new</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-2">
                            <xxf:value>new</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-3">
                            <xxf:value>constant</xxf:value>
                        </xxf:control>
                        <xxf:control id="output-4">
                            <xxf:value>constant</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Event listener on xf:repeat" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <values>
                                <value>1</value>
                                <value>2</value>
                                <value>3</value>
                                <value>4</value>
                            </values>
                        </xf:instance>
                        <xf:instance id="changes">
                            <changes/>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <!-- Insert a node: this will immediately cause a repeat nodeset change -->
                            <xf:insert ref="value" origin="xf:element('value', count(../value) + 1)"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:repeat ref="value" id="my-repeat">
                        <xf:setvalue ev:event="xxforms-nodeset-changed" ref="instance('changes')" value="count(context()/../value)"/>
                    </xf:repeat>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <values>
                                    <value>1</value>
                                    <value>2</value>
                                    <value>3</value>
                                    <value>4</value>
                                    <value>5</value>
                                </values>
                            </instance>
                            <instance id="changes" model-id="model">
                                <changes>5</changes>
                            </instance>
                        </instances>
                        <controls>
                            <control effective-id="my-repeat" index="5"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <!-- NOTE: This test is disabled because as of 2009-10 we can't run the setvalue within an empty context. -->
    <test description="Event listener on xf:repeat when node-set becomes empty" name="oxf:pipeline" exclude="true">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <values>
                                <dummy/>
                                <value>1</value>
                                <value>2</value>
                                <value>3</value>
                                <value>4</value>
                            </values>
                        </xf:instance>
                        <xf:instance id="changes">
                            <changes/>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <!-- Delete all nodes: this will immediately cause a repeat nodeset change  -->
                            <xf:delete ref="value"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:repeat ref="value" id="my-repeat">
                        <xf:setvalue ev:event="xxforms-nodeset-changed" ref="instance('changes')">Got it!</xf:setvalue>
                    </xf:repeat>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <values>
                                    <dummy/>
                                </values>
                            </instance>
                            <instance id="changes" model-id="model">
                                <changes>Got it!</changes>
                            </instance>
                        </instances>
                        <controls>
                            <control effective-id="my-repeat" index="0"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Support for ev:target='#observer'" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <xf:dispatch name="foo" targetid="group2"/>
                            <xf:dispatch name="bar" targetid="group3"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
                <xh:body>

                    <xf:group id="group1">
                        <!-- Record bubbling events -->
                        <xf:insert ev:event="foo bar"
                                       context="instance('events')" ref="*"
                                       origin="xf:element('handler1-event',
                                                (xf:attribute('type', event('xxf:type')),
                                                 xf:attribute('target', event('xxf:targetid'))))"/>

                        <xf:group id="group2">
                            <!-- Record only if target is observer -->
                            <xf:insert ev:event="foo bar" ev:target="#observer"
                                           context="instance('events')" ref="*"
                                           origin="xf:element('handler2-event',
                                                    (xf:attribute('type', event('xxf:type')),
                                                     xf:attribute('target', event('xxf:targetid'))))"/>

                            <!-- Record if target is observer OR group3 -->
                            <xf:insert ev:event="foo bar" ev:target="#observer group3"
                                           context="instance('events')" ref="*"
                                           origin="xf:element('handler3-event',
                                                    (xf:attribute('type', event('xxf:type')),
                                                     xf:attribute('target', event('xxf:targetid'))))"/>

                            <xf:group id="group3">
                                <!-- Record only if target is observer -->
                                <xf:insert ev:event="foo bar" ev:target="#observer"
                                               context="instance('events')" ref="*"
                                               origin="xf:element('handler4-event',
                                                        (xf:attribute('type', event('xxf:type')),
                                                         xf:attribute('target', event('xxf:targetid'))))"/>
                            </xf:group>

                        </xf:group>
                    </xf:group>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="events" model-id="model">
                                <events>
                                    <handler2-event type="foo" target="group2"/>
                                    <handler3-event type="foo" target="group2"/>
                                    <handler1-event type="foo" target="group2"/>
                                    <handler4-event type="bar" target="group3"/>
                                    <handler3-event type="bar" target="group3"/>
                                    <handler1-event type="bar" target="group3"/>
                                </events>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Client events reach proper repeat iteration if repeat rows are moved" name="oxf:pipeline">
        <input name="config" href="wrap-server.xpl"/>
        <!--
            The two events must end up on controls on the same repeat iteration, even though the first
            event causes its iteration to move.
         -->
        <input name="action">
            <xxf:action>
                <xxf:event name="xxforms-value" source-control-id="plate⊙3"><xxf:property name="value">777</xxf:property></xxf:event>
                <xxf:event name="xxforms-value" source-control-id="leased⊙3"><xxf:property name="value">leased</xxf:property></xxf:event>
            </xxf:action>
        </input>
        <input name="controls">
            <controls>
                <xf:repeat ref="exf:sort(vehicle, 'string(plate-number)', 'text', 'descending')" id="repeat">
                    <xf:input ref="plate-number" id="plate"/>
                    <xf:select ref="leased" appearance="full" id="leased">
                        <xf:item>
                            <xf:label/>
                            <xf:value>leased</xf:value>
                        </xf:item>
                    </xf:select>
                </xf:repeat>
            </controls>
        </input>
        <input name="models">
            <models>
                <xf:model id="model" xxf:encrypt-item-values="false">
                    <xf:instance id="instance"/>
                </xf:model>
            </models>
        </input>
        <input name="instances">
            <instances>
                <instance id="instance" model-id="model">
                    <vehicles>
                        <vehicle>
                            <plate-number>111</plate-number>
                            <leased/>
                        </vehicle>
                        <vehicle>
                            <plate-number>333</plate-number>
                            <leased/>
                        </vehicle>
                        <vehicle>
                            <plate-number>666</plate-number>
                            <leased/>
                        </vehicle>
                    </vehicles>
                </instance>
            </instances>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <vehicles>
                                    <vehicle>
                                        <plate-number>777</plate-number>
                                        <leased>leased</leased>
                                    </vehicle>
                                    <vehicle>
                                        <plate-number>333</plate-number>
                                        <leased/>
                                    </vehicle>
                                    <vehicle>
                                        <plate-number>666</plate-number>
                                        <leased/>
                                    </vehicle>
                                </vehicles>
                            </instance>
                        </instances>
                        <controls>
                            <control effective-id="repeat" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="plate⊙1">
                            <xxf:value>777</xxf:value>
                        </xxf:control>
                        <xxf:control id="leased⊙1">
                            <xxf:value>leased</xxf:value>
                        </xxf:control>
                        <xxf:control id="plate⊙2">
                            <xxf:value>666</xxf:value>
                        </xxf:control>
                        <xxf:control id="plate⊙3">
                            <xxf:value>333</xxf:value>
                        </xxf:control>
                        <xxf:control id="leased⊙3">
                            <xxf:value/>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Relevance / readonly state of controls is updated upon Ajax request" name="oxf:pipeline">
        <input name="config" href="wrap-server.xpl"/>
        <!--
            The first event doesn't cause the other controls to block incoming values. So all first three
            "good" values must make it into the instance. But value "42" blocks the other controls, so the
            "bad" values must be rejected.
         -->
        <input name="action">
            <xxf:action>
                <xxf:event name="xxforms-value" source-control-id="input1"><xxf:property name="value">888</xxf:property></xxf:event>
                <xxf:event name="xxforms-value" source-control-id="input2"><xxf:property name="value">Good value 2</xxf:property></xxf:event>
                <xxf:event name="xxforms-value" source-control-id="input3"><xxf:property name="value">Good value 3</xxf:property></xxf:event>
                <xxf:event name="xxforms-value" source-control-id="input1"><xxf:property name="value">42</xxf:property></xxf:event>
                <xxf:event name="xxforms-value" source-control-id="input2"><xxf:property name="value">Bad value 2</xxf:property></xxf:event>
                <xxf:event name="xxforms-value" source-control-id="input3"><xxf:property name="value">Bad value 3</xxf:property></xxf:event>
            </xxf:action>
        </input>
        <input name="controls">
            <controls>
                <xf:input id="input1" ref="value1"/>
                <xf:input id="input2" ref="value2"/>
                <xf:input id="input3" ref="value3"/>
            </controls>
        </input>
        <input name="models">
            <models>
                <xf:model id="model" xxf:encrypt-item-values="false">
                    <xf:instance id="instance"/>
                    <xf:bind id="b1" ref="value2" relevant="../value1 != '42'"/>
                    <xf:bind id="b2" ref="value3" readonly="../value1 = '42'"/>
                </xf:model>
            </models>
        </input>
        <input name="instances">
            <instances>
                <instance id="instance" model-id="model">
                    <form>
                        <value1/>
                        <value2/>
                        <value3/>
                    </form>
                </instance>
            </instances>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <form>
                                    <value1>42</value1>
                                    <value2>Good value 2</value2>
                                    <value3>Good value 3</value3>
                                </form>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="input2" relevant="false">
                            <xxf:value/>
                        </xxf:control>
                        <xxf:control id="input3" readonly="true">
                            <xxf:value>Good value 3</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Test of capture, target, and bubbling phases" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance>
                                <name>Ada</name>
                            </instance>
                        </xf:instance>

                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <xf:dispatch name="my-event" targetid="my-input"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group id="my-group">
                        <xf:insert ev:event="my-event" ev:phase="capture"
                                       context="instance('events')" ref="*"
                                       origin="xf:element('group1',
                                                (xf:attribute('type', event('xxf:type')),
                                                 xf:attribute('phase', event('xxf:phase')),
                                                 xf:attribute('target', event('xxf:targetid'))))"/>
                        <xf:insert ev:event="my-event" ev:phase="target"
                                       context="instance('events')" ref="*"
                                       origin="xf:element('group2',
                                                (xf:attribute('type', event('xxf:type')),
                                                 xf:attribute('phase', event('xxf:phase')),
                                                 xf:attribute('target', event('xxf:targetid'))))"/>
                        <xf:insert ev:event="my-event" ev:phase="bubbling"
                                       context="instance('events')" ref="*"
                                       origin="xf:element('group3',
                                                (xf:attribute('type', event('xxf:type')),
                                                 xf:attribute('phase', event('xxf:phase')),
                                                 xf:attribute('target', event('xxf:targetid'))))"/>
                        <xf:insert ev:event="my-event" ev:phase="default"
                                       context="instance('events')" ref="*"
                                       origin="xf:element('group4',
                                                (xf:attribute('type', event('xxf:type')),
                                                 xf:attribute('phase', event('xxf:phase')),
                                                 xf:attribute('target', event('xxf:targetid'))))"/>

                        <xf:input id="my-input" ref="name">
                            <xf:insert ev:event="my-event" ev:phase="capture"
                                           context="instance('events')" ref="*"
                                           origin="xf:element('input1',
                                                    (xf:attribute('type', event('xxf:type')),
                                                     xf:attribute('phase', event('xxf:phase')),
                                                     xf:attribute('target', event('xxf:targetid'))))"/>
                            <xf:insert ev:event="my-event" ev:phase="target"
                                           context="instance('events')" ref="*"
                                           origin="xf:element('input2',
                                                    (xf:attribute('type', event('xxf:type')),
                                                     xf:attribute('phase', event('xxf:phase')),
                                                     xf:attribute('target', event('xxf:targetid'))))"/>
                            <xf:insert ev:event="my-event" ev:phase="bubbling"
                                           context="instance('events')" ref="*"
                                           origin="xf:element('input3',
                                                    (xf:attribute('type', event('xxf:type')),
                                                     xf:attribute('phase', event('xxf:phase')),
                                                     xf:attribute('target', event('xxf:targetid'))))"/>
                            <xf:insert ev:event="my-event" ev:phase="default"
                                           context="instance('events')" ref="*"
                                           origin="xf:element('input4',
                                                    (xf:attribute('type', event('xxf:type')),
                                                     xf:attribute('phase', event('xxf:phase')),
                                                     xf:attribute('target', event('xxf:targetid'))))"/>
                        </xf:input>
                    </xf:group>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="events" model-id="model">
                                <events>
                                    <group1 type="my-event" phase="capture" target="my-input"/>
                                    <input2 type="my-event" phase="target" target="my-input"/>
                                    <input4 type="my-event" phase="target" target="my-input"/>
                                    <group3 type="my-event" phase="bubbling" target="my-input"/>
                                    <group4 type="my-event" phase="bubbling" target="my-input"/>
                                </events>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-input">
                            <xxf:value>Ada</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Event listener on #document" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <values>
                                <value/>
                            </values>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <xf:dispatch name="my-event" targetid="my-input"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:var name="answer" value="42"/>
                    <xf:setvalue ev:observer="#document" ev:event="my-event" ref="value" value="$answer"/>

                    <xf:input id="my-input" ref="value"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <values>
                                    <value>42</value>
                                </values>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-input">
                            <xxf:value>42</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Event listener on #document resolves index()" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <values>
                                <value>1</value>
                                <value>2</value>
                                <value>3</value>
                                <value>4</value>
                                <result/>
                            </values>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <xf:dispatch name="my-event" targetid="my-repeat"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:setvalue ev:observer="#document" ev:event="my-event" ref="result" value="index('my-repeat')"/>

                    <xf:repeat id="my-repeat" ref="value" startindex="3"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <values>
                                    <value>1</value>
                                    <value>2</value>
                                    <value>3</value>
                                    <value>4</value>
                                    <result>3</result>
                                </values>
                            </instance>
                        </instances>
                        <controls>
                            <control effective-id="my-repeat" index="3"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Top-level event listener implicitly listens on #document" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <values>
                                <value/>
                            </values>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <xf:dispatch name="my-event" targetid="my-input"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:var name="answer" value="42"/>
                    <xf:setvalue ev:event="my-event" ref="value" value="$answer"/>

                    <xf:input id="my-input" ref="value"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <values>
                                    <value>42</value>
                                </values>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-input">
                            <xxf:value>42</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="keypress event modifiers and text filtering" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <values>
                                <value/>
                            </values>
                        </xf:instance>

                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <xf:dispatch name="keydown" targetid="my-group">
                                <xf:property name="modifiers" value="'control alt'"/>
                                <xf:property name="text" value="'v'"/>
                            </xf:dispatch>
                            <xf:dispatch name="keydown" targetid="my-group">
                                <xf:property name="modifiers" value="'control alt'"/>
                                <xf:property name="text" value="'w'"/>
                            </xf:dispatch>
                            <xf:dispatch name="keydown" targetid="my-group">
                                <xf:property name="modifiers" value="'shift'"/>
                                <xf:property name="text" value="'v'"/>
                            </xf:dispatch>
                        </xf:action>

                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group id="my-group">
                        <xf:insert
                            event="keypress"
                            xxf:modifiers="control alt"
                            xxf:text="v"
                            context="instance('events')"
                            ref="*"
                            origin="xf:element('handler1')"/>
                        <xf:insert
                            event="keypress"
                            xxf:modifiers="shift"
                            xxf:text="w"
                            context="instance('events')"
                            ref="*"
                            origin="xf:element('handler2')"/>
                        <xf:insert
                            event="keypress"
                            xxf:modifiers="control alt"
                            context="instance('events')"
                            ref="*"
                            origin="xf:element('handler3')"/>
                        <xf:insert
                            event="keypress"
                            xxf:text="v"
                            context="instance('events')"
                            ref="*"
                            origin="xf:element('handler4')"/>
                    </xf:group>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="events" model-id="model">
                                <events>
                                    <handler1/>
                                    <handler3/>
                                    <handler3/>
                                </events>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:show produces client requests to show dialogs" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xxf:show ev:event="xforms-ready" dialog="default-dialog"/>
                        <xxf:show ev:event="xforms-ready" dialog="minimal-dialog"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xxf:dialog id="minimal-dialog" appearance="minimal" neighbor="show-minimal-dialog">
                        Body of the dialog.
                    </xxf:dialog>
                    <xxf:dialog id="default-dialog">
                        Body of the dialog.
                    </xxf:dialog>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="minimal-dialog" visible="true" constrain="true"/>
                            <control effective-id="default-dialog" visible="true" constrain="true"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:dialog id="minimal-dialog" visibility="visible" neighbor="show-minimal-dialog" constrain="true"/>
                        <xxf:dialog id="default-dialog" visibility="visible" constrain="true"/>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:toggle produces client requests to show case" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:toggle ev:event="xforms-ready" case="second-case"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:switch id="switch">
                        <xf:case id="first-case"/>
                        <xf:case id="second-case"/>
                    </xf:switch>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="switch" case-id="second-case"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="switch">
                            <xxf:case id="second-case" visibility="visible"/>
                            <xxf:case id="first-case" visibility="hidden"/>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="XForms 1.1 switch enabled: dispatches xforms-enabled/xforms-disabled events" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model" xxf:xforms11-switch="true">
                        <xf:instance id="instance">
                            <instance>
                                <value>42</value>
                                <value>43</value>
                            </instance>
                        </xf:instance>

                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>

                        <!-- Toggle -->
                        <xf:toggle ev:event="xforms-ready" case="case2"/>
                    </xf:model>
                </xh:head>
                <xh:body>

                    <xf:insert
                        event="xforms-enabled xforms-disabled xforms-select xforms-deselect xxforms-visible xxforms-hidden xforms-value-changed xxforms-constraints-changed xforms-valid xforms-invalid"
                        context="instance('events')"
                        ref="*"
                        origin="
                            xf:element(
                                'event',
                                (
                                    xf:attribute('type', event('xxf:type')),
                                    xf:attribute('target', event('xxf:targetid')),
                                    xf:attribute('indexes', string-join(event('xxf:repeat-indexes'), ' '))
                                )
                            )"/>

                    <xf:switch id="my-switch">
                        <xf:case id="case1">
                            <xf:input id="input1" ref="value[1]"/>
                        </xf:case>
                        <xf:case id="case2">
                            <xf:input id="input2" ref="value[2]"/>
                        </xf:case>
                    </xf:switch>

                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="events" model-id="model">
                                <events>
                                    <event type="xforms-enabled" target="my-switch" indexes=""/>
                                    <event type="xxforms-visible" target="my-switch" indexes=""/>
                                    <event type="xforms-enabled" target="input1" indexes=""/>
                                    <event type="xxforms-visible" target="input1" indexes=""/>
                                    <event type="xforms-deselect" target="case1" indexes=""/>
                                    <event type="xxforms-hidden" target="input1" indexes=""/>
                                    <event type="xforms-disabled" target="input1" indexes=""/>
                                    <event type="xforms-enabled" target="input2" indexes=""/>
                                    <event type="xxforms-visible" target="input2" indexes=""/>
                                    <event type="xforms-select" target="case2" indexes=""/>
                                </events>
                            </instance>
                        </instances>
                        <controls>
                            <control effective-id="my-switch" case-id="case2"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-switch">
                            <xxf:case id="case2" visibility="visible"/>
                            <xxf:case id="case1" visibility="hidden"/>
                        </xxf:control>
                        <xxf:control id="input1" relevant="false"/>
                        <xxf:control id="input2">
                            <xxf:value>43</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="XForms 1.1 switch disabled: dispatches xforms-enabled/xforms-disabled events" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model" xxf:xforms11-switch="false">
                        <xf:instance id="instance">
                            <instance>
                                <value>42</value>
                                <value>43</value>
                            </instance>
                        </xf:instance>

                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>

                        <!-- Toggle -->
                        <xf:toggle ev:event="xforms-ready" case="case2"/>
                    </xf:model>
                </xh:head>
                <xh:body>

                    <xf:insert
                        event="xforms-enabled xforms-disabled xforms-select xforms-deselect xxforms-visible xxforms-hidden xforms-value-changed xxforms-constraints-changed xforms-valid xforms-invalid"
                        context="instance('events')"
                        ref="*"
                        origin="
                            xf:element(
                                'event',
                                (
                                    xf:attribute('type', event('xxf:type')),
                                    xf:attribute('target', event('xxf:targetid')),
                                    xf:attribute('indexes', string-join(event('xxf:repeat-indexes'), ' '))
                                )
                            )"/>

                    <xf:switch id="my-switch">
                        <xf:case id="case1">
                            <xf:input id="input1" ref="value[1]"/>
                        </xf:case>
                        <xf:case id="case2">
                            <xf:input id="input2" ref="value[2]"/>
                        </xf:case>
                    </xf:switch>

                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="events" model-id="model">
                                <events>
                                    <event type="xforms-enabled" target="my-switch" indexes=""/>
                                    <event type="xxforms-visible" target="my-switch" indexes=""/>
                                    <event type="xforms-enabled" target="input1" indexes=""/>
                                    <event type="xxforms-visible" target="input1" indexes=""/>
                                    <event type="xforms-enabled" target="input2" indexes=""/>
                                    <event type="xforms-deselect" target="case1" indexes=""/>
                                    <event type="xforms-select" target="case2" indexes=""/>
                                    <event type="xxforms-hidden" target="input1" indexes=""/>
                                    <event type="xxforms-visible" target="input2" indexes=""/>
                                </events>
                            </instance>
                        </instances>
                        <controls>
                            <control effective-id="my-switch" case-id="case2"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-switch">
                            <xxf:case id="case2" visibility="visible"/>
                            <xxf:case id="case1" visibility="hidden"/>
                        </xxf:control>
                        <xxf:control id="input1">
                            <xxf:value>42</xxf:value>
                        </xxf:control>
                        <xxf:control id="input2">
                            <xxf:value>43</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Dialog dispatches xforms-enabled/xforms-disabled events" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model" xxf:xforms11-switch="true">
                        <xf:instance id="instance">
                            <instance>
                                <value>42</value>
                                <value>43</value>
                            </instance>
                        </xf:instance>

                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>

                        <!-- Show/hide -->
                        <xf:action ev:event="xforms-ready">
                            <xxf:show dialog="my-dialog"/>
                            <xxf:hide dialog="my-dialog"/>
                        </xf:action>
                    </xf:model>
                </xh:head>
                <xh:body>

                    <!-- TODO: we cannot dispatch xxforms-dialog-open to my-dialog before it is enabled -->

                    <xf:insert ev:event="xforms-enabled xforms-disabled xxforms-dialog-open xxforms-dialog-close"
                                   context="instance('events')" ref="*"
                                   origin="xf:element('event',
                                            (xf:attribute('type', event('xxf:type')),
                                             xf:attribute('target', event('xxf:targetid')),
                                             xf:attribute('indexes', string-join(event('xxf:repeat-indexes'), ' '))))"/>

                    <xxf:dialog id="my-dialog">
                        <xf:input id="input1" ref="value[1]"/>
                        <xf:input id="input2" ref="value[2]"/>
                    </xxf:dialog>

                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="events" model-id="model">
                                <events>
                                    <event type="xforms-enabled" target="input1" indexes=""/>
                                    <event type="xforms-enabled" target="input2" indexes=""/>
                                    <event type="xxforms-dialog-open" target="my-dialog" indexes=""/>
                                    <event type="xforms-disabled" target="input1" indexes=""/>
                                    <event type="xforms-disabled" target="input2" indexes=""/>
                                    <event type="xxforms-dialog-close" target="my-dialog" indexes=""/>
                                </events>
                            </instance>
                        </instances>
                        <controls>
                            <control effective-id="my-dialog" visible="false"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-dialog" visited="true"/>
                        <xxf:dialog id="my-dialog" visibility="hidden"/>
                        <xxf:control id="input1" visited="true" relevant="false"/>
                        <xxf:control id="input2" relevant="false"/>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Value change event on variable" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model xxf:state-handling="client" id="model">
                        <xf:instance id="instance">
                            <instance>
                                <value>old</value>
                                <constant>constant</constant>
                                <e1>tomato</e1>
                                <e2>tomato</e2>
                                <e3>mozzarella</e3>
                            </instance>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <xf:setvalue ref="value">new</xf:setvalue>

                        </xf:action>

                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group id="events-group">
                        <xf:insert ev:event="xforms-value-changed"
                                       context="instance('events')" ref="*"
                                       origin="xf:element('event',
                                                (xf:attribute('type', event('xxf:type')),
                                                 xf:attribute('target', event('xxf:targetid'))
                                                 ))"/>

                        <!-- Must never get event as value is constant-->
                        <xf:var id="v1" name="v1">foobar</xf:var>
                        <!-- Must get event -->
                        <xf:var id="v2a" name="v2a" value="value/string()"/>
                        <!-- Must not get event -->
                        <xf:var id="v2b" name="v2b" value="value"/>
                        <!-- Must not get event -->
                        <xf:var id="v3a" name="v3a" value="constant/string()"/>
                        <xf:var id="v3b" name="v3b" value="constant"/>
                        <!-- Must get event -->
                        <xf:var id="v4a" name="v4a" value="if (value = 'old') then e1 else e2"/>
                        <!-- Must not get event -->
                        <xf:var id="v4b" name="v4b" value="(if (value = 'old') then e1 else e2)/string()"/>
                        <!-- Must get event -->
                        <xf:var id="v5a" name="v5a" value="if (value = 'old') then e1 else e3"/>
                        <xf:var id="v5b" name="v5b" value="(if (value = 'old') then e1 else e3)/string()"/>
                        <!-- Must get event -->
                        <xf:var id="v6" name="v6" value="if (value = 'old') then (e1, e2) else (e1, e2, e3)"/>
                        <xf:var id="v7" name="v7" value="if (value = 'old') then 'tomato' else 42"/>

                    </xf:group>
                    <!-- Must get event -->
                    <xf:var id="v8" name="v8" value="value/string()">
                        <xf:insert ev:event="xforms-value-changed"
                                       context="instance('events')" ref="*"
                                       origin="xf:element('event',
                                                (xf:attribute('type', event('xxf:type')),
                                                 xf:attribute('target', event('xxf:targetid'))
                                                 ))"/>
                        <xf:action ev:event="#all" ev:propagate="stop"/>
                    </xf:var>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <instance>
                                    <value>new</value>
                                    <constant>constant</constant>
                                    <e1>tomato</e1>
                                    <e2>tomato</e2>
                                    <e3>mozzarella</e3>
                                </instance>
                            </instance>
                            <instance id="events" model-id="model">
                                <events>
                                    <event type="xforms-value-changed" target="v2a"/>
                                    <event type="xforms-value-changed" target="v4a"/>
                                    <event type="xforms-value-changed" target="v5a"/>
                                    <event type="xforms-value-changed" target="v5b"/>
                                    <event type="xforms-value-changed" target="v6"/>
                                    <event type="xforms-value-changed" target="v7"/>
                                    <event type="xforms-value-changed" target="v8"/>
                                </events>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xf:setvalue upon xforms-enabled dispatches proper xforms-value-change event" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model" xxf:xforms11-switch="false">
                        <xf:instance id="instance">
                            <instance>
                                <value>42</value>
                            </instance>
                        </xf:instance>

                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>

                        <!-- Toggle -->
                        <xf:toggle ev:event="xforms-ready" case="case2"/>
                    </xf:model>
                </xh:head>
                <xh:body>

                    <xf:insert ev:event="xforms-enabled xforms-value-changed"
                                   context="instance('events')" ref="*"
                                   origin="xf:element('event',
                                            (xf:attribute('type', event('xxf:type')),
                                             xf:attribute('target', event('xxf:targetid')),
                                             xf:attribute('indexes', string-join(event('xxf:repeat-indexes'), ' '))))"/>

                    <!-- 1. Bindings and values are evaluated -->
                    <xf:group id="my-group">
                        <!-- 2. xforms-enabled -->
                        <xf:setvalue ev:event="xforms-enabled" ev:target="#observer" ref="value">43</xf:setvalue>
                        <!--<xf:refresh ev:event="xforms-enabled" ev:target="#observer"/>-->

                        <!-- 3. xforms-enabled -->
                        <!-- 4. xforms-value-changed because value is different than it was during initial evaluation -->
                        <xf:input id="my-input" ref="value"/>
                    </xf:group>

                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <instance>
                                    <value>43</value>
                                </instance>
                            </instance>
                            <instance id="events" model-id="model">
                                <events>
                                    <event type="xforms-enabled" target="my-group" indexes=""/>
                                    <event type="xforms-enabled" target="my-input" indexes=""/>
                                    <event type="xforms-value-changed" target="my-input" indexes=""/>
                                </events>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-input">
                            <xxf:value>43</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xf:refresh upon xforms-enabled dispatches proper events" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model" xxf:xforms11-switch="false">
                        <xf:instance id="instance">
                            <instance>
                                <value>42</value>
                            </instance>
                        </xf:instance>

                        <!-- TEST: Events to gather -->
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>

                        <!-- Toggle -->
                        <xf:toggle ev:event="xforms-ready" case="case2"/>
                    </xf:model>
                </xh:head>
                <xh:body>

                    <xf:insert
                        event="xforms-enabled xforms-disabled xforms-select xforms-deselect xxforms-visible xxforms-hidden xforms-value-changed xxforms-constraints-changed xforms-valid xforms-invalid"
                        context="instance('events')"
                        ref="*"
                        origin="
                            xf:element(
                                'event',
                                (
                                    xf:attribute('type', event('xxf:type')),
                                    xf:attribute('target', event('xxf:targetid')),
                                    xf:attribute('indexes', string-join(event('xxf:repeat-indexes'), ' '))
                                )
                            )"/>

                    <!-- 1. Bindings and values are evaluated -->
                    <xf:group id="my-group">
                        <!-- 2. xforms-enabled -->
                        <xf:setvalue ev:event="xforms-enabled" ev:target="#observer" ref="value">43</xf:setvalue>
                        <!-- 3. Bindings and values are re-evaluated -->
                        <xf:refresh ev:event="xforms-enabled" ev:target="#observer"/>

                        <!-- 4. xforms-enabled and NO xforms-value-changed because value at xforms-enabled time is read after setvalue -->
                        <xf:input id="my-input" ref="value"/>
                    </xf:group>

                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <instance>
                                    <value>43</value>
                                </instance>
                            </instance>
                            <instance id="events" model-id="model">
                                <events>
                                    <event type="xforms-enabled" target="my-input" indexes=""/>
                                    <event type="xxforms-visible" target="my-input" indexes=""/>
                                    <event type="xforms-enabled" target="my-group" indexes=""/>
                                    <event type="xxforms-visible" target="my-group" indexes=""/>
                                </events>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-input">
                            <xxf:value>43</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Destruction events upon iteration removal" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance><text/></instance>
                        </xf:instance>
                        <xf:delete ev:event="xforms-ready" ref="text"/>
                    </xf:model>
                    <xf:model id="events-model">
                        <!-- TEST: Events to gather -->
                        <xf:instance id="events-instance">
                            <events/>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>

                    <xf:insert
                        event="xforms-enabled xforms-disabled xforms-select xforms-deselect xxforms-visible xxforms-hidden xforms-value-changed xxforms-constraints-changed xforms-valid xforms-invalid"
                        model="events-model"
                        context="."
                        ref="*"
                        origin="
                            xf:element(
                                'event',
                                (
                                    xf:attribute('type', event('xxf:type')),
                                    xf:attribute('target', event('xxf:targetid')),
                                    xf:attribute('indexes', string-join(event('xxf:repeat-indexes'), ' '))
                                )
                            )"/>

                    <xf:repeat ref="text" id="my-repeat">
                        <xf:input ref="." id="my-input"/>
                        <xf:trigger id="my-trigger"/>
                    </xf:repeat>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <instance/>
                            </instance>
                            <instance id="events-instance" model-id="events-model">
                                <events>
                                     <event type="xforms-enabled" target="my-repeat" indexes=""/>
                                     <event type="xforms-enabled" target="my-input" indexes="1"/>
                                     <event type="xxforms-visible" target="my-input" indexes="1"/>
                                     <event type="xforms-enabled" target="my-trigger" indexes="1"/>
                                     <event type="xxforms-visible" target="my-trigger" indexes="1"/>
                                     <event type="xxforms-hidden" target="my-input" indexes="1"/>
                                     <event type="xforms-disabled" target="my-input" indexes="1"/>
                                     <event type="xxforms-hidden" target="my-trigger" indexes="1"/>
                                     <event type="xforms-disabled" target="my-trigger" indexes="1"/>
                                     <event type="xforms-disabled" target="my-repeat" indexes=""/>
                                </events>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="[ #315922 ] Event handler nested within bound node causes errors" name="oxf:pipeline">
        <!-- See: http://forge.ow2.org/tracker/index.php?func=detail&aid=315922&group_id=168&atid=350207 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:dispatch ev:event="xforms-ready" name="DOMActivate" targetid="my-button"/>
                    </xf:model>
                    <xbl:xbl>
                        <xbl:binding element="fr|foo">
                            <xbl:template>
                                <!-- Copy all the content -->
                                <xbl:content/>
                            </xbl:template>
                        </xbl:binding>
                    </xbl:xbl>
                </xh:head>
                <xh:body>
                    <fr:foo id="my-foo">
                        <xh:div>
                            <!-- Handler is nested in XBL bound node and its parent XForms control doesn't have an id -->
                            <xf:group>
                                <xf:message ev:event="DOMActivate" ev:observer="my-button">I observed the outer event!</xf:message>
                            </xf:group>
                        </xh:div>
                    </fr:foo>

                    <xf:trigger id="my-button">
                        <xf:label/>
                    </xf:trigger>

                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                    <xxf:message level="modal">I observed the outer event!</xxf:message>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Nested event handler with and without ev:observer" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <values>
                                <value>41</value>
                                <value>40</value>
                            </values>
                        </xf:instance>

                        <!-- setvalue must run only once, as child of the outer handler. The nested ev:event attribute
                             is ignored. -->
                        <xf:action ev:event="xforms-model-construct-done">
                            <xf:setvalue ev:event="xforms-model-construct-done"
                                             ref="value[1]" value="xs:integer(.) + 1"/>
                        </xf:action>

                        <!-- setvalue must run twice: once as child of the outer handler, and once independently. -->
                        <xf:action ev:event="xforms-model-construct-done">
                            <xf:setvalue ev:event="xforms-model-construct-done" ev:observer="model"
                                             ref="value[2]" value="xs:integer(.) + 1"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
                <xh:body>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <values>
                                    <value>42</value>
                                    <value>42</value>
                                </values>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Dispatch to ev:target vs. target" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <values>
                                <value/>
                                <value/>
                                <value/>
                                <value/>
                                <value/>
                            </values>
                        </xf:instance>

                        <!-- Dispatch original event to trigger (so we can play with the event target) -->
                        <xf:dispatch ev:event="xforms-ready" name="foo" targetid="my-trigger"/>

                        <!-- Event handler to set a value -->
                        <xf:setvalue ev:event="setvalue" ref="value[xs:integer(event('index'))]" value="event('value')"/>

                        <!-- Various ways to handle receiving the "foo" event -->
                        <!--
                            Handle backward compatibility for <dispatch ev:event="…" ev:target="…" name="…" target="…">. In this case,
                            if the user didn't specify the `targetid` attribute, the meaning of the `target` attribute in no namespace is
                            the target of the dispatch action, not the incoming XML Events target. In this case to specify the incoming
                            XML Events target, the attribute must be qualified as `ev:target`.
                        -->
                        <xf:dispatch ev:event="foo" ev:observer="my-trigger" ev:target="my-trigger" name="setvalue" targetid="model">
                            <xf:property name="value">Use `ev:target` and `target`</xf:property>
                            <xf:property name="index" value="1"/>
                        </xf:dispatch>

                        <xf:dispatch ev:event="foo" ev:observer="my-trigger" name="setvalue" targetid="model">
                            <xf:property name="value">Use only `target`</xf:property>
                            <xf:property name="index" value="2"/>
                        </xf:dispatch>

                        <xf:dispatch ev:event="foo" ev:observer="my-trigger" ev:target="my-trigger" name="setvalue" targetid="model">
                            <xf:property name="value">Use `ev:target` and `targetid`</xf:property>
                            <xf:property name="index" value="3"/>
                        </xf:dispatch>

                        <xf:dispatch ev:event="foo" ev:observer="my-trigger" name="setvalue" targetid="model">
                            <xf:property name="value">Use only `targetid`</xf:property>
                            <xf:property name="index" value="4"/>
                        </xf:dispatch>

                        <xf:dispatch ev:event="foo" ev:observer="my-trigger" target="my-trigger" name="setvalue" targetid="model">
                            <xf:property name="value">Use `target` and `targetid`</xf:property>
                            <xf:property name="index" value="5"/>
                        </xf:dispatch>

                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group id="my-group">
                        <xf:trigger id="my-trigger"/>
                    </xf:group>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <values>
                                    <value>Use `ev:target` and `target`</value>
                                    <value>Use only `target`</value>
                                    <value>Use `ev:target` and `targetid`</value>
                                    <value>Use only `targetid`</value>
                                    <value>Use `target` and `targetid`</value>
                                </values>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="XML Events attributes in no namespace" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <values>
                                <value/>
                                <value/>
                                <value/>
                            </values>
                        </xf:instance>

                        <xf:setvalue event="xforms-ready" ref="value[1]">Use of `event`</xf:setvalue>

                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:setvalue event="xforms-ready" observer="model" ref="value[2]">Use of `event` and `observer`</xf:setvalue>
                    <xf:setvalue event="xforms-ready" observer="model" target="model" ref="value[3]">Use of `event`, `observer`, and `target`</xf:setvalue>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <values>
                                    <value>Use of `event`</value>
                                    <value>Use of `event` and `observer`</value>
                                    <value>Use of `event`, `observer`, and `target`</value>
                                </values>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#284: xforms-invalid doesn't escape the XBL control" name="oxf:pipeline">
        <!-- See: https://github.com/orbeon/orbeon-forms/issues/284 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance/>
                        </xf:instance>
                        <!-- Dispatch my-event to my-input -->
                        <xf:dispatch ev:event="xforms-ready" name="my-event" targetid="my-input"/>
                    </xf:model>
                    <xbl:xbl>
                        <xbl:binding element="fr|foo">
                            <xbl:template id="my-template">
                                <!-- This must not run because in different scope -->
                                <xf:message ev:event="my-event xforms-enabled"><xf:output value="concat('target: ', event('xxf:targetid'), ', observer: ', event('xxf:observerid'), ', event: ', event('xxf:type'))"/></xf:message>
                                <xf:group id="inner-group">
                                    <!-- This must not run because in different scope -->
                                    <xf:message ev:event="my-event xforms-enabled"><xf:output value="concat('target: ', event('xxf:targetid'), ', observer: ', event('xxf:observerid'), ', event: ', event('xxf:type'))"/></xf:message>
                                    <xf:group xxbl:scope="outer" id="outer-group">
                                        <!-- This must run -->
                                        <xf:message ev:event="my-event xforms-enabled"><xf:output value="concat('target: ', event('xxf:targetid'), ', observer: ', event('xxf:observerid'), ', event: ', event('xxf:type'))"/></xf:message>
                                        <xf:input ref="." id="my-input"/>
                                    </xf:group>
                                </xf:group>
                            </xbl:template>
                        </xbl:binding>
                    </xbl:xbl>
                </xh:head>
                <xh:body>
                    <!-- This must run -->
                    <xf:message ev:event="my-event xforms-enabled"><xf:output value="concat('target: ', event('xxf:targetid'), ', observer: ', event('xxf:observerid'), ', event: ', event('xxf:type'))"/></xf:message>
                    <fr:foo id="my-foo"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                    <xxf:message level="modal">target: my-foo, observer: #document, event: xforms-enabled</xxf:message>
                    <xxf:message level="modal">target: inner-group, observer: inner-group, event: xforms-enabled</xxf:message>
                    <xxf:message level="modal">target: inner-group, observer: my-template, event: xforms-enabled</xxf:message>
                    <xxf:message level="modal">target: outer-group, observer: outer-group, event: xforms-enabled</xxf:message>
                    <xxf:message level="modal">target: outer-group, observer: #document, event: xforms-enabled</xxf:message>
                    <xxf:message level="modal">target: my-input, observer: outer-group, event: xforms-enabled</xxf:message>
                    <xxf:message level="modal">target: my-input, observer: #document, event: xforms-enabled</xxf:message>
                    <xxf:message level="modal">target: my-input, observer: outer-group, event: my-event</xxf:message>
                    <xxf:message level="modal">target: my-input, observer: #document, event: my-event</xxf:message>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#353: NPE upon dispatching event upon xforms-model-construct" name="oxf:pipeline">
        <!-- See: https://github.com/orbeon/orbeon-forms/issues/353 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:message ev:event="xforms-model-construct">Getting there!</xf:message>
                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                    <xxf:message level="modal">Getting there!</xxf:message>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#513: Infinite loop with toggle on xxforms-invalid" name="oxf:pipeline">
        <!-- See: https://github.com/orbeon/orbeon-forms/issues/513 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model>
                        <xf:instance id="instance"><instance/></xf:instance>
                        <xf:bind ref="/instance" constraint="false()"/>
                        <!-- Toggle causes invoking deferred update behavior. Before the fix, this would cause
                             infinite recursion. -->
                        <xf:toggle ev:event="xxforms-invalid" ev:observer="instance" case="case"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:switch id="my-switch">
                        <xf:case id="case"/>
                    </xf:switch>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="my-switch" case-id="case"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-switch">
                            <xxf:case id="case" visibility="visible"/>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="No duplicate xxforms-validate/xxforms-revalidate events" name="oxf:pipeline">
        <!-- See: https://github.com/orbeon/orbeon-forms/issues/513 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance-1"><instance>valid</instance></xf:instance>
                        <xf:bind ref="instance('instance-1')" constraint=". = 'valid'"/>

                        <xf:instance id="instance-2"><instance>invalid</instance></xf:instance>
                        <xf:bind ref="instance('instance-2')" constraint=". = 'valid'"/>

                        <xf:instance id="events"><events/></xf:instance>

                        <xf:insert
                            ev:event="xxforms-valid xxforms-invalid xforms-revalidate"
                            context="instance('events')"
                            ref="*"
                            origin="xf:element(event('xxf:type'), xf:attribute('targetid', event('xxf:targetid')))"/>

                        <xf:action ev:event="xforms-model-construct-done">
                            <!-- Up until now there must have been one xxforms-invalid event for instance-2 -->

                            <!-- Toggling validity must produce 2 events -->
                            <xf:setvalue ref="instance('instance-1')">invalid</xf:setvalue>
                            <xf:setvalue ref="instance('instance-2')">valid</xf:setvalue>
                            <xf:recalculate/>

                            <!-- This must not produce any new event as validity hasn't changed -->
                            <xf:setvalue ref="instance('instance-1')">foo</xf:setvalue>
                            <xf:recalculate/>
                        </xf:action>
                    </xf:model>
                </xh:head>
                <xh:body>

                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance-1" model-id="model">
                                <instance>foo</instance>
                            </instance>
                            <instance id="instance-2" model-id="model">
                                <instance>valid</instance>
                            </instance>
                            <instance id="events" model-id="model">
                                <events>
                                    <xxforms-invalid targetid="instance-2"/>
                                    <xxforms-invalid targetid="instance-1"/>
                                    <xxforms-valid targetid="instance-2"/>
                                </events>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#739: Event handler with incorrect `ev:observer` associates with parent" name="oxf:pipeline">
        <!-- See: https://github.com/orbeon/orbeon-forms/issues/739 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="events">
                            <events/>
                        </xf:instance>

                        <xf:action ev:event="xforms-model-construct-done">
                            <xf:insert context="instance()" ref="*" origin="xf:element('correct1')"/>
                        </xf:action>

                        <xf:action ev:event="xforms-model-construct-done" ev:observer="model">
                            <xf:insert context="instance()" ref="*" origin="xf:element('correct2')"/>
                        </xf:action>

                        <xf:action ev:event="xforms-model-construct-done" ev:target="model">
                            <xf:insert context="instance()" ref="*" origin="xf:element('correct3')"/>
                        </xf:action>

                        <xf:action ev:event="xforms-model-construct-done" ev:observer="model" ev:target="model">
                            <xf:insert context="instance()" ref="*" origin="xf:element('correct4')"/>
                        </xf:action>

                        <xf:action ev:event="xforms-model-construct-done" ev:observer="DONTEXIST">
                            <xf:insert context="instance()" ref="*" origin="xf:element('incorrect1')"/>
                        </xf:action>

                        <xf:action ev:event="xforms-model-construct-done" ev:target="DONTEXIST">
                            <xf:insert context="instance()" ref="*" origin="xf:element('incorrect2')"/>
                        </xf:action>

                        <xf:action ev:event="xforms-model-construct-done" ev:observer="DONTEXIST" ev:target="DONTEXIST">
                            <xf:insert context="instance()" ref="*" origin="xf:element('incorrect3')"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="events" model-id="model">
                                <events>
                                    <correct1/>
                                    <correct2/>
                                    <correct3/>
                                    <correct4/>
                                </events>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="For #1550: Refresh upon DOMFocusOut due to deleted iteration doesn't crash" name="oxf:pipeline">
        <!-- See: https://github.com/orbeon/orbeon-forms/issues/1550 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <values>
                                <value/>
                                <value/>
                            </values>
                        </xf:instance>

                        <xf:action event="xforms-ready">
                            <xf:setfocus control="my-input"/>
                            <xf:delete ref="value[1]"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
                <xh:body>

                    <xf:repeat ref="*" id="my-repeat">
                        <xf:input ref="." id="my-input">
                            <xf:refresh event="DOMFocusOut"/>
                        </xf:input>
                    </xf:repeat>

                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <values>
                                    <value/>
                                </values>
                            </instance>
                        </instances>
                        <controls>
                            <control effective-id="my-repeat" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                    <xxf:focus control-id="my-input⊙1"/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="For #3494: Support xxforms-visible and xxforms-hidden events" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance" xxf:exclude-result-prefixes="#all">
                            <value show="true"/>
                        </xf:instance>

                        <xf:bind ref="instance()" relevant="@show = 'true'"/>

                        <xf:instance id="events" xxf:exclude-result-prefixes="#all"><events/></xf:instance>

                        <xf:insert
                            observer="my-switch"
                            event="xforms-enabled xforms-disabled xxforms-visible xxforms-hidden"
                            context="instance('events')"
                            ref="*"
                            origin="xf:element(event('xxf:type'), xf:attribute('targetid', event('xxf:targetid')))"/>

                        <xf:action event="xforms-ready">
                            <xf:toggle case="my-case2"/>
                            <xf:setvalue ref="@show">false</xf:setvalue>
                        </xf:action>

                    </xf:model>
                </xh:head>
                <xh:body>

                    <xf:switch id="my-switch">
                        <xf:case id="my-case1">

                            <xf:input id="my-input11" ref="instance()"/>
                            <xf:input id="my-input12" ref="()"/>

                        </xf:case>
                        <xf:case id="my-case2">

                            <xf:input id="my-input21" ref="instance()"/>
                            <xf:input id="my-input22" ref="()"/>

                        </xf:case>
                    </xf:switch>

                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                       <instances>
                           <instance id="instance" model-id="model">
                               <value show="false"/>
                           </instance>
                           <instance id="events" model-id="model">
                               <events>
                                   <xforms-enabled targetid="my-switch"/>
                                   <xxforms-visible targetid="my-switch"/>
                                   <xforms-enabled targetid="my-input11"/>
                                   <xxforms-visible targetid="my-input11"/>
                                   <xforms-enabled targetid="my-input21"/>
                                   <xxforms-hidden targetid="my-input11"/>
                                   <xforms-disabled targetid="my-input11"/>
                                   <xforms-disabled targetid="my-input21"/>
                               </events>
                           </instance>
                       </instances>
                       <controls>
                           <control effective-id="my-switch" case-id="my-case2"/>
                       </controls>
                   </dynamic-state>
               </xxf:dynamic-state>
               <xxf:action>
                   <xxf:control-values>
                       <xxf:control id="my-switch">
                           <xxf:case id="my-case2" visibility="visible"/>
                           <xxf:case id="my-case1" visibility="hidden"/>
                       </xxf:control>
                       <xxf:control id="my-input11" relevant="false"/>
                       <xxf:control id="my-input12" relevant="false"/>
                       <xxf:control id="my-input21" relevant="false"/>
                       <xxf:control id="my-input22" relevant="false"/>
                   </xxf:control-values>
               </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Support phantom handlers in repeats #4462" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance" xxf:exclude-result-prefixes="#all">
                            <values>
                                <outer>
                                    <inner1/>
                                    <inner2/>
                                    <inner2/>
                                </outer>
                                <outer>
                                    <inner1/>
                                    <inner1/>
                                    <inner2/>
                                </outer>
                            </values>
                        </xf:instance>

                    </xf:model>
                    <xbl:xbl>
                        <xbl:binding element="fr|foo">
                            <xbl:template>
                                <xf:group id="fr-foo-inner-group"/>
                                <xf:dispatch
                                    event="xforms-enabled"
                                    target="fr-foo-inner-group"
                                    name="foo-event"/>
                            </xbl:template>
                        </xbl:binding>
                    </xbl:xbl>
                </xh:head>
                <xh:body>

                    <xf:group id="my-outer-group">
                        <xf:repeat id="my-outer-repeat" ref="outer">

                            <xf:repeat id="my-inner-repeat-1" ref="inner1">
                                <fr:foo id="my-foo"/>
                                <xf:message
                                    observer="my-foo"
                                    xxf:phantom="true"
                                    event="foo-event"
                                    value="concat('inner scope event caught in inner repeat 1 from ', event('xxf:absolute-targetid'))"/>
                            </xf:repeat>

                            <xf:repeat id="my-inner-repeat-2" ref="inner2">
                                <xf:message
                                    observer="my-foo"
                                    xxf:phantom="true"
                                    event="foo-event"
                                    value="concat('inner scope event caught in inner repeat 2 from ', event('xxf:absolute-targetid'))"/>
                            </xf:repeat>

                            <xf:message
                                observer="my-foo"
                                xxf:phantom="true"
                                event="foo-event"
                                value="concat('inner scope event caught in outer repeat from ', event('xxf:absolute-targetid'))"/>

                        </xf:repeat>
                    </xf:group>

                    <!-- Must not run! -->
                    <xf:message
                        observer="my-outer-group"
                        event="foo-event"
                        value="concat('outer scope event caught in outer group from ', event('xxf:absolute-targetid'))"/>

                    <xf:message
                        observer="my-outer-group"
                        xxf:phantom="true"
                        event="foo-event"
                        value="concat('inner scope event caught in outer group from ', event('xxf:absolute-targetid'))"/>

                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response xmlns:xxf="http://orbeon.org/oxf/xml/xforms">
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="my-outer-repeat" index="1"/>
                            <control effective-id="my-inner-repeat-1⊙1" index="1"/>
                            <control effective-id="my-inner-repeat-2⊙1" index="1"/>
                            <control effective-id="my-inner-repeat-1⊙2" index="1"/>
                            <control effective-id="my-inner-repeat-2⊙2" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                    <xxf:message level="modal">inner scope event caught in inner repeat 1 from |my-foo≡fr-foo-inner-group⊙1-1|</xxf:message>
                    <xxf:message level="modal">inner scope event caught in inner repeat 2 from |my-foo≡fr-foo-inner-group⊙1-1|</xxf:message>
                    <xxf:message level="modal">inner scope event caught in outer repeat from |my-foo≡fr-foo-inner-group⊙1-1|</xxf:message>
                    <xxf:message level="modal">inner scope event caught in outer group from |my-foo≡fr-foo-inner-group⊙1-1|</xxf:message>
                    <xxf:message level="modal">inner scope event caught in inner repeat 1 from |my-foo≡fr-foo-inner-group⊙2-1|</xxf:message>
                    <xxf:message level="modal">inner scope event caught in inner repeat 2 from |my-foo≡fr-foo-inner-group⊙2-1|</xxf:message>
                    <xxf:message level="modal">inner scope event caught in outer repeat from |my-foo≡fr-foo-inner-group⊙2-1|</xxf:message>
                    <xxf:message level="modal">inner scope event caught in outer group from |my-foo≡fr-foo-inner-group⊙2-1|</xxf:message>
                    <xxf:message level="modal">inner scope event caught in inner repeat 1 from |my-foo≡fr-foo-inner-group⊙2-2|</xxf:message>
                    <xxf:message level="modal">inner scope event caught in inner repeat 2 from |my-foo≡fr-foo-inner-group⊙2-2|</xxf:message>
                    <xxf:message level="modal">inner scope event caught in outer repeat from |my-foo≡fr-foo-inner-group⊙2-2|</xxf:message>
                    <xxf:message level="modal">inner scope event caught in outer group from |my-foo≡fr-foo-inner-group⊙2-2|</xxf:message>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

<!--

TODO:

* xxforms-value-changed

TODO: More tests of client events:

# If there are contiguous value change events for a given controls, they are combined (check number of value changes)
# If the target is within a repeat, xxforms-repeat-activate is dispatched
# For XFormsOutput, DOMFocusIn translates into:
    * DOMFocusIn
    * If the output is not readonly, followed by DOMActivate (not sure why)
# A value change with focus change translates into:
    * Setting the external value into the instance
    * DOMFocusOut
    * DOMFocusIn
-->

</group>
