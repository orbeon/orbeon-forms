<!--
  Copyright (C) 2010 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<group description="XForms XPath Functions" xmlns:p="http://www.orbeon.com/oxf/pipeline"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xh="http://www.w3.org/1999/xhtml"
    xmlns:oxf="http://www.orbeon.com/oxf/processors"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xxi="http://orbeon.org/oxf/xml/xinclude"
    xmlns:xf="http://www.w3.org/2002/xforms"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
    xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:xbl="http://www.w3.org/ns/xbl"
    xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
    xmlns:saxon="http://saxon.sf.net/">

    <test description="instance() function" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xf:model id="main-model">
                                    <xf:dispatch ev:event="xforms-ready" name="DOMActivate" targetid="3"/>
                                    <xf:instance id="instance">
                                        <equation>
                                            <screen>0</screen>
                                            <screenbuffer>0</screenbuffer>
                                            <first>0</first>
                                            <second>0</second>
                                            <memory>12</memory>
                                            <result/>
                                        </equation>
                                    </xf:instance>
                                    <xf:instance id="instance2">
                                        <other-instance>
                                            <first/>
                                            <second>0</second>
                                        </other-instance>
                                    </xf:instance>
                                    <xf:bind ref="instance('instance2')/first" calculate="314"/>
                                </xf:model>
                            </xh:head>
                            <xh:body>
                                <xf:group ref="/equation" id="group1">
                                    <xf:group ref="screen" id="group2">
                                        <xf:output ref="." id="1"/>
                                    </xf:group>
                                    <xf:output ref="memory" id="2">
                                        <xf:label>M:</xf:label>
                                    </xf:output>
                                    <xf:trigger id="3">
                                        <xf:label>Clear</xf:label>
                                        <xf:action ev:event="DOMActivate">
                                            <xf:setvalue ref="../equation/first" value="'3.141592'"/>
                                            <xf:setvalue ref="instance('instance2')/second" value="'6535'"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xf:group>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>

            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="main-model">
                                <equation>
                                    <screen>0</screen>
                                    <screenbuffer>0</screenbuffer>
                                    <first>3.141592</first>
                                    <second>0</second>
                                    <memory>12</memory>
                                    <result/>
                                </equation>
                            </instance>
                            <instance id="instance2" model-id="main-model">
                                <other-instance>
                                    <first>314</first>
                                    <second>6535</second>
                                </other-instance>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="1">
                            <xxf:value>0</xxf:value>
                        </xxf:control>
                        <xxf:control id="2" label="M:">
                            <xxf:value>12</xxf:value>
                        </xxf:control>
                        <xxf:control id="3" label="Clear"/>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="call-xpl() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="main-model">
                        <xf:instance id="instance1">
                            <equation>
                                <screen>0</screen>
                                <screenbuffer/>
                                <first>123</first>
                                <second>456</second>
                                <memory>12</memory>
                                <result/>
                            </equation>
                        </xf:instance>
                        <xf:instance id="instance2">
                            <other-instance>
                                <first>2222</first>
                                <second>3333</second>
                                <third/>
                                <fourth/>
                            </other-instance>
                        </xf:instance>
                        <xf:bind ref="instance('instance2')/first"
                            calculate="xxf:call-xpl('oxf:/org/orbeon/oxf/xforms/xforms-call-xpl-pipeline.xpl', 'instance', /, 'result')/*/first"/>
                        <xf:bind ref="instance('instance2')/second"
                            calculate="xxf:call-xpl('oxf:/org/orbeon/oxf/xforms/xforms-call-xpl-pipeline.xpl', 'instance', instance('instance1'), 'result')/*/second"/>
                        <xf:bind ref="/*/screen"
                            constraint="false()"/>

                        <xf:dispatch ev:event="xforms-ready" name="DOMActivate" targetid="3"/>

                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group ref="." id="group1">
                        <xf:group ref="screen" id="group2">
                            <xf:output ref="." id="1"/>
                        </xf:group>
                        <xf:output ref="memory" id="2">
                            <xf:label>M:</xf:label>
                        </xf:output>
                        <xf:trigger id="3">
                            <xf:label>Clear</xf:label>
                            <xf:action ev:event="DOMActivate">
                                <xf:setvalue ref="/*/first" value="'3.141592'"/>
                                <xf:setvalue ref="instance('instance2')/third" value="xxf:call-xpl('oxf:/org/orbeon/oxf/xforms/xforms-call-xpl-pipeline.xpl', 'instance', /, 'result')/*/first"/>
                                <xf:setvalue ref="instance('instance2')/fourth" value="xxf:call-xpl('oxf:/org/orbeon/oxf/xforms/xforms-call-xpl-pipeline.xpl', 'instance', instance('instance1')/memory, 'result')"/>
                            </xf:action>
                        </xf:trigger>
                    </xf:group>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance1" model-id="main-model">
                                <equation>
                                    <screen>0</screen>
                                    <screenbuffer/>
                                    <first>3.141592</first>
                                    <second>456</second>
                                    <memory>12</memory>
                                    <result/>
                                </equation>
                            </instance>
                            <instance id="instance2" model-id="main-model">
                                <other-instance>
                                    <first>2222</first>
                                    <second>456</second>
                                    <third>2222</third>
                                    <fourth>12</fourth>
                                </other-instance>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="group2" level="error"/>
                        <xxf:control id="1" level="error">
                            <xxf:value>0</xxf:value>
                        </xxf:control>
                        <xxf:control id="2" label="M:">
                            <xxf:value>12</xxf:value>
                        </xxf:control>
                        <xxf:control id="3" label="Clear"/>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Use of context() function" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html xmlns:exf="http://www.exforms.org/exf/1-0">
                            <xh:head>
                                <xf:model id="my-model" xxf:encrypt-item-values="false">
                                    <xf:instance id="value">
                                        <value/>
                                    </xf:instance>
                                    <xf:instance id="items" xxf:readonly="true">
                                        <items>
                                            <item>
                                                <label>One</label>
                                                <value>1</value>
                                            </item>
                                            <item>
                                                <label>Two</label>
                                                <value>2</value>
                                            </item>
                                            <item>
                                                <label>Three</label>
                                                <value>3</value>
                                            </item>
                                        </items>
                                    </xf:instance>

                                    <xf:instance id="results">
                                        <results>
                                            <result1/>
                                            <result2/>
                                            <result3/>
                                            <result4/>
                                            <result5/>
                                        </results>
                                    </xf:instance>

                                    <xf:action ev:event="xforms-ready">
                                        <xf:setvalue ref="." value="2"/>
                                    </xf:action>

                                </xf:model>
                            </xh:head>
                            <xh:body>

                                <xf:select1 ref="." id="my-select">
                                    <xf:item>
                                        <xf:label>Select...</xf:label>
                                        <xf:value/>
                                    </xf:item>
                                    <xf:itemset ref="instance('items')/item">
                                        <xf:label ref="label"/>
                                        <xf:value ref="value"/>
                                    </xf:itemset>
                                    <xf:action ev:event="xforms-value-changed">
                                        <!-- Save value of current context -->
                                        <xf:setvalue ref="instance('results')/result1" value="context()"/>
                                        <!-- Save value of current context relative to ref -->
                                        <xf:setvalue ref="instance('results')/result2" value="."/>
                                        <!-- Check with if on outer action -->
                                        <xf:action if="context() = 2">
                                            <xf:setvalue ref="instance('results')/result3">got 2</xf:setvalue>
                                        </xf:action>
                                        <!-- Check with if directly on action  -->
                                        <xf:setvalue if="context() = 2" ref="instance('results')/result4">got 2</xf:setvalue>
                                        <!-- Check with explicit context if directly on action  -->
                                        <xf:setvalue context="." if="context() = 2" ref="instance('results')/result5">got 2</xf:setvalue>
                                    </xf:action>
                                </xf:select1>

                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>

            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="value" model-id="my-model">
                                <value>2</value>
                            </instance>
                            <instance id="results" model-id="my-model">
                                <results>
                                    <result1>2</result1>
                                    <result2/>
                                    <result3>got 2</result3>
                                    <result4>got 2</result4>
                                    <result5>got 2</result5>
                                </results>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-select">
                            <xxf:itemset>[{"label":"Select...","value":""},{"label":"One","value":"1"},{"label":"Two","value":"2"},{"label":"Three","value":"3"}]</xxf:itemset>
                            <xxf:value>2</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Custom context functions" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html>
                            <xh:head>
                                <xh:title>Bug</xh:title>
                                <xf:model>
                                    <xf:instance xxf:readonly="true">
                                        <fruits>
                                            <orange>bloody</orange>
                                            <orange>valencia</orange>
                                            <apple>green</apple>
                                            <apple>red</apple>
                                            <apple>iPod</apple>
                                            <pear>green</pear>
                                            <pear>williams</pear>
                                            <pear>yellow</pear>
                                        </fruits>
                                    </xf:instance>
                                    <xf:instance id="result">
                                        <result/>
                                    </xf:instance>
                                    <xf:action ev:event="xforms-ready">
                                        <xf:setindex repeat="my-repeat" index="5"/>
                                    </xf:action>
                                </xf:model>
                            </xh:head>
                            <xh:body>

                                <xf:repeat id="my-repeat" ref="*">
                                    <xf:var name="position" value="position()" as="xs:integer"/>
                                    <xf:group id="my-group" ref="..">
                                        <xf:action ev:event="xforms-enabled">
                                            <!-- Test use in actions -->
                                            <xf:insert context="instance('result')" ref="*"
                                                           origin="xf:element('repeat-current', (xf:attribute('position', $position),
                                                                                                      xf:attribute('repeat-current-1', xxf:repeat-current()),
                                                                                                      xf:attribute('repeat-current-2', xxf:repeat-current('my-repeat')),
                                                                                                      xf:attribute('repeat-index-1', xxf:index()),
                                                                                                      xf:attribute('repeat-index-2', index('my-repeat')),
                                                                                                      xf:attribute('repeat-context-1', name(xxf:context('my-group'))),
                                                                                                      xf:attribute('repeat-context-2', xxf:context('my-repeat'))
                                                                                                      ))"/>
                                        </xf:action>
                                        <!-- Test use in control values -->
                                        <xf:output id="repeat-current-output-1" value="xxf:repeat-current()"/>
                                        <xf:output id="repeat-current-output-2" value="xxf:repeat-current('my-repeat')"/>
                                        <xf:output id="repeat-index-1" value="index('my-repeat')"/>
                                        <xf:output id="repeat-index-2" value="xxf:index()"/>
                                        <xf:output id="repeat-context-1" value="name(xxf:context('my-group'))"/>
                                        <xf:output id="repeat-context-2" value="xxf:context('my-repeat')"/>
                                    </xf:group>
                                </xf:repeat>

                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>

            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="result" model-id="xf-2">
                                <result>
                                    <repeat-current position="1" repeat-current-1="bloody" repeat-current-2="bloody" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="bloody"/>
                                    <repeat-current position="1" repeat-current-1="bloody" repeat-current-2="bloody" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="bloody"/>
                                    <repeat-current position="1" repeat-current-1="bloody" repeat-current-2="bloody" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="bloody"/>
                                    <repeat-current position="1" repeat-current-1="bloody" repeat-current-2="bloody" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="bloody"/>
                                    <repeat-current position="1" repeat-current-1="bloody" repeat-current-2="bloody" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="bloody"/>
                                    <repeat-current position="1" repeat-current-1="bloody" repeat-current-2="bloody" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="bloody"/>
                                    <repeat-current position="1" repeat-current-1="bloody" repeat-current-2="bloody" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="bloody"/>
                                    <repeat-current position="2" repeat-current-1="valencia" repeat-current-2="valencia" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="valencia"/>
                                    <repeat-current position="2" repeat-current-1="valencia" repeat-current-2="valencia" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="valencia"/>
                                    <repeat-current position="2" repeat-current-1="valencia" repeat-current-2="valencia" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="valencia"/>
                                    <repeat-current position="2" repeat-current-1="valencia" repeat-current-2="valencia" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="valencia"/>
                                    <repeat-current position="2" repeat-current-1="valencia" repeat-current-2="valencia" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="valencia"/>
                                    <repeat-current position="2" repeat-current-1="valencia" repeat-current-2="valencia" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="valencia"/>
                                    <repeat-current position="2" repeat-current-1="valencia" repeat-current-2="valencia" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="valencia"/>
                                    <repeat-current position="3" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="3" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="3" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="3" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="3" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="3" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="3" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="4" repeat-current-1="red" repeat-current-2="red" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="red"/>
                                    <repeat-current position="4" repeat-current-1="red" repeat-current-2="red" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="red"/>
                                    <repeat-current position="4" repeat-current-1="red" repeat-current-2="red" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="red"/>
                                    <repeat-current position="4" repeat-current-1="red" repeat-current-2="red" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="red"/>
                                    <repeat-current position="4" repeat-current-1="red" repeat-current-2="red" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="red"/>
                                    <repeat-current position="4" repeat-current-1="red" repeat-current-2="red" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="red"/>
                                    <repeat-current position="4" repeat-current-1="red" repeat-current-2="red" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="red"/>
                                    <repeat-current position="5" repeat-current-1="iPod" repeat-current-2="iPod" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="iPod"/>
                                    <repeat-current position="5" repeat-current-1="iPod" repeat-current-2="iPod" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="iPod"/>
                                    <repeat-current position="5" repeat-current-1="iPod" repeat-current-2="iPod" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="iPod"/>
                                    <repeat-current position="5" repeat-current-1="iPod" repeat-current-2="iPod" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="iPod"/>
                                    <repeat-current position="5" repeat-current-1="iPod" repeat-current-2="iPod" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="iPod"/>
                                    <repeat-current position="5" repeat-current-1="iPod" repeat-current-2="iPod" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="iPod"/>
                                    <repeat-current position="5" repeat-current-1="iPod" repeat-current-2="iPod" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="iPod"/>
                                    <repeat-current position="6" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="6" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="6" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="6" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="6" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="6" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="6" repeat-current-1="green" repeat-current-2="green" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="green"/>
                                    <repeat-current position="7" repeat-current-1="williams" repeat-current-2="williams" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="williams"/>
                                    <repeat-current position="7" repeat-current-1="williams" repeat-current-2="williams" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="williams"/>
                                    <repeat-current position="7" repeat-current-1="williams" repeat-current-2="williams" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="williams"/>
                                    <repeat-current position="7" repeat-current-1="williams" repeat-current-2="williams" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="williams"/>
                                    <repeat-current position="7" repeat-current-1="williams" repeat-current-2="williams" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="williams"/>
                                    <repeat-current position="7" repeat-current-1="williams" repeat-current-2="williams" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="williams"/>
                                    <repeat-current position="7" repeat-current-1="williams" repeat-current-2="williams" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="williams"/>
                                    <repeat-current position="8" repeat-current-1="yellow" repeat-current-2="yellow" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="yellow"/>
                                    <repeat-current position="8" repeat-current-1="yellow" repeat-current-2="yellow" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="yellow"/>
                                    <repeat-current position="8" repeat-current-1="yellow" repeat-current-2="yellow" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="yellow"/>
                                    <repeat-current position="8" repeat-current-1="yellow" repeat-current-2="yellow" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="yellow"/>
                                    <repeat-current position="8" repeat-current-1="yellow" repeat-current-2="yellow" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="yellow"/>
                                    <repeat-current position="8" repeat-current-1="yellow" repeat-current-2="yellow" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="yellow"/>
                                    <repeat-current position="8" repeat-current-1="yellow" repeat-current-2="yellow" repeat-index-1="1" repeat-index-2="1" repeat-context-1="fruits" repeat-context-2="yellow"/>
                                </result>
                            </instance>
                        </instances>
                        <controls>
                            <control effective-id="my-repeat" index="5"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-group⊙1" readonly="true"/>
                        <xxf:control id="repeat-current-output-1⊙1">
                            <xxf:value>bloody</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-current-output-2⊙1">
                            <xxf:value>bloody</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-1⊙1">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-2⊙1">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-1⊙1">
                            <xxf:value>fruits</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-2⊙1">
                            <xxf:value>bloody</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-group⊙2" readonly="true"/>
                        <xxf:control id="repeat-current-output-1⊙2">
                            <xxf:value>valencia</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-current-output-2⊙2">
                            <xxf:value>valencia</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-1⊙2">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-2⊙2">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-1⊙2">
                            <xxf:value>fruits</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-2⊙2">
                            <xxf:value>valencia</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-group⊙3" readonly="true"/>
                        <xxf:control id="repeat-current-output-1⊙3">
                            <xxf:value>green</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-current-output-2⊙3">
                            <xxf:value>green</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-1⊙3">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-2⊙3">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-1⊙3">
                            <xxf:value>fruits</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-2⊙3">
                            <xxf:value>green</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-group⊙4" readonly="true"/>
                        <xxf:control id="repeat-current-output-1⊙4">
                            <xxf:value>red</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-current-output-2⊙4">
                            <xxf:value>red</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-1⊙4">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-2⊙4">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-1⊙4">
                            <xxf:value>fruits</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-2⊙4">
                            <xxf:value>red</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-group⊙5" readonly="true"/>
                        <xxf:control id="repeat-current-output-1⊙5">
                            <xxf:value>iPod</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-current-output-2⊙5">
                            <xxf:value>iPod</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-1⊙5">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-2⊙5">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-1⊙5">
                            <xxf:value>fruits</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-2⊙5">
                            <xxf:value>iPod</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-group⊙6" readonly="true"/>
                        <xxf:control id="repeat-current-output-1⊙6">
                            <xxf:value>green</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-current-output-2⊙6">
                            <xxf:value>green</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-1⊙6">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-2⊙6">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-1⊙6">
                            <xxf:value>fruits</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-2⊙6">
                            <xxf:value>green</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-group⊙7" readonly="true"/>
                        <xxf:control id="repeat-current-output-1⊙7">
                            <xxf:value>williams</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-current-output-2⊙7">
                            <xxf:value>williams</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-1⊙7">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-2⊙7">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-1⊙7">
                            <xxf:value>fruits</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-2⊙7">
                            <xxf:value>williams</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-group⊙8" readonly="true"/>
                        <xxf:control id="repeat-current-output-1⊙8">
                            <xxf:value>yellow</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-current-output-2⊙8">
                            <xxf:value>yellow</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-1⊙8">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-index-2⊙8">
                            <xxf:value>5</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-1⊙8">
                            <xxf:value>fruits</xxf:value>
                        </xxf:control>
                        <xxf:control id="repeat-context-2⊙8">
                            <xxf:value>yellow</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="exf:sort() / xxf:sort()" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="response" type="output"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="wrap-xforms-state.xpl"/>
                    <p:input name="document">
                        <xh:html xmlns:exf="http://www.exforms.org/exf/1-0">
                            <xh:head>
                                <xf:model id="model">
                                    <xf:instance id="main-instance">
                                        <instance>
                                            <record code="c"/>
                                            <record code="a"/>
                                            <record code="b"/>
                                        </instance>
                                    </xf:instance>
                                    <xf:instance id="lookup-instance">
                                        <instance>
                                            <record code="c">1-CCC</record>
                                            <record code="a">3-AAA</record>
                                            <record code="b">2-BBB</record>
                                        </instance>
                                    </xf:instance>
                                </xf:model>
                            </xh:head>
                            <xh:body>
                                <xf:var name="lookup-records" value="instance('lookup-instance')/record" as="element(record)+"/>
                                <!-- Sort expression with variable and use of instance() -->
                                <xf:repeat id="exforms-sort-repeat" ref="exf:sort(record, 'for  $code in @code return instance(''lookup-instance'')/record[@code = $code]', 'text', 'descending')">
                                    <xf:output id="exforms-sort-output" value="for $code in @code return instance('lookup-instance')/record[@code=$code]"/>
                                </xf:repeat>
                                <xf:repeat id="xxforms-sort-repeat" ref="xxf:sort(record, for $code in @code return instance('lookup-instance')/record[@code = $code], 'text', 'descending')">
                                    <xf:output id="xxforms-sort-output" value="for $code in @code return instance('lookup-instance')/record[@code = $code]"/>
                                </xf:repeat>
                                <!-- Sort expression with variable and use of variables -->
                                <xf:repeat id="exforms-sort-v-repeat" ref="exf:sort(record, 'for  $code in @code return $lookup-records[@code = $code]', 'text', 'descending')">
                                    <xf:output id="exforms-sort-v-output" value="for $code in @code return instance('lookup-instance')/record[@code=$code]"/>
                                </xf:repeat>
                                <xf:repeat id="xxforms-sort-v-repeat" ref="xxf:sort(record, for $code in @code return $lookup-records[@code = $code], 'text', 'descending')">
                                    <xf:output id="xxforms-sort-v-output" value="for $code in @code return instance('lookup-instance')/record[@code = $code]"/>
                                </xf:repeat>
                            </xh:body>
                        </xh:html>
                    </p:input>
                    <p:output name="response" ref="response"/>
                </p:processor>

            </p:config>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="exforms-sort-repeat" index="1"/>
                            <control effective-id="xxforms-sort-repeat" index="1"/>
                            <control effective-id="exforms-sort-v-repeat" index="1"/>
                            <control effective-id="xxforms-sort-v-repeat" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="exforms-sort-output⊙1">
                            <xxf:value>3-AAA</xxf:value>
                        </xxf:control>
                        <xxf:control id="exforms-sort-output⊙2">
                            <xxf:value>2-BBB</xxf:value>
                        </xxf:control>
                        <xxf:control id="exforms-sort-output⊙3">
                            <xxf:value>1-CCC</xxf:value>
                        </xxf:control>
                        <xxf:control id="xxforms-sort-output⊙1">
                            <xxf:value>3-AAA</xxf:value>
                        </xxf:control>
                        <xxf:control id="xxforms-sort-output⊙2">
                            <xxf:value>2-BBB</xxf:value>
                        </xxf:control>
                        <xxf:control id="xxforms-sort-output⊙3">
                            <xxf:value>1-CCC</xxf:value>
                        </xxf:control>
                        <xxf:control id="exforms-sort-v-output⊙1">
                            <xxf:value>3-AAA</xxf:value>
                        </xxf:control>
                        <xxf:control id="exforms-sort-v-output⊙2">
                            <xxf:value>2-BBB</xxf:value>
                        </xxf:control>
                        <xxf:control id="exforms-sort-v-output⊙3">
                            <xxf:value>1-CCC</xxf:value>
                        </xxf:control>
                        <xxf:control id="xxforms-sort-v-output⊙1">
                            <xxf:value>3-AAA</xxf:value>
                        </xxf:control>
                        <xxf:control id="xxforms-sort-v-output⊙2">
                            <xxf:value>2-BBB</xxf:value>
                        </xxf:control>
                        <xxf:control id="xxforms-sort-v-output⊙3">
                            <xxf:value>1-CCC</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:evaluate-avt() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:xxbl="http://orbeon.org/oxf/xml/xbl">
                <xh:head>
                    <xf:model id="model1">
                        <xf:instance id="instance1">
                            <instance>
                                <state>CA</state>
                                <city>San Francisco</city>
                            </instance>
                        </xf:instance>
                    </xf:model>

                </xh:head>
                <xh:body>
                    <xf:output id="output1" value="xxf:evaluate-avt('state={state}')"/>
                    <xf:var name="city" value="city"/>
                    <xf:output id="output2" value="xxf:evaluate-avt('state={state}&amp;city={$city}')"/>
                    <xf:repeat id="repeat" ref="*">
                        <xf:output id="output3" value="xxf:evaluate-avt('position={position()}&amp;index={index(''repeat'')}')"/>
                    </xf:repeat>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
            <xxf:dynamic-state>
                <dynamic-state>
                    <controls>
                        <control effective-id="repeat" index="1"/>
                    </controls>
                </dynamic-state>
            </xxf:dynamic-state>
            <xxf:action>
                <xxf:control-values>
                    <xxf:control id="output1">
                        <xxf:value>state=CA</xxf:value>
                    </xxf:control>
                    <xxf:control id="output2">
                        <xxf:value>state=CA&amp;city=San Francisco</xxf:value>
                    </xxf:control>
                    <xxf:control id="output3⊙1">
                        <xxf:value>position=1&amp;index=1</xxf:value>
                    </xxf:control>
                    <xxf:control id="output3⊙2">
                        <xxf:value>position=2&amp;index=1</xxf:value>
                    </xxf:control>
                </xxf:control-values>
            </xxf:action>
        </xxf:event-response>
        </output>
    </test>

    <test description="instance() function with blank parameter or without parameter" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:xxbl="http://orbeon.org/oxf/xml/xbl">
                <xh:head>
                    <xf:model id="model1">
                        <xf:instance id="instance1">
                            <value>42</value>
                        </xf:instance>
                        <xf:instance id="instance2">
                            <value>43</value>
                        </xf:instance>
                    </xf:model>
                    <xf:model id="model2">
                        <xf:instance id="instance3">
                            <value>44</value>
                        </xf:instance>
                        <xf:instance id="instance4">
                            <value>45</value>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <!-- Explicit parameter -->
                    <xf:output id="output1" value="instance('instance1')"/>
                    <xf:output id="output2" value="instance('instance2')"/>
                    <xf:output id="output3" model="model2" value="instance('instance3')"/>
                    <xf:output id="output4" model="model2" value="instance('instance4')"/>
                    <!-- Blank parameter  -->
                    <xf:output id="output5" value="instance()"/>
                    <xf:output id="output6" model="model2" value="instance()"/>
                    <!-- No parameter  -->
                    <xf:output id="output7" value="instance()"/>
                    <xf:output id="output8" model="model2" value="instance()"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1">
                            <xxf:value>42</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2">
                            <xxf:value>43</xxf:value>
                        </xxf:control>
                        <xxf:control id="output3">
                            <xxf:value>44</xxf:value>
                        </xxf:control>
                        <xxf:control id="output4">
                            <xxf:value>45</xxf:value>
                        </xxf:control>
                        <xxf:control id="output5">
                            <xxf:value>42</xxf:value>
                        </xxf:control>
                        <xxf:control id="output6">
                            <xxf:value>44</xxf:value>
                        </xxf:control>
                        <xxf:control id="output7">
                            <xxf:value>42</xxf:value>
                        </xxf:control>
                        <xxf:control id="output8">
                            <xxf:value>44</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="hmac() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:xxbl="http://orbeon.org/oxf/xml/xbl">
                <xh:head>
                    <xf:model id="model1">
                    </xf:model>

                </xh:head>
                <xh:body>
                    <xf:output id="output1" value="hmac('key', 'abc', 'SHA-1', 'hex')"/>
                    <xf:output id="output2" value="hmac('key', 'abc', 'MD5', 'hex')"/>
                    <xf:output id="output3" value="hmac('key', 'abc', 'SHA-256', 'hex')"/>
                    <xf:output id="output4" value="hmac('key', 'abc', 'SHA-1', 'base64')"/>
                    <xf:output id="output5" value="hmac('key', 'abc', 'MD5', 'base64')"/>
                    <xf:output id="output6" value="hmac('key', 'abc', 'SHA-256', 'base64')"/>
                    <xf:output id="output7" value="hmac('key', 'abc', 'SHA-384', 'hex')"/>
                    <xf:output id="output8" value="hmac('key', 'abc', 'SHA-512', 'hex')"/>
                    <xf:output id="output9" value="hmac('key', 'abc', 'SHA-384', 'base64')"/>
                    <xf:output id="output10" value="hmac('key', 'abc', 'SHA-512', 'base64')"/>
                    <xf:output id="output11" value="hmac('key', 'abc', 'SHA-256')"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
            <xxf:dynamic-state>
                <dynamic-state/>
            </xxf:dynamic-state>
            <xxf:action>
                <xxf:control-values>
                    <xxf:control id="output1">
                        <xxf:value>4fd0b215276ef12f2b3e4c8ecac2811498b656fc</xxf:value>
                    </xxf:control>
                    <xxf:control id="output2">
                        <xxf:value>d2fe98063f876b03193afb49b4979591</xxf:value>
                    </xxf:control>
                    <xxf:control id="output3">
                        <xxf:value>9c196e32dc0175f86f4b1cb89289d6619de6bee699e4c378e68309ed97a1a6ab</xxf:value>
                    </xxf:control>
                    <xxf:control id="output4">
                        <xxf:value>T9CyFSdu8S8rPkyOysKBFJi2Vvw=</xxf:value>
                    </xxf:control>
                    <xxf:control id="output5">
                        <xxf:value>0v6YBj+HawMZOvtJtJeVkQ==</xxf:value>
                    </xxf:control>
                    <xxf:control id="output6">
                        <xxf:value>nBluMtwBdfhvSxy4konWYZ3mvuaZ5MN45oMJ7Zehpqs=</xxf:value>
                    </xxf:control>
                    <xxf:control id="output7">
                        <xxf:value>30ddb9c8f347cffbfb44e519d814f074cf4047a55d6f563324f1c6a33920e5edfb2a34bac60bdc96cd33a95623d7d638</xxf:value>
                    </xxf:control>
                    <xxf:control id="output8">
                        <xxf:value>3926a207c8c42b0c41792cbd3e1a1aaaf5f7a25704f62dfc939c4987dd7ce060009c5bb1c2447355b3216f10b537e9afa7b64a4e5391b0d631172d07939e087a</xxf:value>
                    </xxf:control>
                    <xxf:control id="output9">
                        <xxf:value>MN25yPNHz/v7ROUZ2BTwdM9AR6Vdb1YzJPHGozkg5e37KjS6xgvcls0zqVYj19Y4</xxf:value>
                    </xxf:control>
                    <xxf:control id="output10">
                        <xxf:value>OSaiB8jEKwxBeSy9PhoaqvX3olcE9i38k5xJh9184GAAnFuxwkRzVbMhbxC1N+mvp7ZKTlORsNYxFy0Hk54Ieg==</xxf:value>
                    </xxf:control>
                    <xxf:control id="output11">
                        <xxf:value>nBluMtwBdfhvSxy4konWYZ3mvuaZ5MN45oMJ7Zehpqs=</xxf:value>
                    </xxf:control>
                </xxf:control-values>
            </xxf:action>
        </xxf:event-response>
        </output>
    </test>

    <test description="is-card-number() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:xxbl="http://orbeon.org/oxf/xml/xbl">
                <xh:head>
                    <xf:model id="model1">
                        <xf:instance>
                            <root>341111111111111</root>
                        </xf:instance>
                    </xf:model>

                </xh:head>
                <xh:body>
                    <xf:output id="output1" value="is-card-number('541234567890125')">
                        <xf:label>Test 1 : </xf:label>
                        <!-- must output true -->
                    </xf:output>
                    <xf:output id="output2" value="is-card-number('1002312234567990000')">
                        <xf:label>Test 2 : </xf:label>
                        <!-- must output true -->
                    </xf:output>
                    <xf:output id="output3" value="is-card-number(.)">
                        <xf:label>Test 3 : </xf:label>
                        <!-- must output true -->
                    </xf:output>
                    <xf:output id="output4" value="is-card-number('123456789012')">
                        <xf:label>Test 4 : </xf:label>
                        <!-- must output true -->
                    </xf:output>
                    <xf:output id="output5" value="is-card-number('123')">
                        <xf:label>Test 5 : </xf:label>
                        <!-- must output true -->
                    </xf:output>
                    <xf:output id="output6" value="is-card-number('12345a789012')">
                        <xf:label>Test 6 : </xf:label>
                        <!-- must output true -->
                    </xf:output>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1" label="Test 1 : ">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2" label="Test 2 : ">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output3" label="Test 3 : ">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output4" label="Test 4 : ">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="output5" label="Test 5 : ">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="output6" label="Test 6 : ">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="power() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:xxbl="http://orbeon.org/oxf/xml/xbl">
                <xh:head>
                    <xf:model id="model1">
                    </xf:model>

                </xh:head>
                <xh:body>
                     <xf:output id="output1" value="power(2,3)">
                        <xf:label>power(2,3) : </xf:label>
                     </xf:output>
                     <xf:output id="output2" value="power(-1,0.5)">
                        <xf:label>power(-1,0.5) : </xf:label>
                     </xf:output>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1" label="power(2,3) : ">
                            <xxf:value>8</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2" label="power(-1,0.5) : ">
                            <xxf:value>NaN</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="local-date() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:xxbl="http://orbeon.org/oxf/xml/xbl">
                <xh:head>
                    <xf:model id="model1">
                    </xf:model>

                </xh:head>
                <xh:body>
                    <xf:output id="output1" value="local-date('test')">
                        <xf:label>local-date() : </xf:label>
                    </xf:output>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1" label="local-date() : ">
                            <xxf:value>2004-12-31-07:00</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="local-dateTime() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:xxbl="http://orbeon.org/oxf/xml/xbl">
                <xh:head>
                    <xf:model id="model1">
                    </xf:model>

                </xh:head>
                <xh:body>
                    <xf:output id="output1" value="local-dateTime('test')">
                        <xf:label>local-dateTime() : </xf:label>
                    </xf:output>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1" label="local-dateTime() : ">
                            <xxf:value>2004-12-31T12:00:00-07:00</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="days-to-date() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:xxbl="http://orbeon.org/oxf/xml/xbl">
                <xh:head>
                    <xf:model id="model1">
                    </xf:model>

                </xh:head>
                <xh:body>
                    <xf:output id="output1" value="days-to-date(11688)">
                        <xf:label>Test 1 : </xf:label>
                    </xf:output>
                    <xf:output id="output2" value="days-to-date(-1)">
                        <xf:label>Test 2 : </xf:label>
                    </xf:output>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1" label="Test 1 : ">
                            <xxf:value>2002-01-01</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2" label="Test 2 : ">
                            <xxf:value>1969-12-31</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="choose() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:xxbl="http://orbeon.org/oxf/xml/xbl">
                <xh:head>
                    <xf:model id="model1">
                        <xf:instance>
                            <petlist>
                                <dogs>
                                    <dog name="Benji"/>
                                    <dog name="Cujo"/>
                                    <dog name="Lassie"/>
                                </dogs>
                                <cats>
                                    <cat name="Garfield"/>
                                    <cat name="Heathcliff"/>
                                    <cat name="Felix"/>
                                    <cat name="Tom"/>
                                </cats>
                            </petlist>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:repeat ref="choose(count(dogs/dog) &gt; count(cats/cat), dogs/dog, cats/cat)">
                        <xf:output ref="@name">
                            <xf:label>Nodeset : </xf:label>
                        </xf:output>
                    </xf:repeat>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="xf-2" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="xf-3⊙1" label="Nodeset : ">
                            <xxf:value>Garfield</xxf:value>
                        </xxf:control>
                        <xxf:control id="xf-3⊙2" label="Nodeset : ">
                            <xxf:value>Heathcliff</xxf:value>
                        </xxf:control>
                        <xxf:control id="xf-3⊙3" label="Nodeset : ">
                            <xxf:value>Felix</xxf:value>
                        </xxf:control>
                        <xxf:control id="xf-3⊙4" label="Nodeset : ">
                            <xxf:value>Tom</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="boolean-from-string() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
           <xh:html xmlns:ex="http://example.com">
              <xh:head>
                <xh:title>7.6.1.a boolean-from-string() function</xh:title>
                <xh:link rel="stylesheet" href="/apps/xforms-test-suite/TestSuite11.css" type="text/css"/>
                <xf:model id="model1">
                    <xf:instance>
                        <ex:driver>
                            <ex:safe>true</ex:safe>
                            <ex:experienced>TRUE</ex:experienced>
                            <ex:insured>1</ex:insured>
                            <ex:points>false</ex:points>
                            <ex:accidents>FALSE</ex:accidents>
                            <ex:mv_violation>0</ex:mv_violation>
                            <ex:junk>3dod0</ex:junk>
                        </ex:driver>
                    </xf:instance>
                </xf:model>
              </xh:head>
              <xh:body>
                <xf:output value="boolean-from-string(ex:safe)" id="xf-output-1">
                    <xf:label>Safe Driver : </xf:label>
                </xf:output>
                <xf:output value="boolean-from-string(ex:experienced)" id="xf-output-2">
                    <xf:label>Experienced Driver : </xf:label>
                </xf:output>
                <xf:output value="boolean-from-string(ex:insured)" id="xf-output-3">
                    <xf:label>Insured Driver : </xf:label>
                </xf:output>
                <xf:output value="boolean-from-string(ex:points)" id="xf-output-4">
                    <xf:label>License Points : </xf:label>
                </xf:output>
                <xf:output value="boolean-from-string(ex:accidents)" id="xf-output-5">
                    <xf:label>Accidents : </xf:label>
                </xf:output>
                <xf:output value="boolean-from-string(ex:mv_violation)" id="xf-output-6">
                    <xf:label>Moving Violations : </xf:label>
                </xf:output>
                <xf:output value="boolean-from-string(ex:junk)" id="xf-output-7">
                    <xf:label>Junk Instance Data : </xf:label>
                </xf:output>

              </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="xf-output-1" label="Safe Driver : ">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="xf-output-2" label="Experienced Driver : ">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="xf-output-3" label="Insured Driver : ">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="xf-output-4" label="License Points : ">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="xf-output-5" label="Accidents : ">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="xf-output-6" label="Moving Violations : ">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="xf-output-7" label="Junk Instance Data : ">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="seconds-to-dateTime() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
           <xh:html xmlns:ex="http://example.org">
                <xh:head>
                    <xh:title>7.9.6.a seconds-to-dateTime() function</xh:title>
                    <xh:link rel="stylesheet" href="/apps/xforms-test-suite/TestSuite11.css" type="text/css"/>
                    <xf:model>
                        <xf:instance>
                            <ex:root/>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output value="seconds-to-dateTime(0)" id="xf-output-1">
                        <xf:label>Test 1 : </xf:label>
                    </xf:output>
                    <xf:output value="seconds-to-dateTime(number('NaN'))" id="xf-output-2">
                        <xf:label>Test 2 : </xf:label>
                    </xf:output>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="xf-output-1" label="Test 1 : ">
                            <xxf:value>1970-01-01T00:00:00Z</xxf:value>
                        </xxf:control>
                        <xxf:control id="xf-output-2" label="Test 2 : "/>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="digest() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
           <xh:html xmlns:ex="http://example.org">
                <xh:head>
                    <xh:title>digest() default encoding</xh:title>
                    <xf:model>
                        <xf:instance>
                            <ex:root/>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output value="digest('abc', 'SHA-256')" id="xf-output-1">
                        <xf:label>Test 1 : </xf:label>
                    </xf:output>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="xf-output-1" label="Test 1 : ">
                            <xxf:value>ungWv48Bz+pBQUDeXa4iI7ADYaOWF3qctBD/YfIAFa0=</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="saxon:in-summer-time() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
           <xh:html>
                <xh:head>
                    <xf:model id="model"/>
                </xh:head>
                <xh:body>
                    <xf:output value="saxon:in-summer-time(xs:dateTime('2010-01-01T12:00:00Z'), 'America/New_York') " id="my-output1"/>
                    <xf:output value="saxon:in-summer-time(xs:dateTime('2010-07-01T12:00:00Z'), 'America/New_York') " id="my-output2"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-output1">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-output2">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Top-level last() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
           <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <xf:instance>
                                <value>42</value>
                                <value>43</value>
                                <value>45</value>
                            </xf:instance>
                        </xf:instance>

                        <xf:insert ev:event="xforms-ready" ref="value" at="last()" position="before"
                                       origin="xf:element('value', 44)"/>

                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <xf:instance>
                                    <value>42</value>
                                    <value>43</value>
                                    <value>44</value>
                                    <value>45</value>
                                </xf:instance>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="saxon:evaluate() function in AVT" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
           <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <expressions>
                                <expression>'gaga'</expression>
                                <expression>concat('The message is ', expression[1])</expression>
                            </expressions>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <xf:load resource="{saxon:evaluate(expression[1])}"/>
                            <xf:load resource="{saxon:evaluate(expression[2])}"/>
                        </xf:action>
                    </xf:model>
                </xh:head>
                <xh:body>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                    <xxf:load resource="/orbeon/doc/gaga" show="replace"/>
                    <xxf:load resource="/orbeon/doc/The%20message%20is%20'gaga'" show="replace"/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="current() function" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
           <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <!-- These instances are inspired from the XForms 1.1 spec -->
                        <xf:instance>
                           <converter>
                              <amount>100</amount>
                              <currency>jpy</currency>
                              <convertedAmount/>
                           </converter>
                        </xf:instance>

                        <xf:instance id="convTable">
                           <convTable date="20040212" currency="cdn">
                              <rate currency="eur">0.59376</rate>
                              <rate currency="mxn">8.37597</rate>
                              <rate currency="jpy">80.23451</rate>
                              <rate currency="usd">0.76138</rate>
                           </convTable>
                        </xf:instance>

                        <xf:bind ref="convertedAmount"
                                     calculate="xs:decimal(../amount) * instance('convTable')/rate[@currency = current()/../currency]"/>


                        <!-- Test from actions -->
                        <xf:instance id="values">
                           <values>
                               <value/>
                               <value/>
                               <value/>
                           </values>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <!-- Set value[1] to 100 -->
                            <xf:setvalue ref="instance('values')/value[1]" value="context()/amount"/>
                            <!-- Set value[1] to 101-->
                            <xf:setvalue ref="instance('values')/value[2]" value="current()/../value[1] + 1"/>
                            <!-- Set value[2] to 101-->
                            <xf:setvalue ref="instance('values')/value[3]" value="preceding-sibling::value[1]"/>
                            <!-- Set value[3] to the sum of all value elements that have value 101 -->
                            <xf:setvalue ref="instance('values')/value[3]" value="sum((../value[. = current()]))"/>
                        </xf:action>
                    </xf:model>
                </xh:head>
                <xh:body>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="xf-1" model-id="model">
                                <converter>
                                    <amount>100</amount>
                                    <currency>jpy</currency>
                                    <convertedAmount>8023.451</convertedAmount>
                                </converter>
                            </instance>
                            <instance id="values" model-id="model">
                                <values>
                                    <value>100</value>
                                    <value>101</value>
                                    <value>202</value>
                                </values>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="exf:sort() doesn't cause 'invalid slot for variable' error in Saxon" name="oxf:pipeline">
        <!-- See: http://forge.ow2.org/tracker/index.php?func=detail&aid=315140&group_id=168&atid=350207 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:exf="http://www.exforms.org/exf/1-0">
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance>
                                <record code="c">C</record>
                            </instance>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output id="output" ref="exf:sort(record[@code = 'c'], '@code', 'text', 'ascending', 'lower-first')"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output">
                            <xxf:value>C</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:evaluate-avt() doesn't cause 'invalid slot for variable' error in Saxon" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance>
                                <record code="c">C</record>
                            </instance>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output id="output" value="xxf:evaluate-avt('{record[@code = ''c'']}')"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output">
                            <xxf:value>C</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Simple xxf:lang() on controls and actions" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <langs>
                                <lang/>
                                <lang/>
                            </langs>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group xml:lang="it">
                        <xf:output id="output1" value="xxf:lang()"/>
                        <xf:output id="output2" value="xxf:lang()" xml:lang="zh"/>

                        <xf:setvalue ev:event="xforms-enabled" ref="lang[1]" value="xxf:lang()"/>
                        <xf:setvalue ev:event="xforms-enabled" ref="lang[2]" value="xxf:lang()" xml:lang="fr"/>
                    </xf:group>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <langs>
                                    <lang>it</lang>
                                    <lang>fr</lang>
                                </langs>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1">
                            <xxf:value>it</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2">
                            <xxf:value>zh</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:lang() with top-level AVT xml:lang" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xml:lang="{instance()}">
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <lang/>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:group>
                        <xf:output id="output1" value="xxf:lang()"/>
                        <xf:output id="output2" value="xxf:lang()" xml:lang="zh"/>

                        <xf:setvalue ev:event="xforms-enabled" ref="instance()" value="xxf:lang()" xml:lang="it"/>
                    </xf:group>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <lang>it</lang>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:attribute for="xf-1" name="xml:lang">it</xxf:attribute>
                        <xxf:control id="output1">
                            <xxf:value>it</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2">
                            <xxf:value>zh</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:lang() and XBL" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:xxbl="http://orbeon.org/oxf/xml/xbl" xml:lang="{instance()}">
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <lang>it</lang>
                        </xf:instance>
                    </xf:model>
                    <xbl:xbl>
                        <xbl:binding id="fr-foo" element="fr|foo">
                            <xbl:template>
                                <xf:group>
                                    <xf:var id="lang" name="lang" value="xxf:lang()"/>
                                    <xf:output id="output1" value="$lang"/>

                                    <xf:output id="output2" value="xxf:lang()"/>
                                    <xf:output id="output3" value="xxf:lang()" xml:lang="zh"/>
                                </xf:group>
                            </xbl:template>
                        </xbl:binding>
                    </xbl:xbl>
                </xh:head>
                <xh:body>
                    <fr:foo id="my-foo-1"/>
                    <fr:foo id="my-foo-2" xml:lang="es"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:attribute for="xf-1" name="xml:lang">it</xxf:attribute>
                        <xxf:control id="my-foo-1≡output1">
                            <xxf:value>it</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-foo-1≡output2">
                            <xxf:value>it</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-foo-1≡output3">
                            <xxf:value>zh</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-foo-2≡output1">
                            <xxf:value>es</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-foo-2≡output2">
                            <xxf:value>es</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-foo-2≡output3">
                            <xxf:value>zh</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:format-message()" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance>
                                <file>0</file>
                                <file>1</file>
                                <file>1273</file>
                            </instance>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output id="output1"
                                   value="xxf:format-message('At {2,time,short} on {2,date,long}, we detected {1,number,integer} spaceships on the planet {0}.',
                                            ('Mars', 3, xs:dateTime('2010-07-23T19:25:13-07:00')))"/>

                    <xf:repeat ref="file">
                        <xf:output id="output2"
                                       value="xxf:format-message('There {0,choice,0#are no files|1#is one file|1&lt;are {0,number,integer} files}.', xs:integer(.))"/>
                    </xf:repeat>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="xf-1" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1">
                            <xxf:value>At 7:25 PM on July 23, 2010, we detected 3 spaceships on the planet Mars.</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2⊙1">
                            <xxf:value>There are no files.</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2⊙2">
                            <xxf:value>There is one file.</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2⊙3">
                            <xxf:value>There are 1,273 files.</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:format-message() with top-level static xml:lang" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xml:lang="fr">
                <xh:head>
                    <xf:model id="model"/>
                </xh:head>
                <xh:body>
                    <xf:output id="output1"
                                   value="xxf:format-message('A {2,time,short} le {2,date,long}, nous avons détecté {1,number,integer} vaisseaux spatiaux sur la planète {0}.',
                                            ('Mars', 3, xs:dateTime('2010-07-23T19:25:13-07:00')))"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1">
                            <xxf:value>A 19:25 le 23 juillet 2010, nous avons détecté 3 vaisseaux spatiaux sur la planète Mars.</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:format-message() with top-level AVT xml:lang" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xml:lang="{.}">
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <lang>zh</lang>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output id="output1"
                                   value="xxf:format-message('{2,time,HH:mm} {2,date,long}', ('Mars', 3, xs:dateTime('2010-07-23T19:25:13-07:00')))"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:attribute for="xf-1" name="xml:lang">zh</xxf:attribute>
                        <xxf:control id="output1">
                            <xxf:value>19:25 2010年7月23日</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="count() function with external document" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:xh="http://www.w3.org/1999/xhtml"
                    xmlns:xf="http://www.w3.org/2002/xforms"
                    xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
                    xmlns:xs="http://www.w3.org/2001/XMLSchema"
                    xmlns:xxf="http://orbeon.org/oxf/xml/xforms">
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <_/>
                        </xf:instance>
                        <xf:bind ref="/*" calculate="count(doc('https://www.w3schools.com/xml/cd_catalog.xml')//*)"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output id="output1" value="."/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <_>183</_>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1">
                            <xxf:value>183</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:create-document() with insert" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <document/>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <xf:var name="new" value="xxf:create-document()"/>
                            <xf:insert context="$new" origin="xf:element('foo', (xf:attribute('new-attr', 'bar'), 'baz'))"/>
                            <xf:insert ref="instance()" origin="$new"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <foo new-attr="bar">baz</foo>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:create-document() with multiple uses" name="oxf:pipeline">
        <!-- See: http://forge.ow2.org/tracker/index.php?func=detail&aid=316168&group_id=168&atid=350207 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <document/>
                        </xf:instance>

                        <xf:action ev:event="xforms-ready">
                            <xf:var name="new1" value="xxf:create-document()"/>
                            <xf:insert context="$new1" origin="xf:element('foo', (xf:attribute('new-attr', 'bar'), 'baz'))"/>
                            <xf:var name="new2" value="xxf:create-document()"/>
                            <xf:insert ref="instance()" origin="$new2"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xf:seconds-from-dateTime() function" name="oxf:pipeline">
        <!-- See also: http://forge.ow2.org/tracker/index.php?func=detail&aid=316000&group_id=168&atid=350207 -->
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
           <xh:html xmlns:ex="http://example.org">
                <xh:head>
                    <xh:link rel="stylesheet" href="/apps/xforms-test-suite/TestSuite11.css" type="text/css"/>
                    <xf:model/>
                </xh:head>
                <xh:body>
                    <xf:output value="xf:seconds-from-dateTime('1970-01-01T00:00:00Z')" id="xf-output-1"/>
                    <xf:output value="xf:seconds-from-dateTime('foo')" id="xf-output-2"/>
                    <xf:output value="xf:seconds-from-dateTime('2011-06-05T04:03:02') - xf:seconds-from-dateTime('2011-05-04T03:02:01')" id="xf-output-3"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="xf-output-1">
                            <xxf:value>0</xxf:value>
                        </xxf:control>
                        <xxf:control id="xf-output-2">
                            <xxf:value>NaN</xxf:value>
                        </xxf:control>
                        <xxf:control id="xf-output-3">
                            <xxf:value>2768461</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:repeat-position()" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance>
                                <department>
                                    <employee/>
                                    <employee/>
                                </department>
                                <department>
                                    <employee/>
                                    <employee/>
                                    <employee/>
                                </department>
                            </instance>
                        </xf:instance>
                    </xf:model>
                </head>
                <body>
                    <xf:repeat ref="department" id="repeat-department">
                        <xf:output id="o1" value="xxf:repeat-position()"/>
                        <xf:repeat ref="employee" id="repeat-employee">
                            <xf:output id="o2" value="string-join(for $p in (xxf:repeat-position('repeat-department'), xxf:repeat-position(), xxf:repeat-position('repeat-employee')) return xs:string($p), '-')"/>
                        </xf:repeat>
                    </xf:repeat>
                </body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="repeat-department" index="1"/>
                            <control effective-id="repeat-employee⊙1" index="1"/>
                            <control effective-id="repeat-employee⊙2" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="o1⊙1">
                            <xxf:value>1</xxf:value>
                        </xxf:control>
                        <xxf:control id="o2⊙1-1">
                            <xxf:value>1-1-1</xxf:value>
                        </xxf:control>
                        <xxf:control id="o2⊙1-2">
                            <xxf:value>1-2-2</xxf:value>
                        </xxf:control>
                        <xxf:control id="o1⊙2">
                            <xxf:value>2</xxf:value>
                        </xxf:control>
                        <xxf:control id="o2⊙2-1">
                            <xxf:value>2-1-1</xxf:value>
                        </xxf:control>
                        <xxf:control id="o2⊙2-2">
                            <xxf:value>2-2-2</xxf:value>
                        </xxf:control>
                        <xxf:control id="o2⊙2-3">
                            <xxf:value>2-3-3</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="valid() and xxf:valid()" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance>
                                <items>
                                    <element><valid-relevant/></element>
                                    <element><invalid-relevant/></element>
                                    <element><valid-non-relevant/></element>
                                    <element><invalid-non-relevant/></element>
                                </items>
                                <valid-attribute my-att=""/>
                                <valid-descendant><my-element/></valid-descendant>
                                <invalid-attribute my-att=""/>
                                <invalid-descendant><my-element/></invalid-descendant>
                            </instance>
                        </xf:instance>
                        <xf:bind ref="items">
                            <xf:bind ref="element/valid-relevant"/>
                            <xf:bind ref="element/invalid-relevant" constraint="false()"/>
                            <xf:bind ref="element/valid-non-relevant" relevant="false()"/>
                            <xf:bind ref="element/invalid-non-relevant" constraint="false()" relevant="false()"/>
                        </xf:bind>
                        <xf:bind ref="invalid-attribute/@my-att" constraint="false()"/>
                        <xf:bind ref="invalid-descendant/my-element" constraint="false()"/>
                    </xf:model>
                </head>
                <body>
                    <xf:repeat id="repeat1" ref="1 to count(items/*)">
                        <xf:var name="e" value="instance()/items/element[xxf:repeat-position()]"/>
                        <xf:output id="o1" value="xxf:valid($e/*)"/>
                        <xf:output id="o2" value="xxf:valid($e/*, false(), true())"/>
                        <xf:output id="o3" value="xxf:valid($e, true())"/>
                        <xf:output id="o4" value="xxf:valid($e, true(), true())"/>
                    </xf:repeat>

                    <xf:output id="valid-attribute1"    value="xxf:valid(valid-attribute, true())"/>
                    <xf:output id="valid-descendant1"   value="xxf:valid(valid-descendant, true())"/>
                    <xf:output id="invalid-attribute1"  value="xxf:valid(invalid-attribute, true())"/>
                    <xf:output id="invalid-descendant1" value="xxf:valid(invalid-descendant, true())"/>
                    <xf:output id="valid-atomic1"       value="xxf:valid(42)"/>
                    <xf:output id="valid-empty1"        value="xxf:valid(())"/>

                    <xf:repeat id="repeat2" ref="1 to count(items/*)">
                        <xf:var name="e" value="instance()/items/element[xxf:repeat-position()]"/>
                        <xf:output id="o5" value="valid($e/*, false(), false())"/>
                        <xf:output id="o6" value="valid($e/*, true(), false())"/>
                        <xf:output id="o7" value="valid($e, false())"/>
                        <xf:output id="o8" value="valid($e)"/>
                    </xf:repeat>

                    <xf:output id="valid-attribute2"    value="valid(valid-attribute)"/>
                    <xf:output id="valid-descendant2"   value="valid(valid-descendant)"/>
                    <xf:output id="invalid-attribute2"  value="valid(invalid-attribute)"/>
                    <xf:output id="invalid-descendant2" value="valid(invalid-descendant)"/>
                    <xf:output id="valid-atomic2"       value="valid(42)"/>
                    <xf:output id="valid-empty2"        value="valid(())"/>
                </body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="repeat1" index="1"/>
                            <control effective-id="repeat2" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="o1⊙1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o2⊙1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o3⊙1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o4⊙1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o1⊙2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="o2⊙2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="o3⊙2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="o4⊙2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="o1⊙3">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o2⊙3">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o3⊙3">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o4⊙3">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o1⊙4">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="o2⊙4">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o3⊙4">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="o4⊙4">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="valid-attribute1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="valid-descendant1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="invalid-attribute1">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="invalid-descendant1">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="valid-atomic1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="valid-empty1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o5⊙1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o6⊙1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o7⊙1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o8⊙1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o5⊙2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="o6⊙2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="o7⊙2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="o8⊙2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="o5⊙3">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o6⊙3">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o7⊙3">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o8⊙3">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o5⊙4">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="o6⊙4">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="o7⊙4">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="o8⊙4">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="valid-attribute2">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="valid-descendant2">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="invalid-attribute2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="invalid-descendant2">
                            <xxf:value>false</xxf:value>
                        </xxf:control>
                        <xxf:control id="valid-atomic2">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="valid-empty2">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:custom-mip()" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:foo="http://orbeon.org/oxf/xml/foo">
                <xh:head>
                    <xf:model id="my-model">
                        <xf:instance id="my-instance">
                            <fruits>
                                <orange>bloody</orange>
                                <orange>valencia</orange>
                                <apple>green</apple>
                                <apple>red</apple>
                                <apple>iPod</apple>
                                <pear>green</pear>
                                <pear>williams</pear>
                                <pear>yellow</pear>
                            </fruits>
                        </xf:instance>
                        <xf:bind ref="*" foo:bar="if (starts-with(., 'g')) then 'is-g' else 'is-not-g'"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:repeat id="my-repeat" ref="*">
                        <xf:output id="my-output" value="xxf:custom-mip(., 'foo:bar')"/>
                    </xf:repeat>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="my-repeat" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-output⊙1">
                            <xxf:value>is-not-g</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-output⊙2">
                            <xxf:value>is-not-g</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-output⊙3">
                            <xxf:value>is-g</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-output⊙4">
                            <xxf:value>is-not-g</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-output⊙5">
                            <xxf:value>is-not-g</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-output⊙6">
                            <xxf:value>is-g</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-output⊙7">
                            <xxf:value>is-not-g</xxf:value>
                        </xxf:control>
                        <xxf:control id="my-output⊙8">
                            <xxf:value>is-not-g</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#457: case() not re-evaluated after xf:toggle" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="my-model">
                        <xf:toggle ev:event="xforms-ready" case="my-case-2"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:switch id="my-switch">
                        <xf:case id="my-case-1"/>
                        <xf:case id="my-case-2"/>
                    </xf:switch>
                    <xf:output id="my-output" value="case('my-switch')"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="my-switch" case-id="my-case-2"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-switch">
                            <xxf:case id="my-case-2" visibility="visible"/>
                            <xxf:case id="my-case-1" visibility="hidden"/>
                        </xxf:control>
                        <xxf:control id="my-output">
                            <xxf:value>my-case-2</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:get-request-path(), xxf:get-request-parameter(), xxf:get-request-header()" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model"/>
                </xh:head>
                <xh:body>
                    <xf:output id="output1" value="xxf:get-request-path()"/>
                    <xf:output id="output2" value="xxf:get-request-parameter('id')"/>
                    <xf:output id="output3" value="xxf:get-request-header('referer')"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1">
                            <xxf:value>/doc/home-welcome</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2">
                            <xxf:value>12</xxf:value>
                        </xxf:control>
                        <xxf:control id="output3">
                            <xxf:value>http://localhost:8080/orbeon/</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:has-class()" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <elements>
                                <element class=""/>
                                <element class="foo"/>
                                <element class="foo bar"/>
                                <element class="foo bart"/>
                            </elements>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output id="output1" value="string-join(for $e in element return string(xxf:has-class('foo', $e)), ' - ')"/>
                    <xf:output id="output2" value="string-join(for $e in element return string(xxf:has-class('bar', $e)), ' - ')"/>
                    <xf:output id="output3" value="string-join(for $e in element return string(xxf:has-class('baz', $e)), ' - ')"/>
                    <xf:output id="output4" value="string-join(for $b in element/xxf:has-class('foo') return string($b), ' - ')"/>
                    <xf:output id="output5" value="string-join(for $b in element/xxf:has-class('bar') return string($b), ' - ')"/>
                    <xf:output id="output6" value="string-join(for $b in element/xxf:has-class('baz') return string($b), ' - ')"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1">
                            <xxf:value>false - true - true - true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2">
                            <xxf:value>false - false - true - false</xxf:value>
                        </xxf:control>
                        <xxf:control id="output3">
                            <xxf:value>false - false - false - false</xxf:value>
                        </xxf:control>
                        <xxf:control id="output4">
                            <xxf:value>false - true - true - true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output5">
                            <xxf:value>false - false - true - false</xxf:value>
                        </xxf:control>
                        <xxf:control id="output6">
                            <xxf:value>false - false - false - false</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:classes()" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <elements>
                                <element class=""/>
                                <element class="foo"/>
                                <element class="foo bar"/>
                                <element class="foo bart"/>
                            </elements>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output id="output1" value="string-join(for $e in element return xxf:classes($e), ' - ')"/>
                    <xf:output id="output2" value="string-join(element/xxf:classes(), ' - ')"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1">
                            <xxf:value>foo - foo - bar - foo - bart</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2">
                            <xxf:value>foo - foo - bar - foo - bart</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="id()" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance" xxf:index="id">
                            <document>
                                <e id="id1" p="1">
                                    <e>
                                        <e id="id2" p="2"/>
                                        <e id="id3" p="3"/>
                                    </e>
                                </e>
                                <e>
                                    <e id="id1" p="4"/><!-- duplicate id -->
                                </e>
                            </document>
                        </xf:instance>
                        <xf:action ev:event="xforms-ready">
                            <!-- Initial state -->
                            <xf:message value="string-join(for $id in distinct-values(//@id) return id($id)/@p, '-')"/>
                            <!-- Update @id attribute value -->
                            <xf:setvalue ref="e[1]/@id" value="'id4'"/>
                            <xf:message value="string-join(for $id in distinct-values(//@id) return id($id)/@p, '-')"/>
                            <!-- Remove tree -->
                            <xf:delete ref="e[2]"/>
                            <xf:message value="string-join(for $id in distinct-values(//@id) return id($id)/@p, '-')"/>
                            <!-- Insert tree -->
                            <xf:insert ref="*" origin="xf:element('e', (xf:attribute('id', 'id5'), xf:attribute('p', '5')))"/>
                            <xf:message value="string-join(for $id in distinct-values(//@id) return id($id)/@p, '-')"/>
                            <!-- Replace existing @id attribute -->
                            <xf:insert context="//e[@p = '5']" origin="xf:attribute('id', 'id6')"/>
                            <xf:message value="string-join(for $id in (distinct-values(//@id), 'id5') return id($id)/@p, '-')"/>
                            <!-- Insert new @id attribute -->
                            <xf:insert ref="*" origin="xf:element('e', xf:attribute('p', '7'))"/>
                            <xf:insert context="//e[@p = '7']" origin="xf:attribute('id', 'id7')"/>
                            <xf:message value="string-join(for $id in distinct-values(//@id) return id($id)/@p, '-')"/>
                        </xf:action>
                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="instance" model-id="model">
                                <document>
                                    <e id="id4" p="1">
                                        <e>
                                            <e id="id2" p="2"/>
                                            <e id="id3" p="3"/>
                                        </e>
                                    </e>
                                    <e p="5" id="id6"/>
                                    <e p="7" id="id7"/>
                                </document>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                    <xxf:message level="modal">1-2-3</xxf:message>
                    <xxf:message level="modal">1-2-3-4</xxf:message>
                    <xxf:message level="modal">1-2-3</xxf:message>
                    <xxf:message level="modal">1-2-3-5</xxf:message>
                    <xxf:message level="modal">1-2-3-5</xxf:message>
                    <xxf:message level="modal">1-2-3-5-7</xxf:message>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:split()" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <elements>
                                <element>foo bar baz</element>
                                <element value="foo bar baz"/>
                            </elements>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output id="output1" value="string-join(xxf:split(' foo  bar   baz '), ' - ')"/>
                    <xf:output id="output2" value="string-join(xxf:split('foo$bar_baz', '$_'), ' - ')"/>
                    <xf:output id="output3" value="string-join(element[1]/xxf:split(), ' - ')"/>
                    <xf:output id="output4" value="string-join(element[2]/@value/xxf:split(), ' - ')"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1">
                            <xxf:value>foo - bar - baz</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2">
                            <xxf:value>foo - bar - baz</xxf:value>
                        </xxf:control>
                        <xxf:control id="output3">
                            <xxf:value>foo - bar - baz</xxf:value>
                        </xxf:control>
                        <xxf:control id="output4">
                            <xxf:value>foo - bar - baz</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="xxf:image-metadata()" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <file>oxf:/org/orbeon/oxf/util/hs-2010-13-a-web.jpg</file>
                        </xf:instance>
                        <xf:bind ref="." constraint="abs(xs:decimal(xxf:image-metadata(., 'width')) div xs:decimal(xxf:image-metadata(., 'height')) - 1) le 0.1"/>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output id="output1" value="valid(.)"/>
                    <xf:output id="output2" value="string-join(for $i in ('width', 'height', 'mediatype') return concat($i, ': ', string(xxf:image-metadata(., $i))), ' | ')"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response>
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="output1">
                            <xxf:value>true</xxf:value>
                        </xxf:control>
                        <xxf:control id="output2">
                            <xxf:value>width: 400 | height: 368 | mediatype: image/jpeg</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#2642: xxf:binding-context() function within repeat" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <instance>
                                <item>1</item>
                                <item>2</item>
                                <item>3</item>
                            </instance>
                        </xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:repeat id="my-repeat" ref="item">
                        <xf:group id="my-group">
                            <xf:message
                                event="xforms-enabled"
                                value="xxf:binding-context('my-group')/string()"/>
                        </xf:group>
                    </xf:repeat>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response xmlns:xxf="http://orbeon.org/oxf/xml/xforms">
                <xxf:dynamic-state>
                    <dynamic-state>
                        <controls>
                            <control effective-id="my-repeat" index="1"/>
                        </controls>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                    <xxf:message level="modal">1</xxf:message>
                    <xxf:message level="modal">2</xxf:message>
                    <xxf:message level="modal">3</xxf:message>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#2812: xxf:function-library" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model" xxf:function-library="org.orbeon.oxf.xforms.function.TestFooFunctionLibrary">
                        <xf:instance id="instance">
                            <_/>
                        </xf:instance>

                        <xf:message
                            event="xforms-ready"
                            xmlns:foo="http://orbeon.org/oxf/xml/foo"
                            value="foo:echo('Ornithorhynchus anatinus')"/>

                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response xmlns:xxf="http://orbeon.org/oxf/xml/xforms">
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                    <xxf:message level="modal">Ornithorhynchus anatinus</xxf:message>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#2816: XPath: support let expressions" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="instance">
                            <_/>
                        </xf:instance>

                        <xf:message
                            event="xforms-ready"
                            value="
                                let $a := 'Lorem ipsum dolor',
                                    $b := 'sit amet',
                                    $c := string-join(($a, $b), ' ')
                                return
                                    concat($c, ', consectetur adipiscing elit.')
                            "/>

                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response xmlns:xxf="http://orbeon.org/oxf/xml/xforms">
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                    <xxf:message level="modal">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</xxf:message>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#2942: XPath functions to convert between JSON and XML" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html>
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="results">
                            <result/>
                        </xf:instance>

                        <xf:action
                            event="xforms-model-construct-done"
                            xmlns:ct="java:org.orbeon.oxf.json.ConverterTest">

                            <xf:var name="json" value="ct:expectedJsonStrings()"/>
                            <xf:var name="xml"  value="ct:expectedXmlStrings()"/>

                            <xf:var name="size" value="count($json)"/>

                            <xf:setvalue
                                ref="instance()"
                                value="
                                    $size -
                                    count(
                                        (
                                            for $i in 1 to $size
                                            return
                                                let $current-json := $json[$i],
                                                    $current-xml  := $xml[$i]
                                                return
                                                    ct:compareXMLDocumentsIgnoreNamespacesInScope(
                                                        xxf:json-to-xml($current-json),
                                                        $current-xml
                                                    )
                                        )[. = true()]
                                    )
                                "/>

                        </xf:action>

                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response xmlns:xxf="http://orbeon.org/oxf/xml/xforms">
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="results" model-id="model">
                                <result>0</result>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Map functions" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:map="http://www.w3.org/2005/xpath-functions/map">
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="results">
                            <results>
                                <number/>
                                <string/>
                                <node-name/>
                                <sequence/>
                            </results>
                        </xf:instance>

                        <xf:action event="xforms-ready">

                            <xf:var
                                name="map"
                                value="
                                    map:merge(
                                        (
                                            map:entry('number',   42),
                                            map:entry('string',   'forty-two'),
                                            map:entry('node',     instance()),
                                            map:entry('sequence', 1 to 10)
                                        )
                                    )"/>

                            <xf:setvalue ref="number"    value="map:get($map, 'number')"/>
                            <xf:setvalue ref="string"    value="map:get($map, 'string')"/>
                            <xf:setvalue ref="node-name" value="name(map:get($map, 'node'))"/>
                            <xf:setvalue ref="sequence"  value="string-join(for $v in map:get($map, 'sequence') return string($v), ' ')"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response xmlns:xxf="http://orbeon.org/oxf/xml/xforms">
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="results" model-id="model">
                                <results>
                                    <number>42</number>
                                    <string>forty-two</string>
                                    <node-name>results</node-name>
                                    <sequence>1 2 3 4 5 6 7 8 9 10</sequence>
                                </results>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="Array functions" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:array="http://www.w3.org/2005/xpath-functions/array">
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="results">
                            <results>
                                <size/>
                                <number/>
                                <number2/>
                                <string/>
                                <node-name/>
                                <sequence/>
                            </results>
                        </xf:instance>

                        <xf:action event="xforms-ready">

                            <xf:var
                                name="array"
                                value="
                                    array:append(
                                        array:append(
                                            array:append(
                                                array:append(
                                                    array:join(()),
                                                    42
                                                ),
                                                'forty-two'
                                            ),
                                            instance()
                                        ),
                                        1 to 10
                                    )"/>

                            <xf:setvalue ref="size"      value="array:size($array)"/>
                            <xf:setvalue ref="number"    value="array:get($array, 1)"/>

                            <xf:var
                                name="updated"
                                value="array:put($array, 1, 43)"/>

                            <xf:setvalue ref="string"    value="array:get($updated, 2)"/>
                            <xf:setvalue ref="node-name" value="name(array:get($updated, 3))"/>
                            <xf:setvalue ref="number2"   value="array:get($updated, 1)"/>
                            <xf:setvalue ref="sequence"  value="string-join(for $v in array:get($updated, 4) return string($v), ' ')"/>
                        </xf:action>

                    </xf:model>
                </xh:head>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response xmlns:xxf="http://orbeon.org/oxf/xml/xforms">
                <xxf:dynamic-state>
                    <dynamic-state>
                        <instances>
                            <instance id="results" model-id="model">
                                <results>
                                    <size>4</size>
                                    <number>42</number>
                                    <number2>43</number2>
                                    <string>forty-two</string>
                                    <node-name>results</node-name>
                                    <sequence>1 2 3 4 5 6 7 8 9 10</sequence>
                                </results>
                            </instance>
                        </instances>
                    </dynamic-state>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values/>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="#3468: saxon:parse() must disable external entities" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:array="http://www.w3.org/2005/xpath-functions/array">
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="results"><empty/></xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output
                        id="my-output"
                        value="
                            xxf:serialize(
                                saxon:parse(
                                    concat(
                                        '&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>',
                                        '&lt;!DOCTYPE foo [&lt;!ENTITY bar SYSTEM &quot;file:///etc/passwd&quot;>]>',
                                        '&lt;foo>&lt;test>&amp;bar;&lt;/test>&lt;/foo>'
                                    )
                                ),
                                'xml'
                            )"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response xmlns:xxf="http://orbeon.org/oxf/xml/xforms">
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-output">
                            <xxf:value>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;foo&gt;&lt;test/&gt;&lt;/foo&gt;</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

    <test description="For #2428: xxf:process-template()" name="oxf:pipeline">
        <input name="config" href="wrap-xforms-state.xpl"/>
        <input name="document">
            <xh:html xmlns:map="http://www.w3.org/2005/xpath-functions/map">
                <xh:head>
                    <xf:model id="model">
                        <xf:instance id="results"><empty/></xf:instance>
                    </xf:model>
                </xh:head>
                <xh:body>
                    <xf:output
                        id="my-output"
                        value="
                            xxf:process-template(
                                'My name is {$name}. I am {$age} year-old. I own $ {$amount}.',
                                'en',
                                map:merge(
                                    (
                                        map:entry('name',   'Marco Polo'),
                                        map:entry('age',    42),
                                        map:entry('amount', 12.99)
                                    )
                                )
                            )"/>
                </xh:body>
            </xh:html>
        </input>
        <output name="response">
            <xxf:event-response xmlns:xxf="http://orbeon.org/oxf/xml/xforms">
                <xxf:dynamic-state>
                    <dynamic-state/>
                </xxf:dynamic-state>
                <xxf:action>
                    <xxf:control-values>
                        <xxf:control id="my-output">
                            <xxf:value>My name is Marco Polo. I am 42 year-old. I own $ 12.99.</xxf:value>
                        </xxf:control>
                    </xxf:control-values>
                </xxf:action>
            </xxf:event-response>
        </output>
    </test>

</group>
