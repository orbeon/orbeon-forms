<!--
  Copyright (C) 2011 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl xmlns:xh="http://www.w3.org/1999/xhtml"
         xmlns:xf="http://www.w3.org/2002/xforms"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
         xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
         xmlns:fb="http://orbeon.org/oxf/xml/form-builder"
         xmlns:saxon="http://saxon.sf.net/"
         xmlns:xbl="http://www.w3.org/ns/xbl"
         xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
         xmlns:frf="java:org.orbeon.oxf.fr.FormRunner"
         xmlns:fbf="java:org.orbeon.oxf.fb.FormBuilderXPathApi"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xmlns:oxf="http://www.orbeon.com/oxf/processors">

    <xbl:binding id="fb-dialog-control-settings" element="fb|dialog-control-settings" xxbl:mode="binding">
        <xbl:handlers>
            <!-- Read data upon dialog open -->
            <xbl:handler event="fb-show-dialog fb-load" phase="target" defaultAction="cancel">

                <xf:var name="form" value="xxf:binding('fb-dialog-control-settings')"/>

                <xf:action type="xpath">fbf:selectCellForControlId(event('control-id'))</xf:action>

                <!-- Clear all local values -->
                <xf:setvalue iterate="$i//*[not(*)] | $i/*//@*" ref="."/>
                <xf:delete ref="$i/(label, hint, help, text)/fr:param"/>

                <xf:setvalue ref="$i/original-control-name" value="frf:controlNameFromId(event('control-id'))"/>
                <xf:setvalue ref="$i/control-name"          value="$i/original-control-name"/>

                <xf:setvalue ref="$i/control-names"         value="string-join(fbf:getAllNamesInUse(), ' ')"/>

                <xf:var name="control"                      value="fbf:findControlByNameOrEmpty($i/control-name)"/>
                <xf:var name="resources"                    value="frf:currentFormResources()"/>

                <!-- Split out classes -->
                <xf:var name="standard-classes"             value="$resources/dialog-control-settings/(options | email-options)/item/value/string(), 'fr-attachment', 'fr-static-attachment'"/>
                <xf:var name="control-classes"              value="xxf:split($control/@class)"/>

                <xf:setvalue ref="$i/standard-classes"      value="string-join($control-classes[. = $standard-classes], ' ')"/>
                <xf:setvalue ref="$i/custom-classes"        value="string-join($control-classes[not(. = $standard-classes)], ' ')"/>

                <!-- Figure which one of label, hint, help, or text the control supports -->
                <xf:action>
                    <xf:var
                        name="xbl-binding"
                        value="fbf:bindingForControlElementOrEmpty($control)"/>
                    <xf:action iterate="$i/(label, hint, help, text)">
                        <xf:var
                            name="support-element-name"
                            value="local-name()"/>
                        <xf:setvalue
                            ref="@supported"
                            value="
                                fbf:hasViewTemplateSupportElementFor(
                                    $xbl-binding,
                                    $support-element-name
                                )"/>
                    </xf:action>
                </xf:action>

                <!-- Clear default alert -->
                <xf:var name="default-alert" value="$i/default-alert"/>
                <xf:delete ref="$default-alert/node()"/>

                <xf:insert
                    context="$default-alert"
                    origin="fbf:readDefaultAlertAsXML($i/control-name)"/>

                <!-- Clear validations -->
                <xf:var name="validations" value="$i/validations"/>
                <xf:delete ref="$validations/node()"/>

                <!-- Read required, datatype, and constraint validations -->
                <xf:insert
                    context="$validations"
                    origin="fbf:readValidationsAsXML($i/control-name)"/>

                <!--  Insert an empty `formula` validation in the end to make it more discoverable by the user -->
                <xf:insert
                    if="empty($validations/validation[not(@type = ('required', 'datatype'))])"
                    ref="$validations/validation"
                    origin="instance('validation-constraint-template')"/>

                <!--  Read appearances -->
                <xf:dispatch
                    name="reload-appearances"
                    targetid="model">
                    <xf:property name="is-initial-load"       value="true()"/>
                    <xf:property name="previous-builtin-type" value="()"/>
                    <xf:property name="new-builtin-type"      value="$i/validations/validation[@type = 'datatype']/builtin-type/string()"/>
                </xf:dispatch>

                <!--
                    Force required if the datatype implies it.

                    In general we want:

                        type == xs:* => required == true()

                    But we don't write over a custom required XPath expression, as that would be data loss. The
                    inconsistency will be resolved upon write, as, for a builtin type:

                        required == false() | customXPath => type == xf:*

                    NOTE: datatype validation uses true/false, and required validation uses true()/false()/customXPath.
                -->
                <xf:setvalue
                    if="$validations/validation[@type = 'datatype']/builtin-type-required = 'true'
                        and $validations/validation[@type = 'required']/required = 'false()'"
                    ref="$validations/validation[@type = 'required']/required"
                    value="'true()'"/>

                <!-- Read MIPs -->
                <xf:setvalue ref="$i/relevant"   value="fbf:readDenormalizedCalculatedMip($i/control-name, 'relevant')"/>
                <xf:setvalue ref="$i/readonly"   value="fbf:readDenormalizedCalculatedMip($i/control-name, 'readonly')"/>
                <xf:setvalue ref="$i/calculate"  value="fbf:readDenormalizedCalculatedMip($i/control-name, 'calculate')"/>
                <xf:setvalue ref="$i/default"    value="fbf:readDenormalizedCalculatedMip($i/control-name, 'default')"/>
                <xf:setvalue ref="$i/whitespace" value="fbf:readDenormalizedCalculatedMip($i/control-name, 'whitespace')"/>

                <!-- Read Label/Hint/Help -->
                <xf:action iterate="$i/(label, hint, help, text)[@supported = 'true']">

                    <xf:var name="lhh" value="local-name()"/>

                    <xf:setvalue
                        ref="value"
                        value="fbf:getControlLhhOrEmpty($i/control-name, $lhh)"/>

                    <xf:setvalue
                        ref="@isHTML"
                        value="if (fbf:isControlLhhatHtmlMediatype($i/control-name, $lhh)) then 'true' else ''"/>

                    <xf:insert
                        ref="value"
                        origin="fbf:getControlLhhtParams($i/control-name, $lhh)"/>

                </xf:action>

                <xf:setvalue
                    ref="$i/prev-control-id"
                    value="
                        fbf:findNextControlId(
                            $i/control-name,
                            'previous'
                        )"/>
                <xf:setvalue
                    ref="$i/next-control-id"
                    value="
                        fbf:findNextControlId(
                            $i/control-name,
                            'next'
                        )"/>

                <!-- Remove all namespace nodes on the root element and insert those from the external xf:bind. This
                     allows scoping namespaces for XPath expressions validated with xxf:XPath2. -->
                <xf:delete ref="$i/namespace::node()"/>
                <xf:insert context="$i" origin="frf:findBindByNameOrEmpty($form, $i/control-name)/namespace::node()"/>

                <xf:dispatch
                    name="fb-process-xbl-fb-control-details"
                    targetid="fb-dialog-control-settings">
                    <xf:property name="datatype-validation" value="$i/validations/validation[@type = 'datatype']"/>
                </xf:dispatch>

                <xxf:show dialog="dialog"/>

                <!-- Tell custom settings to initialize -->
                <xf:dispatch name="fb-initialize" targetid="fb-custom-control-settings">
                    <xf:property name="form"                  value="$form/root()"/>
                    <xf:property name="form-instance"         value="frf:formInstanceRoot($form)"/>
                    <xf:property name="metadata-instance"     value="frf:metadataInstanceRootOpt($form)"/>
                    <xf:property name="original-control-id"   value="event('control-id')"/>
                    <xf:property name="original-control-name" value="$i/original-control-name"/>
                    <xf:property name="data-holders"          value="fbf:findDataHolders($i/original-control-name)"/>
                </xf:dispatch>

                <xf:setvalue
                    iterate="instance('modified')/@*"
                    ref="."
                    value="false()"/>

            </xbl:handler>

            <xbl:handler event="fb-process-xbl-fb-control-details">
                <!-- Process `fb:control-details` -->
                <!-- NOTE: Part of this is duplicated in `dialog-form-settings.xbl`. -->

                <xf:delete
                    ref="instance('dynamic')/*"/>

                <xf:var
                    name="control-document"
                    value="xxf:create-document()"/>
                <xf:insert
                    context="$control-document"
                    origin="fbf:findControlByNameOrEmpty($i/original-control-name)"/>

                <xf:var
                    name="control"
                    value="$control-document/*"/>
                <xf:var
                    name="new-appearance"
                    value="event('new-appearance')"/>
                <xf:var
                    name="datatype-validation"
                    value="event('datatype-validation')"/>

                <xf:var
                    name="xbl-binding"
                    value="
                        fbf:findNewControlBinding(
                            $i/original-control-name,
                            $datatype-validation,
                            ($new-appearance, $i/appearances/@selection/string())[xxf:non-blank()][1]
                        )"/>

                <xf:var
                    name="control-details"
                    value="$xbl-binding/fb:metadata/fb:control-details"/>

                <xf:action if="exists($control-details)">

                    <xf:var
                        name="mutable-control-details"
                        value="xxf:mutable-document($control-details)/*"/>

                    <!-- Process the LHHA of each details control -->
                    <xf:var name="current-language" value="fbf:currentLang()"/>
                    <xf:action iterate="$mutable-control-details//(xf:label, xf:hint, xf:help, xf:alert)">
                        <xf:var name="lhha" value="."/>
                        <!-- If it has a lang attribute, only keep if matches the current language -->
                        <xf:delete if="exists($lhha/@lang) and $lhha/@lang != $current-language" ref="$lhha"/>
                        <!-- If it has a ref="$resources/...", evaluate it -->
                        <xf:action if="starts-with($lhha/@ref, '$resources/')">
                            <xf:var name="resource-path" value="substring-after($lhha/@ref, '$resources/')"/>
                            <xf:setvalue ref="$lhha" value="$resources/saxon:evaluate($resource-path)"/>
                            <xf:delete ref="$lhha/@ref"/>
                        </xf:action>
                    </xf:action>

                    <!-- Add/remove attributes on the control to match those on the template -->
                    <xf:action if="exists($new-appearance)">
                        <xf:var
                            name="control-template"
                            value="$xbl-binding/fb:metadata/fb:templates/fb:view/*"/>
                        <xf:action iterate="$control-template/@*">
                            <xf:var name="template-attribute" value="."/>
                            <xf:insert
                                if="empty($control/@*[local-name() = $template-attribute/local-name()])"
                                context="$control"
                                origin="$template-attribute"/>
                        </xf:action>
                        <xf:action iterate="$control/@*">
                            <xf:var name="control-attribute" value="."/>
                            <xf:delete
                                if="not(
                                        (: Always keep `id` and `bind` :)
                                        $control-attribute/local-name() = ('id', 'bind')
                                    ) and
                                    empty(
                                        $control-template/@*[
                                            local-name() = $control-attribute/local-name()
                                        ]
                                    )"
                                ref="$control-attribute"/>
                        </xf:action>
                    </xf:action>

                    <!-- Complete the custom form -->
                    <xf:insert
                        ref="instance('dynamic')"
                        origin="instance('dynamic-template')"/>
                    <xf:insert
                        context="instance('dynamic')//xf:model"
                        ref="*"
                        origin="$mutable-control-details/xf:model/*"/>
                    <xf:insert
                        context="instance('dynamic')//xf:instance"
                        origin="$control"/>
                    <xf:insert
                        context="instance('dynamic')//xh:body"
                        origin="$mutable-control-details/(* except xf:model)"/>

                </xf:action>
            </xbl:handler>

            <!-- Save data upon close unless the sub-form is not valid. Do this upon capture phase so that we can
                 process values, including custom control settings, before the dialog is actually closed and becomes
                 non-relevant. -->
            <xbl:handler
                event="xxforms-dialog-close"
                observer="group-around-dialog"
                phase="capture"
                if="event('fb-save') and $i/@valid = 'true'">

                <xf:dispatch
                    name="fb-save"
                    targetid="fb-dialog-control-settings"/>

                <!-- Don't leave this stuff around -->
                <xf:delete
                    ref="instance('dynamic')/*"/>

            </xbl:handler>
            <xbl:handler event="fb-save" phase="target">

                <xf:var name="form" value="xxf:binding('fb-dialog-control-settings')"/>

                <xf:action if="instance('modified')/@* = true()">

                    <xf:var name="old-name" value="$i/original-control-name/string()"/>
                    <xf:var name="new-name" value="$i/control-name/string()"/>
                    <xf:var name="control"  value="fbf:findControlByNameOrEmpty($old-name)"/>

                    <xf:action type="xpath">
                        fbf:saveControlToUndoStack($old-name, $new-name)
                    </xf:action>

                    <xf:action if="instance('modified')/@dynamic = true()">

                        <xf:var
                            name="original-control-has-custom-editor"
                            value="exists(fbf:bindingForControlElementOrEmpty($control)/fb:metadata/fb:control-details)"/>

                        <xf:var
                            name="current-control-has-custom-editor"
                            value="exists(instance('dynamic')//xf:instance[1]/*)"/>

                        <!--
                            Update custom XBL properties
                            https://github.com/orbeon/orbeon-forms/issues/4592
                        -->
                        <xf:delete
                            if="$original-control-has-custom-editor or $current-control-has-custom-editor"
                            ref="$control/(@* except (@id, @bind))"/>

                        <xf:action if="$current-control-has-custom-editor">


                            <xf:delete
                                ref="$control/node()"/>

                            <xf:insert
                                context="$control"
                                origin="instance('dynamic')//xf:instance[1]/*/(@* except (@id, @bind), node())"/>

                        </xf:action>
                    </xf:action>

                    <xf:action if="instance('modified')/@i = true()">

                        <!-- Rename if needed -->
                        <xf:action type="xpath">
                            fbf:renameControlIfNeeded($old-name, $new-name, false())
                        </xf:action>
                        <!-- Write classes -->
                        <xf:var name="classes" value="distinct-values((xxf:split($i/standard-classes), xxf:split($i/custom-classes)))"/>
                        <xf:delete if="count($classes) = 0" ref="$control/@class"/>
                        <xf:insert if="count($classes) > 0" context="$control" origin="xf:attribute('class', string-join($classes, ' '))"/>

                        <xf:action type="xpath">
                            (: Write alerts and constraints :)
                            fbf:writeAlertsAndValidationsAsXML(
                                $i/control-name,
                                $i/appearances/@selection,
                                $i/default-alert/alert,
                                $i/validations/validation
                            ),
                            (: Write MIPs :)
                            for $mip in ('default', 'calculate', 'relevant', 'readonly', 'whitespace') return
                                fbf:writeAndNormalizeCalculatedMip($i/control-name, $mip, $i/*[name() = $mip]),
                            for $lh in $i/(label, hint, help, text)[@supported = 'true'] return
                                fbf:setControlLabelHintHelpOrText(
                                    $i/control-name,
                                    local-name($lh),
                                    $lh/value,
                                    $lh/fr:param,
                                    $lh/@isHTML = 'true'
                                )
                        </xf:action>
                    </xf:action>
                </xf:action>

                <!-- Tell custom settings to apply changes -->
                <xf:dispatch name="fb-apply" targetid="fb-custom-control-settings">
                    <xf:property name="form"                  value="$form/root()"/>
                    <xf:property name="form-instance"         value="frf:formInstanceRoot($form)"/>
                    <xf:property name="metadata-instance"     value="frf:metadataInstanceRootOpt($form)"/>
                    <xf:property name="control-name"          value="$i/control-name"/>
                    <xf:property name="data-holders"          value="fbf:findDataHolders($i/control-name)"/>
                </xf:dispatch>

            </xbl:handler>
            <xbl:handler
                event="DOMActivate"
                observer="control-name-input control-custom-input save-button prev-button next-button control-label-input control-hint-input">

                <xf:action if="$i/@valid = 'true'">
                    <xf:var
                        name="must-close"
                        value="not(event('xxf:targetid') = ('prev-button', 'next-button'))"/>

                    <xxf:hide if="$must-close" dialog="dialog">
                        <xf:property name="fb-save" value="true()"/>
                    </xxf:hide>

                    <xf:dispatch
                        if="not($must-close)"
                        name="fb-save"
                        targetid="fb-dialog-control-settings"/>
                </xf:action>

                <!-- Mark all visited if the data is invalid -->
                <xxf:setvisited
                    if="not($i/@valid = 'true')"
                    control="dialog"
                    recurse="true"/>

            </xbl:handler>
            <!-- Prev and Next buttons -->
            <xbl:handler event="DOMActivate" observer="prev-button next-button" if="$i/@valid = 'true'">

                <xf:var
                    name="new-control-id"
                    value="
                        $i/(
                            if (event('xxf:targetid') = 'prev-button') then
                                prev-control-id
                            else
                                next-control-id
                        )/string()"/>

                <xf:dispatch if="exists($new-control-id)" name="fb-load" targetid="fb-dialog-control-settings">
                    <xf:property name="control-id" value="$new-control-id"/>
                </xf:dispatch>

            </xbl:handler>
            <!-- Close and cancel upon DOMActivate -->
            <xbl:handler event="DOMActivate" observer="cancel-button">
                <xxf:hide dialog="dialog">
                    <xf:property name="fb-save" value="false()"/>
                </xxf:hide>
            </xbl:handler>
        </xbl:handlers>
        <xbl:implementation>
            <xf:model id="model">

                <xf:action event="reload-appearances">

                    <xf:var name="is-initial-load"       value="event('is-initial-load')"/>
                    <xf:var name="previous-builtin-type" value="event('previous-builtin-type')"/>
                    <xf:var name="new-builtin-type"      value="event('new-builtin-type')"/>

                    <xf:var name="appearances"           value="$i/appearances"/>
                    <xf:var name="current-appearance"    value="$appearances/@selection/string()"/>

                    <xf:delete ref="$appearances/node()"/>
                    <xf:insert
                        context="$appearances"
                        origin="
                            fbf:possibleAppearancesByControlNameAsXML(
                                $i/control-name,
                                $is-initial-load,
                                $new-builtin-type,
                                $current-appearance
                            )"/>
                    <!--  Assume there is only one active appearance at a given time for now. At the XForms level there
                          can be multiple appearances. We do have fr:character-counter which could wrap a control with an
                          appearance, for example we could have `<xf:textarea appearance="xxf:autosize character-counter">`. -->
                    <xf:setvalue
                        ref="$appearances/@selection"
                        value="
                            (
                                $appearances/appearance[@current = 'true'],
                                $appearances/appearance[1]
                            )[1]/value"/>

                    <!--
                        Reload bindings if needed
                        https://github.com/orbeon/orbeon-forms/issues/4607
                    -->
                    <xf:action if="not($is-initial-load)">

                        <!-- Create a temporary `validation` element as that's what `findNewControlBinding()` expects -->
                        <xf:var
                            name="mutable-datatype-validation"
                            value="xxf:mutable-document($i/validations/validation[@type = 'datatype'])/*"/>

                        <xf:setvalue
                            ref="$mutable-datatype-validation/builtin-type"
                            value="$previous-builtin-type"/>
                        <xf:var
                            name="original-xbl-binding"
                            value="
                                fbf:findNewControlBinding(
                                    $i/original-control-name,
                                    $mutable-datatype-validation,
                                    $current-appearance[xxf:non-blank()]
                                )"/>

                        <xf:setvalue
                            ref="$mutable-datatype-validation/builtin-type"
                            value="$new-builtin-type"/>
                        <xf:var
                            name="current-xbl-binding"
                            value="
                                fbf:findNewControlBinding(
                                    $i/original-control-name,
                                    $mutable-datatype-validation,
                                    $current-appearance[xxf:non-blank()]
                                )"/>
                        <xf:var
                            name="binding-changed"
                            value="not($original-xbl-binding is $current-xbl-binding)"/>

                        <xf:dispatch
                            if="$binding-changed"

                            name="fb-process-xbl-fb-control-details"
                            targetid="fb-dialog-control-settings">
                            <xf:property name="datatype-validation" value="$mutable-datatype-validation"/>
                        </xf:dispatch>
                    </xf:action>
                </xf:action>

                <xf:instance id="i" xxf:exclude-result-prefixes="#all">
                    <_ valid="true">
                        <original-control-name/>    <!-- So we can find back the control when saving if users change the name -->
                        <control-name/>             <!-- Possibly new name set by users -->
                        <standard-classes/>         <!-- fr-summary, fr-search... -->
                        <custom-classes/>           <!-- All custom classes except the standard ones -->
                        <control-names/>            <!-- All used control names in the form, to check that new name doesn't conflict with existing id -->

                        <default-alert
                            global-default-alert-message=""
                            readonly-alert-message=""/>

                        <appearances selection=""/>
                        <validations/>

                        <relevant/>
                        <readonly/>
                        <calculate/>
                        <default/>
                        <whitespace/>

                        <label isHTML="" supported="">
                            <value/>
                            <!--<fr:param/>-->
                        </label>
                        <hint  isHTML="" supported="">
                            <value/>
                            <!--<fr:param/>-->
                        </hint>
                        <help  isHTML="" supported="">
                            <value/>
                            <!--<fr:param/>-->
                        </help>
                        <text  isHTML="" supported="">
                            <value/>
                            <!--<fr:param/>-->
                        </text>

                        <prev-control-id/>
                        <next-control-id/>
                    </_>
                </xf:instance>

                <xf:var name="i" value="instance()"/>

                <xf:instance id="dynamic">
                    <xh:html/>
                </xf:instance>

                <xf:instance id="dynamic-template" xxf:readonly="true">
                    <xh:html>
                        <xh:head>
                            <xf:model id="custom-model">
                                <xf:instance id="custom-instance"/>
                            </xf:model>
                        </xh:head>
                        <xh:body/>
                    </xh:html>
                </xf:instance>

                <xf:instance id="modified">
                    <modified i="" dynamic=""/>
                </xf:instance>

                <xf:setvalue
                    event="xforms-insert xforms-delete xxforms-replace xxforms-value-changed"
                    observer="i"
                    ref="instance('modified')/@i"
                    value="true()"/>

                <xf:setvalue
                    event="xforms-insert xforms-delete xxforms-replace xxforms-value-changed"
                    observer="dynamic"
                    ref="instance('modified')/@dynamic"
                    value="true()"/>

                <xf:instance id="validation-constraint-template" xxf:exclude-result-prefixes="#all">
                    <validation id="" type="formula" level="error" default-alert="true">
                        <constraint expression="" argument=""/>
                        <alert message=""/>
                    </validation>
                </xf:instance>

                <xf:bind ref="control-name"
                    type="xs:NCName"
                    xxf:whitespace="trim"
                    readonly="false()"
                     constraint="
                        . = $i/original-control-name or
                        not(
                            ends-with(., '-iteration') or
                            . = xxf:split($i/control-names)
                        )"/>

                <xf:bind ref="default-alert">
                    <xf:bind
                        ref="alert/@global"
                        type="xs:boolean"/>
                    <xf:bind
                        ref="alert/@message"
                        xxf:whitespace="trim"
                        readonly="../@global = true()"/>
                    <xf:bind
                        ref="@global-default-alert-message"
                        calculate="xxf:r('detail.labels.alert', '|fr-fr-resources|')"/><!-- FIXME: This uses FB's current language, not the edited form's -->
                    <xf:bind
                        id="default-alert"
                        ref="if (alert/@global = true())
                             then @global-default-alert-message
                             else alert/@message"/>
                    <!-- Keep copy of default alert, whether default for control or global default -->
                    <xf:bind
                        ref="@readonly-alert-message"
                        calculate="bind('default-alert')"/>
                </xf:bind>

                <xf:bind ref="appearances/@selection" readonly="count(../appearance) le 1"/>

                <xf:var
                    name="string-constraints"
                    value="'max-length', 'min-length', 'length', 'pattern'"/>

                <xf:var
                    name="noargs-integer-constraints"
                    value="'non-negative', 'negative', 'non-positive', 'positive'"/>

                <xf:var
                    name="min-max-constraints"
                    value="'max-inclusive', 'max-exclusive', 'min-inclusive', 'min-exclusive'"/>

                <xf:var
                    name="integer-constraints"
                    value="$noargs-integer-constraints, 'total-digits', 'pattern', $min-max-constraints"/>

                <xf:var
                    name="decimal-constraints"
                    value="$integer-constraints, 'fraction-digits'"/>

                <!-- 2017-03-22: Unused still. -->
                <!-- `$min-max-constraints` -->
                <xf:var
                    name="date-arg-constraints"
                    value="'excluded-dates'"/>

                <xf:var
                    name="date-constraints"
                    value="$date-arg-constraints"/>

                <xf:var
                    name="attachment-constraints"
                    value="'upload-max-size', 'upload-mediatypes'"/>

                <xf:var
                    name="noargs-constraints"
                    value="'required', 'datatype', 'formula', $noargs-integer-constraints"/>

                <xf:var
                    name="string-arg-constraints"
                    value="'upload-mediatypes'"/>

                <xf:bind ref="validations">

                    <!-- NOTE: There can be at most one required validation for now -->
                    <xf:bind ref="validation[@type = 'required']" name="required-validation"/>

                    <xf:bind ref="validation">
                        <xf:bind
                            ref="@type"
                            name="type"
                            readonly=". = ('required', 'datatype')"/>

                        <xf:bind
                            ref="@level"
                            name="level"
                            readonly="$type = ('required', 'datatype')"/>

                        <xf:bind
                            ref="@default-alert"
                            type="xs:boolean"
                            readonly="false()"
                            calculate="
                                (: No default alert for warning/info constraints :)
                                if (not($type = ('required', 'datatype')) and $level != 'error') then
                                    false()
                                else
                                    ."/>

                        <!-- Keep required in sync -->
                        <xf:bind
                            ref=".[@type = 'datatype']/builtin-type-required"
                            calculate="if ($required-validation/required = 'true()') then 'true' else 'false'"/>

                        <xf:bind
                            ref="constraint/@expression"
                            type="xxf:XPath2"
                            xxf:whitespace="trim"
                            required="false()"
                            relevant="$type = 'formula'"/>

                        <xf:bind
                            ref="constraint/@argument"
                            calculate="if ($type = $noargs-constraints) then '' else ."
                            readonly="false()"
                            required="not($type = $noargs-constraints)"
                            relevant="not($type = $noargs-constraints)"/>

                        <xf:bind
                            ref="constraint/@argument[not(../../@type = ($noargs-constraints, $string-arg-constraints, $date-arg-constraints))]"
                            type="xf:integer"
                            constraint=". ge 0"/>

                        <xf:bind
                            ref="constraint/@argument[../../@type = 'upload-mediatypes']"
                            constraint="fbf:isValidListOfMediatypeRanges(.)"/>

                        <xf:bind
                            ref="constraint/@argument[../../@type = 'excluded-dates']"
                            type="xxf:XPath2"/>

                        <xf:bind
                            ref="required"
                            type="xxf:XPath2"
                            xxf:whitespace="trim"
                            required="true()"/>

                        <xf:bind
                            ref="alert/@message"
                            xxf:whitespace="trim"/>
                    </xf:bind>
                </xf:bind>

                <xf:bind
                    ref="relevant | readonly | default | calculate"
                    type="xxf:XPath2"
                    xxf:whitespace="trim"
                    required="false()"/>

                <xf:bind
                    ref="prev-control-id, next-control-id"
                    readonly="xxf:is-blank()"/>

                <xf:bind
                    ref="(label | hint | help | text)/value"
                    xxf:whitespace="trim"/>

            </xf:model>
        </xbl:implementation>
        <xbl:template xxbl:transform="oxf:unsafe-xslt">
            <xf:group xsl:version="2.0" id="group-around-dialog">
                <!-- Bindings specified on control -->
                <!-- LATER: Use xxf:r(). Need to find solution for itemset resources. -->
                <xf:var name="resources">
                    <xxf:value value=". treat as element()" xxbl:scope="outer" xbl:attr="model context ref=resources-ref"/>
                </xf:var>

                <xxf:dialog id="dialog" level="modal" class="fb-dialog-control-settings">
                    <xf:label ref="$resources/dialog-control-settings/label"/>

                    <xf:var name="form" value="xxf:binding('fb-dialog-control-settings')"/>

                    <!-- Figure out schema prefix if any -->
                    <xf:var name="schema"        value="fbf:findSchemaOrEmpty($form)"       as="xs:string?"/>
                    <xf:var name="schema-prefix" value="fbf:findSchemaPrefixOrEmpty($form)" as="xs:string?"/>

                    <xf:var
                        name="builtin-type"
                        value="$i/validations/validation[@type = 'datatype']/builtin-type/string()"/>

                    <xf:var
                        name="is-attachment"
                        value="xxf:split($i/standard-classes) = 'fr-attachment'"/>

                    <!-- TODO: Language selector like in `dialog-itemsets.xbl` (create XBL component and use native functions). -->

                    <fr:tabbable id="fb-tabbable">
                        <fr:tab id="base-tab">
                            <fr:label ref="$resources/dialog-control-settings/tab-base/label"/>

                            <xh:div class="fb-base-tab-div">
                                <xh:div class="fb-base-tab-left">
                                    <fr:grid id="fb-base-tab-grid">
                                        <xh:tr>
                                            <xh:td>
                                                <!-- Control name -->
                                                <xf:input ref="$i/control-name" incremental="true" id="control-name-input">
                                                    <xf:label ref="$resources/dialog-control-settings/control-name/label"/>
                                                    <xf:alert ref="$resources/dialog-control-settings/control-name/alert"/>
                                                    <xf:hint  ref="$resources/dialog-control-settings/control-name/hint"/>
                                                </xf:input>
                                            </xh:td>
                                        </xh:tr>
                                        <xh:tr>
                                            <xh:td>
                                                <xf:var
                                                    name="items-to-show"
                                                    value="
                                                        $resources/dialog-control-settings/options/item[
                                                            (fr:is-pe() or value != 'fr-encrypt') or
                                                            not(contains(value, 'email'))
                                                        ]
                                                    "/>
                                                <xf:group ref=".[exists($items-to-show)]">
                                                    <xf:repeat ref="$items-to-show" id="items-to-show-repeat">
                                                        <xf:var name="item-to-show"      value="."/>
                                                        <xf:var name="selected-values"   value="xxf:split($i/standard-classes)"/>
                                                        <xf:var name="current-value"     value="$item-to-show/value"/>
                                                        <xf:var
                                                            name="checkbox-disabled"
                                                            value="
                                                                (: Don't disable this checkbox if checked, for backward compatibility :)
                                                                not($current-value = $selected-values) and
                                                                (
                                                                    (
                                                                        $selected-values   = 'fr-encrypt'
                                                                        and $current-value = ('fr-summary', 'fr-search')
                                                                    ) or
                                                                    (
                                                                        $selected-values   = ('fr-summary', 'fr-search')
                                                                        and $current-value = 'fr-encrypt'
                                                                    )
                                                                )"/>
                                                        <xf:var
                                                            name="checkbox-binding"
                                                            value="
                                                                $i/standard-classes/
                                                                (if ($checkbox-disabled) then string() else .)"/>
                                                        <xf:select ref="$checkbox-binding" appearance="full">
                                                            <xf:itemset ref="$item-to-show">
                                                                <xf:label ref="label"/>
                                                                <xf:value ref="value"/>
                                                            </xf:itemset>
                                                        </xf:select>
                                                    </xf:repeat>
                                                </xf:group>
                                            </xh:td>
                                        </xh:tr>
                                        <xh:tr>
                                            <xh:td>

                                                <xf:var
                                                    name="is-static-attachment"
                                                    value="xxf:split($i/standard-classes) = 'fr-static-attachment'"/>

                                                <xf:var
                                                    name="email-items-to-show"
                                                    value="
                                                        $resources/dialog-control-settings/email-options/item[
                                                            (
                                                                $is-attachment or value != 'fr-email-attachment'
                                                            ) and not(
                                                                ($is-attachment or $is-static-attachment) and value = ('fr-email-recipient', 'fr-email-subject')
                                                            )
                                                        ]
                                                    "/>

                                                <xf:select ref="$i/standard-classes" appearance="full">
                                                    <xf:label ref="$resources/dialog-control-settings/email-options/label"/>
                                                    <xf:itemset ref="$email-items-to-show[contains(value, 'email')]">
                                                        <xf:label ref="label"/>
                                                        <xf:value ref="value"/>
                                                    </xf:itemset>
                                                </xf:select>
                                            </xh:td>
                                        </xh:tr>
                                    </fr:grid>
                                </xh:div>
                                <xh:div class="fb-base-tab-right">

                                    <!-- Appearances -->
                                    <xf:var
                                        name="toggle"
                                        value="
                                            count($i/appearances/appearance[xxf:is-blank(value)]) = 1
                                            and count($i/appearances/appearance[xxf:non-blank(value)]) = 1"/>

                                    <xf:var
                                        name="multi"
                                        value="not($toggle) and count($i/appearances/appearance) gt 1"/>

                                    <fr:grid>
                                        <xh:tr>
                                            <xh:td>
                                                <xf:output value="fbf:findPdfFieldName($i/original-control-name, $i/control-name)">
                                                    <xf:label ref="$resources/dialog-control-settings/pdf-field-name/label"/>
                                                </xf:output>
                                            </xh:td>
                                        </xh:tr>
                                        <xh:tr>
                                            <xh:td>
                                                <!-- Custom classes -->
                                                <xf:input ref="$i/custom-classes">
                                                    <xf:label ref="$resources/classes/label"/>
                                                </xf:input>
                                            </xh:td>
                                        </xh:tr>
                                        <xh:tr>
                                            <xh:td>
                                                <xf:group ref=".[$multi or $toggle]">
                                                    <xf:action event="xforms-value-changed">
                                                        <xf:dispatch
                                                            name="fb-process-xbl-fb-control-details"
                                                            targetid="fb-dialog-control-settings">
                                                            <xf:property name="new-appearance"      value="event('xxf:value')"/>
                                                            <xf:property name="datatype-validation" value="$i/validations/validation[@type = 'datatype']"/>
                                                        </xf:dispatch>
                                                    </xf:action>
                                                    <!-- Propose a choice between multiple items -->
                                                    <xf:select1 ref="$i/appearances/@selection[$multi]" appearance="full">
                                                        <xf:label ref="$resources/dialog-control-settings/control-appearance/label"/>
                                                        <xf:itemset ref="$i/appearances/appearance">
                                                            <xf:label
                                                                mediatype="text/html"
                                                                value="
                                                                    concat(
                                                                        if (exists(icon-path)) then
                                                                            concat('&lt;img src=&quot;', icon-path[1], '&quot; alt=&quot;&quot;/>')
                                                                        else
                                                                            concat('&lt;i class=&quot;', (icon-class)[1], '&quot;/>'),
                                                                        ' ',
                                                                        label
                                                                    )
                                                            "/>
                                                            <xf:value ref="value"/>
                                                        </xf:itemset>
                                                    </xf:select1>
                                                    <!-- Simplified case where we just show a checkbox -->
                                                    <xf:select ref="$i/appearances/@selection[$toggle]" appearance="full">
                                                        <xf:label ref="$resources/dialog-control-settings/control-appearance/label"/>
                                                        <xf:itemset ref="$i/appearances/appearance[xxf:non-blank(value)]">
                                                            <xf:label
                                                                mediatype="text/html"
                                                                value="
                                                                    concat(
                                                                        if (exists(icon-path)) then
                                                                            concat('&lt;img src=&quot;', icon-path[1], '&quot; alt=&quot;&quot;/>')
                                                                        else
                                                                            concat('&lt;i class=&quot;', (icon-class)[1], '&quot;/>'),
                                                                        ' ',
                                                                        label
                                                                    )
                                                            "/>
                                                            <xf:value ref="value"/>
                                                        </xf:itemset>
                                                    </xf:select>
                                                </xf:group>
                                            </xh:td>
                                        </xh:tr>
                                    </fr:grid>
                                    <!-- Properties specific to this control defined in the XBL metadata -->
                                    <xxf:dynamic ref="instance('dynamic')[exists(//xf:instance/*)]" id="custom-properties"/>
                                </xh:div>
                            </xh:div>
                        </fr:tab>
                        <fr:tab id="validations-tab" context="validations">
                            <fr:label ref="$resources/dialog-control-settings/tab-validations/label"/>
                            <fr:grid>
                                <xh:tr>
                                    <xh:td>
                                        <fr:checkbox-input ref="instance()/whitespace" selected-value="trim" deselected-value="">
                                            <xf:label value="xxf:r('dialog-control-settings.whitespace.item.label', '|fr-form-resources|')"/>
                                        </fr:checkbox-input>
                                        <fr:checkbox-input ref="$i/default-alert/alert/@global">
                                            <xf:label ref="$resources/dialog-control-settings/use-global-alert/label"/>
                                            <!-- Dynamic bind depends on this value, we must do an explicit RRR -->
                                            <xf:action event="xforms-value-changed">
                                                <xf:rebuild/>
                                                <xf:recalculate/>
                                            </xf:action>
                                        </fr:checkbox-input>
                                    </xh:td>
                                    <xh:td>
                                        <xf:input bind="default-alert">
                                            <xf:label ref="$resources/dialog-control-settings/default-alert/label"/>
                                            <xf:hint  ref="$resources/dialog-control-settings/default-hint/label"/>
                                        </xf:input>
                                    </xh:td>
                                </xh:tr>
                            </fr:grid>

                            <fr:grid
                                id="validations-grid"
                                ref="validation"
                                origin="instance('validation-constraint-template')"
                                repeat="true"
                                freeze="2">

                                <fr:c y="1" x="1" w="3">

                                    <xf:var
                                        name="validation-type"
                                        value="@type"/>

                                    <xf:var
                                        name="allowed-constraints"
                                        value="
                                            'formula',
                                            (
                                                if ($is-attachment) then
                                                    (: For #4725: special case as multiple attachment is not an `anyURI` :)
                                                    $attachment-constraints
                                                else if ($builtin-type = ('string', 'email')) then
                                                    $string-constraints
                                                else if ($builtin-type = 'integer') then
                                                    $integer-constraints
                                                else if ($builtin-type = 'decimal') then
                                                    $decimal-constraints
                                                else if ($builtin-type = 'date') then
                                                    $date-constraints
                                                else
                                                    ()
                                            ),
                                            $validation-type/string()
                                    "/>

                                    <xf:select1 ref="$validation-type" appearance="minimal" id="fb-validation-type-control">
                                        <xf:label ref="$resources/dialog-control-settings/validation-type/label"/>
                                        <xf:itemset ref=".[. = 'required']">
                                            <xf:label ref="$resources/dialog-control-settings/required/label"/>
                                            <xf:value>required</xf:value>
                                        </xf:itemset>
                                        <xf:itemset ref=".[. = 'datatype']">
                                            <xf:label ref="$resources/dialog-control-settings/types/label"/>
                                            <xf:value>datatype</xf:value>
                                        </xf:itemset>
                                        <xf:itemset ref="$resources/dialog-control-settings/constraint/item[@id = $allowed-constraints]">
                                            <xf:label ref="."/>
                                            <xf:value ref="@id"/>
                                        </xf:itemset>

                                        <!-- Dynamic bind depends on this value, we must do an explicit RRR -->
                                        <xf:action event="xforms-value-changed">
                                            <xf:rebuild/>
                                            <xf:recalculate/>
                                        </xf:action>

                                    </xf:select1>
                                </fr:c>
                                <fr:c y="1" x="4" w="3">
                                    <xf:group appearance="xxf:internal" id="fb-validation-details-control">
                                        <xf:label ref="$resources/dialog-control-settings/validation-details/label"/>

                                        <xf:var
                                            name="validation-type"
                                            value="@type"/>

                                        <xf:group ref=".[$validation-type = 'required']/required">
                                            <fb:boolean-or-formula ref="." resources-ref="$resources"/>
                                        </xf:group>

                                        <!-- Built-in type -->
                                        <xf:group ref=".[$validation-type = 'datatype']">
                                            <!--
                                                - only keep "reasonable" types
                                                - add supported type only if already present in the data
                                            -->
                                            <xf:var
                                                name="supported"
                                                value="'string', 'decimal', 'integer', 'dateTime', 'date', 'time', 'boolean', 'email', $builtin-type"/>

                                            <xf:var name="current-builtin-type" value="builtin-type/string()"/>
                                            <xf:select1 ref="builtin-type">
                                                <!-- Only show label if there is a schema -->
                                                <xf:label ref="$resources/dialog-control-settings/builtin-type/label[exists($schema)]"/>
                                                <!-- Add placeholder if there is a schema type -->
                                                <xf:itemset ref=".[../schema-type != '']">
                                                    <xf:label ref="$resources/dialog-control-settings/builtin-type/use-schema-type"/>
                                                    <xf:value/>
                                                </xf:itemset>
                                                <xf:itemset
                                                    ref="
                                                        $resources/dialog-control-settings/builtin-type/choices//(
                                                            choices[
                                                                exists(type[. = $supported])
                                                            ]
                                                            |
                                                            type[. = $supported]
                                                        )">
                                                    <xf:label ref="if (self::choices) then label else if (xxf:non-blank(@label)) then @label else ."/>
                                                    <xf:value ref="if (self::choices) then () else ."/>
                                                </xf:itemset>
                                                <xf:setvalue event="xforms-value-changed" if=". != ''" ref="../schema-type"/>
                                                <!--  Update available appearances -->
                                                <xf:dispatch
                                                    event="xforms-select"
                                                    name="reload-appearances"
                                                    targetid="model">
                                                    <xf:property name="is-initial-load"       value="false()"/>
                                                    <xf:property name="previous-builtin-type" value="$current-builtin-type"/>
                                                    <xf:property name="new-builtin-type"      value="event('xxf:item-value')"/>
                                                </xf:dispatch>
                                            </xf:select1>
                                            <!-- Schema type selection if applicable -->
                                            <fr:dropdown-select1 ref="schema-type[exists($schema)]">
                                                <xf:label ref="$resources/dialog-control-settings/schema-type/label"/>
                                                <!-- NOTE: Mark itemset as mutable as the schema may be updated -->
                                                <xf:itemset ref="$schema/xs:simpleType">
                                                    <xf:label ref="string-join(($schema-prefix, @name), ':')"/>
                                                    <xf:value ref="string-join(($schema-prefix, @name), ':')"/>
                                                </xf:itemset>
                                                <xf:setvalue event="xforms-value-changed" if=". != ''" ref="../builtin-type"/>
                                            </fr:dropdown-select1>
                                        </xf:group>

                                        <!-- Formula or common constraint argument -->
                                        <xf:group ref=".[not($validation-type = ('required', 'datatype'))]">
                                            <xf:textarea ref="constraint/@argument[$validation-type = 'excluded-dates'], constraint/@expression">
                                                <xf:label
                                                    class="xforms-hidden"
                                                    appearance="minimal"
                                                    ref="$resources/dialog-control-settings/formula/label"/>
                                                <xf:alert ref="$resources/dialog-control-settings/formula/alert"/>
                                            </xf:textarea>
                                            <fr:number
                                                ref="constraint/@argument[local-name-from-QName(xxf:type()) = 'integer']"
                                                suffix="{{'bytes'[$validation-type = 'upload-max-size']}}">
                                                <xf:label
                                                    appearance="minimal"
                                                    ref="
                                                        if ($validation-type = 'upload-max-size') then
                                                            $resources/dialog-form-settings/attachment-max-size/label
                                                        else
                                                            $resources/dialog-control-settings/integer-argument/label"/>
                                                <xf:alert ref="$resources/dialog-control-settings/integer-argument/alert"/>
                                            </fr:number>
                                            <!-- NOTE: Later label/hint can be different depending on specific constraint -->
                                            <xf:input ref="constraint/@argument[$validation-type = 'upload-mediatypes']">
                                                <xf:label
                                                    appearance="minimal"
                                                    ref="$resources/dialog-form-settings/attachment-mediatypes/label"/>
                                                <xf:hint ref="$resources/dialog-form-settings/attachment-mediatypes/hint"/>
                                                <xf:alert ref="$resources/dialog-control-settings/integer-argument/alert"/>
                                            </xf:input>
                                        </xf:group>
                                    </xf:group>

                                </fr:c>
                                <fr:c y="1" x="7" w="2">
                                    <xf:select1 ref="@level" id="fb-validation-level-control">
                                        <xf:label ref="$resources/dialog-control-settings/level/label"/>
                                        <xf:item>
                                            <xf:label>Error</xf:label>
                                            <xf:value>error</xf:value>
                                        </xf:item>
                                        <xf:item>
                                            <xf:label>Warning</xf:label>
                                            <xf:value>warning</xf:value>
                                        </xf:item>
                                        <xf:item>
                                            <xf:label>Info</xf:label>
                                            <xf:value>info</xf:value>
                                        </xf:item>
                                    </xf:select1>
                                </fr:c>
                                <fr:c y="1" x="9" w="4">
                                    <!-- HACK: Internal group with label will not show as `fieldset`, which we have trouble styling
                                         with CSS. However, `fr:grid` will obtain the label and place it in the grid header. -->
                                    <xf:group id="fb-validation-alert-control" appearance="xxf:internal">
                                        <xf:label ref="$resources/dialog-control-settings/alert/label"/>
                                        <!-- Since the group above is internal, we need an additional span so we can style with CSS. -->
                                        <xh:span class="fb-control-settings-alert-block">
                                            <xf:input
                                                ref="
                                                    if (@default-alert = false() or @level != 'error') then
                                                        alert/@message
                                                    else
                                                        $i/default-alert/@readonly-alert-message">
                                                <xf:label ref="$resources/dialog-control-settings/alert/label"/>
                                            </xf:input>
                                            <xf:input ref=".[@level = 'error']/@default-alert">
                                                <xf:label ref="$resources/dialog-control-settings/use-default-alert/label"/>
                                            </xf:input>
                                        </xh:span>
                                    </xf:group>
                                </fr:c>
                            </fr:grid>
                        </fr:tab>
                        <fr:tab id="formulas-tab">
                            <fr:label ref="$resources/dialog-control-settings/tab-formulas/label"/>
                            <fr:grid>
                                <xh:tr>
                                    <xh:td>
                                        <xf:textarea ref="calculate">
                                            <xf:label ref="$resources/dialog-control-settings/calculate/label"/>
                                            <xf:alert ref="$resources/dialog-control-settings/calculate/alert"/>
                                            <xf:hint  ref="$resources/dialog-control-settings/calculate/hint"/>
                                        </xf:textarea>
                                    </xh:td>
                                    <xh:td>
                                        <xf:textarea ref="default">
                                            <xf:label ref="$resources/dialog-control-settings/default/label"/>
                                            <xf:alert ref="$resources/dialog-control-settings/default/alert"/>
                                            <xf:hint  ref="$resources/dialog-control-settings/default/hint"/>
                                        </xf:textarea>
                                    </xh:td>
                                </xh:tr>
                                <xh:tr>
                                    <xh:td>
                                        <fb:boolean-or-formula ref="relevant" resources-ref="$resources">
                                            <xf:label ref="$resources/dialog-control-settings/visibility/label"/>
                                            <xf:hint  ref="$resources/dialog-control-settings/visibility/hint"/>
                                        </fb:boolean-or-formula>
                                    </xh:td>
                                    <xh:td>
                                        <fb:boolean-or-formula ref="readonly" resources-ref="$resources">
                                            <xf:label ref="$resources/dialog-control-settings/readonly/label"/>
                                            <xf:hint  ref="$resources/dialog-control-settings/readonly/hint"/>
                                        </fb:boolean-or-formula>
                                    </xh:td>
                                </xh:tr>
                            </fr:grid>
                        </fr:tab>
                        <fr:tab id="label-hint-help-tab" ref="(text, label, hint, help)[@supported = 'true']">
                            <fr:label
                                ref="
                                    $resources/dialog-control-settings/*[
                                        name() = concat('control-', local-name(context()))
                                    ]/label"/>

                            <xf:var
                                name="lhh"
                                value="local-name(context())"/>

                            <xf:var
                                name="resource"
                                value="
                                    $resources/dialog-control-settings/*[
                                        name() = concat('control-', $lhh)
                                    ]"/>

                            <fr:grid>
                                <fr:c x="1" y="1" w="12">
                                    <fr:checkbox-input ref=".[$lhh != 'text']/@isHTML">
                                        <xf:label ref="$resources/dialog-control-settings/use-html"/>
                                    </fr:checkbox-input>
                                    <xf:var name="is-html" value="@isHTML = 'true'"/>
                                    <xf:input ref=".[not($is-html) and $lhh = ('label', 'hint')]/value">
                                        <xf:label ref="$resource/label"/>
                                        <xf:hint  ref="$resource/hint"/>
                                    </xf:input>
                                    <xf:textarea ref=".[not($is-html) and not($lhh = ('label', 'hint'))]/value">
                                        <xf:label ref="$resource/label"/>
                                        <xf:hint  ref="$resource/hint"/>
                                    </xf:textarea>
                                    <fr:tinymce ref=".[$is-html]/value">
                                        <xf:label ref="$resource/label"/>
                                        <xf:hint  ref="$resource/hint"/>
                                    </fr:tinymce>
                                </fr:c>
                                <fr:c x="1" y="2" w="12">
                                    <fb:parameters-editor ref="." resources-ref="$resources" form-runner-links="true">
                                        <xf:label ref="$resources/dialog-control-settings/parameters"/>
                                    </fb:parameters-editor>
                                </fr:c>
                            </fr:grid>

                        </fr:tab>

                        <!-- Custom control settings -->
                        <xsl:variable
                            xmlns:p="http://www.orbeon.com/oxf/pipeline"
                            name="custom-control-settings"
                            as="xs:string?"
                            select="p:trim(p:property('oxf.fb.extension.control-settings'))[p:non-blank()]"/>

                        <xsl:if test="$custom-control-settings">

                            <xsl:variable
                                name="prefix"
                                as="xs:string"
                                select="substring-before($custom-control-settings, ':')"/>

                            <xsl:variable
                                xmlns:p="http://www.orbeon.com/oxf/pipeline"
                                name="namespace-uri"
                                as="xs:string"
                                select="p:property(concat('oxf.xforms.xbl.mapping.', $prefix))"/>

                            <fr:tab>
                                <fr:label ref="$resources/custom-settings"/>
                                <xsl:element name="{$custom-control-settings}" namespace="{$namespace-uri}">
                                    <xsl:attribute name="id" select="'fb-custom-control-settings'"/>

                                    <!--  Allow component to update datatype -->
                                    <xf:setvalue
                                        event="fb-update-datatype"
                                        if="xxf:non-blank(event('datatype'))"
                                        ref="$i/validations/validation[@type = 'datatype']/builtin-type"
                                        value="event('datatype')"/>

                                </xsl:element>
                            </fr:tab>
                        </xsl:if>
                    </fr:tabbable>

                    <fr:error-summary id="error-summary" observer="fb-tabbable" valid-ref="$i/@valid">
                        <fr:label>Errors</fr:label>
                    </fr:error-summary>

                    <!--<fr:xforms-inspector/>-->

                    <!-- See https://github.com/orbeon/orbeon-forms/issues/2337 -->
                    <xh:div class="fr-dialog-buttons" xml:space="preserve">
                        <xh:div class="pull-left">
                            <xf:trigger id="prev-button" ref="$i/prev-control-id">
                                <xf:label ref="xxf:r('buttons.previous', '|fr-fr-resources|')"/>
                            </xf:trigger>
                            <xf:trigger id="next-button" ref="$i/next-control-id">
                                <xf:label ref="xxf:r('buttons.next', '|fr-fr-resources|')"/>
                            </xf:trigger>
                        </xh:div>
                        <xf:trigger appearance="xxf:primary" id="save-button">
                            <xf:label ref="$resources/apply/label"/>
                        </xf:trigger>
                        <xf:output value="$resources/or/label"/>
                        <xf:trigger appearance="minimal" id="cancel-button">
                            <xf:label ref="$resources/cancel/label"/>
                        </xf:trigger>
                    </xh:div>
                </xxf:dialog>
            </xf:group>
        </xbl:template>
    </xbl:binding>
</xbl:xbl>