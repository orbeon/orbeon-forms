<!--
  Copyright (C) 2010 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl xmlns:xh="http://www.w3.org/1999/xhtml"
         xmlns:xf="http://www.w3.org/2002/xforms"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:ev="http://www.w3.org/2001/xml-events"
         xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
         xmlns:exf="http://www.exforms.org/exf/1-0"
         xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
         xmlns:fb="http://orbeon.org/oxf/xml/form-builder"
         xmlns:saxon="http://saxon.sf.net/"
         xmlns:xbl="http://www.w3.org/ns/xbl"
         xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xmlns:oxf="http://www.orbeon.com/oxf/processors">

    <xbl:script src="/xbl/orbeon/autocomplete/autocomplete.js"/>
    <xbl:script src="/ops/yui/datasource/datasource.js"/>
    <xbl:script src="/ops/yui/autocomplete/autocomplete.js"/>

    <xbl:binding id="fr-autocomplete" element="fr|autocomplete" xxf:external-events="fr-value-selected" xxbl:mode="lhha binding value">

        <metadata xmlns="http://orbeon.org/oxf/xml/form-builder" xmlns:xf="http://www.w3.org/2002/xforms">
            <display-name lang="en">Autocomplete</display-name>
            <display-name lang="fr">Auto-complétion</display-name>
            <display-name lang="ru">Автозаполнение</display-name>
	    	<display-name lang="it">Completamento automatico</display-name>
            <display-name lang="de">Autovervollständigung</display-name>
            <icon lang="en">
                <small-icon>/forms/orbeon/builder/images/autocomplete.png</small-icon>
                <large-icon>/forms/orbeon/builder/images/autocomplete.png</large-icon>
            </icon>
            <templates>
                <instance label=""/>
                <view>
                    <fr:autocomplete id="" appearance="minimal" labelref="@label" xmlns="" resource="">
                        <xf:label ref=""/>
                        <xf:hint ref=""/>
                        <xf:help ref=""/>
                        <xf:alert ref=""/>
                        <!-- Itemset points to an empty nodeset until users set them in the control details dialog -->
                        <xf:itemset ref="()">
                            <xf:label ref="()"/>
                            <xf:value ref="()"/>
                        </xf:itemset>
                    </fr:autocomplete>
                </view>
            </templates>
            <control-details>
                <xf:input ref="@resource">
                    <xf:label lang="en">Resource URI</xf:label>
                    <xf:label lang="fr">URI de la ressource</xf:label>
					<xf:label lang="it">URI della risorsa</xf:label>
                    <xf:label lang="de">URI der Ressource</xf:label>
                    <xf:hint lang="en">HTTP URI returning data used for the suggestions</xf:hint>
                    <xf:hint lang="fr">URI HTTP auquel réside le service</xf:hint>
					<xf:hint lang="de">HTTP URI welche die Daten für den Hinweis liefert</xf:hint>
                    <xf:hint lang="it">URI HTTP che da i dati per il suggerimento</xf:hint>
                </xf:input>
                <xf:input ref="xf:itemset/@ref">
                    <xf:label ref="$resources/dialog-actions/items/label"/>
                    <xf:hint ref="$resources/dialog-actions/items/hint"/>
                </xf:input>
                <xf:input ref="xf:itemset/xf:label/@ref">
                    <xf:label ref="$resources/dialog-actions/label/label"/>
                    <xf:hint ref="$resources/dialog-actions/label/hint"/>
                </xf:input>
                <xf:input ref="xf:itemset/xf:value/@ref">
                    <xf:label ref="$resources/dialog-actions/value/label"/>
                    <xf:hint ref="$resources/dialog-actions/value/hint"/>
                </xf:input>
            </control-details>
        </metadata>

        <xbl:resources>
            <xbl:style src="/ops/yui/autocomplete/assets/skins/sam/autocomplete.css"/>
            <xbl:style src="/xbl/orbeon/autocomplete/autocomplete.css"/>
        </xbl:resources>
        <xbl:handlers>
            <xbl:handler event="fr-set-label" phase="target">
                <!-- NOTE: This test won't be necessary anymore once this bug is fixed: http://goo.gl/n8wGO -->
                <xf:action if="relevant = 'true'">
                    <!--  HACK: Force a refresh so the setvalue will have an effect in the case where the fr-set-value is sent on xforms-ready. -->
                    <!--  This case is tested by the unit test testSetLabelOnXFormsReady, and we'll hopefully soon be able to remove this refresh. -->
                    <xf:refresh/>
                    <xf:setvalue ref="textfield-value" value="event('label')"/>
                    <!-- Dispatch value change event so we dispatch the fr-search-changed to have the itemset updated right away -->
                    <xf:dispatch name="xforms-value-changed" targetid="search"/>
                    <xf:dispatch name="update-external-value" targetid="component-inner-group">
                        <xf:property name="ajax-response-processed" value="true()"/>
                    </xf:dispatch>
                </xf:action>
            </xbl:handler>
            <xbl:handler event="fr-value-selected">
                <xf:dispatch name="update-external-value" targetid="component-inner-group"/>
            </xbl:handler>
        </xbl:handlers>
        <xbl:template xxbl:transform="oxf:unsafe-xslt">
            <xsl:transform version="2.0">
                <xsl:import href="oxf:/oxf/xslt/utils/copy-modes.xsl"/>
                <xsl:import href="oxf:/oxf/xslt/utils/xbl.xsl"/>
                <xsl:template match="/*">
                    <!-- Outer group -->
                    <xf:group id="component-inner-group" class="fr-autocomplete-container">

                        <!-- - - - - - - - - - - - - - - - - - - LOCAL MODEL - - - - - - - - - - - - - - - - - - -->

                        <!-- NOTE: declared here instead of in xbl:implementation so we can use XSLT -->
                        <xf:model id="autocomplete-model">
                            <xf:instance id="local">
                                <autocomplete>
                                    <relevant>false</relevant>
                                    <readonly>false</readonly>
                                    <textfield-value/>
                                </autocomplete>
                            </xf:instance>

                            <xf:bind ref="textfield-value" readonly="../readonly = 'true'"/>

                            <!-- In resource mode, the suggestions -->
                            <xf:instance id="suggestions-instance"><dummy/></xf:instance>
                            <!-- What do when doing a refresh -->
                            <xf:submission id="get-itemset" method="get" resource="{{event('resource')}}" replace="instance"
                                               instance="suggestions-instance" serialization="none">
                                <xf:insert ev:event="xforms-submit-error" ref="instance('suggestions-instance')" origin="xxf:element('dummy')"/>
                            </xf:submission>
                        </xf:model>

                        <!-- - - - - - - - - - - - - - - - - - - VARIABLES - - - - - - - - - - - - - - - - - - -->

                        <!-- Variable pointing to external single-node binding -->
                        <xf:var name="binding" value="xxf:binding('fr-autocomplete')"/>
                        <xf:var name="script"  value="not(exf:readonly($binding) and property('xxf:readonly-appearance') = 'static' or property('xxf:noscript'))"/>

                        <xf:var name="local" value="instance('local')"/>
                        <xf:var name="dynamic-itemset-attribute" xbl:attr="xbl:text=dynamic-itemset"/>
                        <!-- Yes, we want this variable both in inner and outer scope  -->
                        <xf:var name="resource-avt" xbl:attr="xbl:text=resource"/>
                        <xf:var name="resource-avt" xbl:attr="xbl:text=resource" xxbl:scope="outer"/>
                        <!-- Mode is either: static, dynamic, resource -->
                        <xf:var name="mode" value="if ($resource-avt != '') then 'resource' else if ($dynamic-itemset-attribute = 'true') then 'dynamic' else 'static'"/>
                        <xf:var name="dynamic-itemset" value="$mode = ('dynamic', 'resource')"/>
                        <!-- Declare a variable fr-search-value in outer scope so it can be used in the AVT -->
                        <xf:var name="fr-search-value" xxbl:scope="outer">
                            <xxf:sequence value="$local/textfield-value" xxbl:scope="inner"/>
                        </xf:var>
                        <!-- Evaluate the resource AVT -->
                        <xsl:if test="exists(@resource)">
                            <xf:var name="resource" xbl:attr="xbl:text=resource" id="resource-variable">
                                <xxf:sequence value="xxf:evaluate-avt($resource-avt)" xxbl:scope="outer"/>
                            </xf:var>
                        </xsl:if>
                        <!-- Define variables $has-labelref (xs:boolean) and $external-label (node()) -->
                        <xf:var name="labelref" xbl:attr="xbl:text=labelref"/>
                        <xf:var name="has-labelref" value="$dynamic-itemset and $labelref != ''"/>
                        <!-- HACK: It is unfortunate that we have to duplicate in XSLT the logic already implement in XForms for $dynamic-itemset  -->
                        <xsl:if test="exists(@resource) or @dynamic-itemset = 'true'">
                            <xf:var name="external-label"><xxf:sequence xbl:attr="value=labelref" xxbl:scope="outer"/></xf:var>
                        </xsl:if>

                        <!-- - - - - - - - - - - - - - - - - - - FUNCTIONS - - - - - - - - - - - - - - - - - - -->

                        <!-- Look for value based on label and update external value (e.g. on tab out) -->
                        <xf:action ev:event="update-external-value">
                            <xf:var name="value" value="xxf:element('value')"/>
                            <xf:dispatch name="get-value-from-itemset" targetid="component-inner-group"><xf:property name="fr-value" value="$value"/></xf:dispatch>
                            <xf:setvalue ref="$binding" value="$value"/>
                            <!-- If no value is found, clear the search field -->
                            <xf:setvalue if="$value = ''"   ref="$local/textfield-value"/>
                            <xf:setvalue if="$has-labelref" ref="$external-label" value="$local/textfield-value"/>
                            <xxf:script id="out-arp" if="event('ajax-response-processed') and $script">YAHOO.xbl.fr.Autocomplete.instance(this).ajaxResponseProcessed();</xxf:script>
                        </xf:action>
                        <xf:action ev:event="get-label-from-itemset">
                            <xf:var name="label" value="event('fr-label')"/>
                            <xf:var name="select1-items" value="xxf:itemset('select1', 'xml')//item"/>
                            <xf:var name="select1-labels" value="($select1-items/value)[position() le count($select1-items) div 2]"/>
                            <xf:var name="select1-values" value="($select1-items/value)[position() gt count($select1-items) div 2]"/>
                            <xf:setvalue ref="$label" value="$select1-labels[index-of($select1-values, $binding)[1]]"/>
                        </xf:action>
                        <xf:action ev:event="get-value-from-itemset">
                            <xf:var name="value" value="event('fr-value')"/>
                            <xf:refresh/> <!-- So the itemset we get from the select1 is up-to-date -->
                            <xf:var name="select1-items" value="xxf:itemset('select1', 'xml')//item"/>
                            <xf:var name="select1-labels" value="($select1-items/value)[position() le count($select1-items) div 2]"/>
                            <xf:var name="select1-values" value="($select1-items/value)[position() gt count($select1-items) div 2]"/>
                            <xf:setvalue ref="$value" value="$select1-values[index-of($select1-labels, $local/textfield-value)[1]]"/>
                        </xf:action>

                        <!-- - - - - - - - - - - - - - - - - - - EVENTS - - - - - - - - - - - - - - - - - - -->

                        <!-- Init event -->
                        <xf:action id="xf-en" ev:event="xforms-enabled" ev:observer="component-inner-group" ev:target="#observer">
                            <xxf:script id="init" if="$script">YAHOO.xbl.fr.Autocomplete.instance(this).init();</xxf:script>
                            <!-- On xforms-enabled, if $has-labelref, copy the $external-label to the search field -->
                            <xf:setvalue if="$has-labelref" ref="$local/textfield-value" value="$external-label"/>
                        </xf:action>
                        <!-- For resource mode: when the component is initialized or when resources changes, update our internal itemset -->
                        <xsl:if test="exists(@resource)">
                            <xf:action ev:event="xforms-value-changed" ev:observer="resource-variable">
                                <!-- Update itemset based on resource -->
                                <xf:send submission="get-itemset">
                                    <xf:property name="resource" value="$resource"/>
                                </xf:send>
                            </xf:action>
                        </xsl:if>
                        <!-- Forward focus event and keep track of whether we have the focus -->
                        <!-- HACK: We would like the propagation of the DOMFocusIn/DOMFocusOut to be done automatically by the XBL engine -->
                        <xf:action ev:event="DOMFocusIn" ev:observer="component-inner-group" ev:target="#observer">
                            <xf:dispatch name="DOMFocusIn" targetid="fr-autocomplete"/>
                        </xf:action>
                        <xf:action ev:event="DOMFocusOut" ev:observer="component-inner-group" ev:target="#observer">
                            <xf:dispatch name="DOMFocusOut" targetid="fr-autocomplete"/>
                            <xf:dispatch name="update-external-value" targetid="component-inner-group"/>
                        </xf:action>
                        <!-- As the user types, dispatch event to notify the external world about the value entered by the user so far -->
                        <xf:action ev:event="xforms-value-changed" ev:observer="search" if="$dynamic-itemset">
                            <xf:dispatch targetid="fr-autocomplete" name="fr-search-changed">
                                <xf:property name="fr-search-value" value="$local/textfield-value"/>
                            </xf:dispatch>
                        </xf:action>
                        <xsl:if test="not(@show-suggestions-button = 'false')">
                            <!-- Clicking on the button is a way to open the suggestion list without having to type something -->
                            <xf:action ev:event="DOMActivate" ev:observer="show-suggestions-button">
                                <xf:setfocus control="search"/>
                                <xf:dispatch targetid="resource-variable" name="xforms-value-changed"/>           <!-- For the resource mode, listening on resource AVT changing -->
                                <xf:dispatch targetid="search" name="xforms-value-changed"/>                      <!-- For the dynamic mode, listening on the search field content changing -->
                                <xxf:script id="sr" if="$script">YAHOO.xbl.fr.Autocomplete.instance(this).suggestionRequested = true;</xxf:script>
                            </xf:action>
                        </xsl:if>
                        <!-- In static mode, when the external value changes, search for an item with that value, and set search value to the item's label -->
                        <xf:action ev:event="xforms-enabled xforms-value-changed" ev:observer="external-value" if="not($dynamic-itemset)">
                            <xf:var name="select1-current-label" value="xxf:element('label')"/>
                            <xf:dispatch name="get-label-from-itemset" targetid="component-inner-group"><xf:property name="fr-label" value="$select1-current-label"/></xf:dispatch>
                            <xf:setvalue ref="$local/textfield-value" value="$select1-current-label"/>
                        </xf:action>
                        <!-- For the dynamic and resource mode, just reset the search field if the external value becomes empty -->
                        <xf:setvalue ev:event="xforms-value-changed" ev:observer="external-value" if="$dynamic-itemset and $binding = ''" ref="$local/textfield-value"/>
                        <!-- Keep track of readonlyness and relevance -->
                        <xf:setvalue ev:observer="external-value" ev:event="xforms-readonly" ref="$local/readonly">true</xf:setvalue>
                        <xf:setvalue ev:observer="external-value" ev:event="xforms-readwrite" ref="$local/readonly">false</xf:setvalue>
                        <xf:setvalue ev:observer="external-value" ev:event="xforms-enabled" ref="$local/relevant">true</xf:setvalue>
                        <xf:setvalue ev:observer="external-value" ev:event="xforms-disabled" ref="$local/relevant">false</xf:setvalue>

                        <!-- - - - - - - - - - - - - - - - - - - MARKUP - - - - - - - - - - - - - - - - - - -->

                        <!-- Markup with input for the YUI autocomplete -->
                        <xh:div xbl:attr="class style">
                            <xf:input id="search" ref="$local/textfield-value" incremental="true" class="fr-autocomplete-search" xbl:attr="tabindex accesskey"/>
                            <!-- Button that opens the list of suggestions -->
                            <xsl:if test="not(@show-suggestions-button = 'false')">
                                <!-- Make button non-relevant in static readonly mode, in order to avoid updates to
                                     the relevance of the nested trigger. Without this, if the trigger is initially
                                     readonly, it won't output markup at all. But then if it becomes non-relevant,
                                     the server will tell the client to make it non-relevant, as it has lost the
                                     knowledge that the button was static readonly. By making the whole thing
                                     non-relevant, we avoid this change of state. Of course ideally static
                                     readonly would not have this unwanted behavior. -->
                                <xf:group ref=".[not($local/readonly = 'true' and property('xxf:readonly-appearance') = 'static')]">
                                    <!-- Bound to text field value so button becomes readonly when the textfield is readonly -->
                                    <xf:trigger ref="$local/textfield-value" class="fr-autocomplete-show-suggestions-button" id="show-suggestions-button">
                                        <xf:label>
                                            <xh:img src="/xbl/orbeon/autocomplete/down-arrow.png" alt=""/>
                                        </xf:label>
                                    </xf:trigger>
                                </xf:group>
                            </xsl:if>
                            <xh:div class="fr-autocomplete-yui-div"/>
                        </xh:div>

                        <!-- Configuration -->
                        <xf:output id="itemset" class="fr-autocomplete-dynamic-itemset" value="$dynamic-itemset" style="display: none"/>
                        <xsl:copy-of select="xxbl:parameter(., 'max-results-displayed')"/>

                        <!-- Dropdown with value shown by autocomplete -->
                        <xf:select1 id="select1" ref="$binding" class="fr-autocomplete-select1" appearance="minimal" xxf:encrypt-item-values="false" style="display: none">
                            <!-- The hidden dropdown contains first all the label/label, then all the value/value -->
                            <xsl:apply-templates select="xf:itemset | xf:item" mode="copy-label">
                                <xsl:with-param name="resource-instance" tunnel="yes">suggestions-instance</xsl:with-param>
                            </xsl:apply-templates>
                            <xsl:apply-templates select="xf:itemset | xf:item" mode="copy-value">
                                <xsl:with-param name="resource-instance" tunnel="yes">suggestions-instance</xsl:with-param>
                            </xsl:apply-templates>
                        </xf:select1>

                        <!-- Input with external value -->
                        <xf:input id="external-value" ref="$binding" class="fr-autocomplete-external-value" style="display: none"/>
                    </xf:group>
                </xsl:template>

                <!-- Add the xxbl:scope="outer" on the xf:itemset and xf:item -->
                <xsl:template match="xf:itemset | xf:item" mode="#all">
                    <xsl:param name="resource-instance" tunnel="yes"/>
                    <xsl:copy>
                        <!-- If we have a resource, XPath expressions are relative to suggestions-instance -->
                        <xsl:variable name="has-resource" select="exists(/*/@resource)"/>
                        <xsl:if test="$resource-instance = 'suggestions-instance'"><xsl:attribute name="xxbl:scope" select="if ($has-resource) then 'inner' else 'outer'"/></xsl:if>
                        <xsl:if test="$has-resource"><xsl:attribute name="context" select="concat('instance(''', $resource-instance, ''')')"/></xsl:if>
                        <xsl:apply-templates select="@* | node()" mode="#current"/>
                    </xsl:copy>
                </xsl:template>

                <!-- Don't do anything when the element does not correspond to the mode -->
                <xsl:template match="xf:label" mode="copy-value"/>
                <xsl:template match="xf:value" mode="copy-label"/>

                <!-- When the element matches the mode, generate the other one -->
                <xsl:template match="xf:label" mode="copy-label">
                    <xsl:copy-of select="."/>
                    <xf:value><xsl:copy-of select="@* | node()"/></xf:value>
                </xsl:template>
                <xsl:template match="xf:value" mode="copy-value">
                    <xsl:copy-of select="."/>
                    <xf:label><xsl:copy-of select="@* | node()"/></xf:label>
                </xsl:template>
            </xsl:transform>
        </xbl:template>
    </xbl:binding>

</xbl:xbl>
